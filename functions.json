{
    "GetAuthorizationState": {
        "comment": "Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state. Can be called before initialization",
        "parameters": {},
        "is-function": true,
        "return": "AuthorizationState"
    },
    "SetTdlibParameters": {
        "comment": "Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters",
        "parameters": {
            "use_test_dc": {
                "description": "Pass true to use Telegram test environment instead of the production environment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "database_directory": {
                "description": "The path to the directory for the persistent database; if empty, the current working directory will be used",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "files_directory": {
                "description": "The path to the directory for storing files; if empty, database_directory will be used",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "database_encryption_key": {
                "description": "Encryption key for the database. If the encryption key is invalid, then an error with code 401 will be returned",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "use_file_database": {
                "description": "Pass true to keep information about downloaded and uploaded files between application restarts",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_chat_info_database": {
                "description": "Pass true to keep cache of users, basic groups, supergroups, channels and secret chats between restarts. Implies use_file_database",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_message_database": {
                "description": "Pass true to keep cache of chats and messages between restarts. Implies use_chat_info_database",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_secret_chats": {
                "description": "Pass true to enable support for secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "api_id": {
                "description": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "api_hash": {
                "description": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "system_language_code": {
                "description": "IETF language tag of the user's operating system language; must be non-empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "device_model": {
                "description": "Model of the device the application is being run on; must be non-empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "system_version": {
                "description": "Version of the operating system the application is being run on. If empty, the version is automatically detected by TDLib",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "application_version": {
                "description": "Application version; must be non-empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "enable_storage_optimizer": {
                "description": "Pass true to automatically delete old files in background",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "ignore_file_names": {
                "description": "Pass true to ignore original file names for downloaded files. Otherwise, downloaded files are saved under names as close as possible to the original name",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetAuthenticationPhoneNumber": {
        "comment": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber,",
        "parameters": {
            "phone_number": {
                "description": "The phone number of the user, in international format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "settings": {
                "description": "Settings for the authentication of the user's phone number; pass null to use default settings",
                "nullable": true,
                "type": "PhoneNumberAuthenticationSettings",
                "tl": "PhoneNumberAuthenticationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetAuthenticationEmailAddress": {
        "comment": "Sets the email address of the user and sends an authentication code to the email address. Works only when the current authorization state is authorizationStateWaitEmailAddress",
        "parameters": {
            "email_address": {
                "description": "The email address of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ResendAuthenticationCode": {
        "comment": "Resends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode, the next_code_type of the result is not null and the server-specified timeout has passed,",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "CheckAuthenticationEmailCode": {
        "comment": "Checks the authentication of a email address. Works only when the current authorization state is authorizationStateWaitEmailCode",
        "parameters": {
            "code": {
                "description": "Email address authentication to check",
                "nullable": false,
                "type": "EmailAddressAuthentication",
                "tl": "EmailAddressAuthentication",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CheckAuthenticationCode": {
        "comment": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode",
        "parameters": {
            "code": {
                "description": "Authentication code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RequestQrCodeAuthentication": {
        "comment": "Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber,",
        "parameters": {
            "other_user_ids": {
                "description": "List of user identifiers of other users currently using the application",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RegisterUser": {
        "comment": "Finishes user registration. Works only when the current authorization state is authorizationStateWaitRegistration",
        "parameters": {
            "first_name": {
                "description": "The first name of the user; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "last_name": {
                "description": "The last name of the user; 0-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CheckAuthenticationPassword": {
        "comment": "Checks the 2-step verification password for correctness. Works only when the current authorization state is authorizationStateWaitPassword",
        "parameters": {
            "password": {
                "description": "The 2-step verification password to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RequestAuthenticationPasswordRecovery": {
        "comment": "Requests to send a 2-step verification password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "CheckAuthenticationPasswordRecoveryCode": {
        "comment": "Checks whether a 2-step verification password recovery code sent to an email address is valid. Works only when the current authorization state is authorizationStateWaitPassword",
        "parameters": {
            "recovery_code": {
                "description": "Recovery code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RecoverAuthenticationPassword": {
        "comment": "Recovers the 2-step verification password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
        "parameters": {
            "recovery_code": {
                "description": "Recovery code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_password": {
                "description": "New 2-step verification password of the user; may be empty to remove the password",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_hint": {
                "description": "New password hint; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CheckAuthenticationBotToken": {
        "comment": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in",
        "parameters": {
            "token": {
                "description": "The bot token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "LogOut": {
        "comment": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "Close": {
        "comment": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent. Can be called before initialization",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "Destroy": {
        "comment": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed.",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "ConfirmQrCodeAuthentication": {
        "comment": "Confirms QR code authentication on another device. Returns created session on success",
        "parameters": {
            "link": {
                "description": "A link from a QR code. The link must be scanned by the in-app camera",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Session"
    },
    "GetCurrentState": {
        "comment": "Returns all updates needed to restore current TDLib state, i.e. all actual updateAuthorizationState/updateUser/updateNewChat and others. This is especially useful if TDLib is run in a separate process. Can be called before initialization",
        "parameters": {},
        "is-function": true,
        "return": "Updates"
    },
    "SetDatabaseEncryptionKey": {
        "comment": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain",
        "parameters": {
            "new_encryption_key": {
                "description": "New encryption key",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetPasswordState": {
        "comment": "Returns the current state of 2-step verification",
        "parameters": {},
        "is-function": true,
        "return": "PasswordState"
    },
    "SetPassword": {
        "comment": "Changes the 2-step verification password for the current user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed",
        "parameters": {
            "old_password": {
                "description": "Previous 2-step verification password of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_password": {
                "description": "New 2-step verification password of the user; may be empty to remove the password",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_hint": {
                "description": "New password hint; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "set_recovery_email_address": {
                "description": "Pass true to change also the recovery email address",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "new_recovery_email_address": {
                "description": "New recovery email address; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PasswordState"
    },
    "SetLoginEmailAddress": {
        "comment": "Changes the login email address of the user. The change will not be applied until the new login email address is confirmed with checkLoginEmailAddressCode.",
        "parameters": {
            "new_login_email_address": {
                "description": "New login email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "EmailAddressAuthenticationCodeInfo"
    },
    "ResendLoginEmailAddressCode": {
        "comment": "Resends the login email address verification code",
        "parameters": {},
        "is-function": true,
        "return": "EmailAddressAuthenticationCodeInfo"
    },
    "CheckLoginEmailAddressCode": {
        "comment": "Checks the login email address authentication",
        "parameters": {
            "code": {
                "description": "Email address authentication to check",
                "nullable": false,
                "type": "EmailAddressAuthentication",
                "tl": "EmailAddressAuthentication",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetRecoveryEmailAddress": {
        "comment": "Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user",
        "parameters": {
            "password": {
                "description": "The 2-step verification password for the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "RecoveryEmailAddress"
    },
    "SetRecoveryEmailAddress": {
        "comment": "Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed.",
        "parameters": {
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_recovery_email_address": {
                "description": "New recovery email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PasswordState"
    },
    "CheckRecoveryEmailAddressCode": {
        "comment": "Checks the 2-step verification recovery email address verification code",
        "parameters": {
            "code": {
                "description": "Verification code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PasswordState"
    },
    "ResendRecoveryEmailAddressCode": {
        "comment": "Resends the 2-step verification recovery email address verification code",
        "parameters": {},
        "is-function": true,
        "return": "PasswordState"
    },
    "RequestPasswordRecovery": {
        "comment": "Requests to send a 2-step verification password recovery code to an email address that was previously set up",
        "parameters": {},
        "is-function": true,
        "return": "EmailAddressAuthenticationCodeInfo"
    },
    "CheckPasswordRecoveryCode": {
        "comment": "Checks whether a 2-step verification password recovery code sent to an email address is valid",
        "parameters": {
            "recovery_code": {
                "description": "Recovery code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RecoverPassword": {
        "comment": "Recovers the 2-step verification password using a recovery code sent to an email address that was previously set up",
        "parameters": {
            "recovery_code": {
                "description": "Recovery code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_password": {
                "description": "New 2-step verification password of the user; may be empty to remove the password",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_hint": {
                "description": "New password hint; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PasswordState"
    },
    "ResetPassword": {
        "comment": "Removes 2-step verification password without previous password and access to recovery email address. The password can't be reset immediately and the request needs to be repeated after the specified time",
        "parameters": {},
        "is-function": true,
        "return": "ResetPasswordResult"
    },
    "CancelPasswordReset": {
        "comment": "Cancels reset of 2-step verification password. The method can be called if passwordState.pending_reset_date > 0",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "CreateTemporaryPassword": {
        "comment": "Creates a new temporary password for processing payments",
        "parameters": {
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "valid_for": {
                "description": "Time during which the temporary password will be valid, in seconds; must be between 60 and 86400",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TemporaryPasswordState"
    },
    "GetTemporaryPasswordState": {
        "comment": "Returns information about the current temporary password",
        "parameters": {},
        "is-function": true,
        "return": "TemporaryPasswordState"
    },
    "GetMe": {
        "comment": "Returns the current user",
        "parameters": {},
        "is-function": true,
        "return": "User"
    },
    "GetUser": {
        "comment": "Returns information about a user by their identifier. This is an offline request if the current user is not a bot",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "User"
    },
    "GetUserFullInfo": {
        "comment": "Returns full information about a user by their identifier",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "UserFullInfo"
    },
    "GetBasicGroup": {
        "comment": "Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot",
        "parameters": {
            "basic_group_id": {
                "description": "Basic group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "BasicGroup"
    },
    "GetBasicGroupFullInfo": {
        "comment": "Returns full information about a basic group by its identifier",
        "parameters": {
            "basic_group_id": {
                "description": "Basic group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "BasicGroupFullInfo"
    },
    "GetSupergroup": {
        "comment": "Returns information about a supergroup or a channel by its identifier. This is an offline request if the current user is not a bot",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup or channel identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Supergroup"
    },
    "GetSupergroupFullInfo": {
        "comment": "Returns full information about a supergroup or a channel by its identifier, cached for up to 1 minute",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup or channel identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "SupergroupFullInfo"
    },
    "GetSecretChat": {
        "comment": "Returns information about a secret chat by its identifier. This is an offline request",
        "parameters": {
            "secret_chat_id": {
                "description": "Secret chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "SecretChat"
    },
    "GetChat": {
        "comment": "Returns information about a chat by its identifier, this is an offline request if the current user is not a bot",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "GetMessage": {
        "comment": "Returns information about a message",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message to get",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetMessageLocally": {
        "comment": "Returns information about a message, if it is available without sending network request. This is an offline request",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message to get",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetRepliedMessage": {
        "comment": "Returns information about a message that is replied by a given message. Also, returns the pinned message, the game message, the invoice message, and the topic creation message for messages",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the reply message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetChatPinnedMessage": {
        "comment": "Returns information about a newest pinned message in the chat",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetCallbackQueryMessage": {
        "comment": "Returns information about a message with the callback button that originated a callback query; for bots only",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "callback_query_id": {
                "description": "Identifier of the callback query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetMessages": {
        "comment": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat the messages belong to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of the messages to get",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "GetMessageThread": {
        "comment": "Returns information about a message thread. Can be used only if message.can_get_message_thread == true",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageThreadInfo"
    },
    "GetMessageViewers": {
        "comment": "Returns viewers of a recent outgoing message in a basic group or a supergroup chat. For video notes and voice notes only users, opened content of the message, are returned. The method can be called if message.can_get_viewers == true",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Users"
    },
    "GetFile": {
        "comment": "Returns information about a file; this is an offline request",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file to get",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "File"
    },
    "GetRemoteFile": {
        "comment": "Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.",
        "parameters": {
            "remote_file_id": {
                "description": "Remote identifier of the file to get",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "file_type": {
                "description": "File type; pass null if unknown",
                "nullable": true,
                "type": "FileType",
                "tl": "FileType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "File"
    },
    "LoadChats": {
        "comment": "Loads more chats from a chat list. The loaded chats and their positions in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order, chat.id) in descending order. Returns a 404 error if all chats have been loaded",
        "parameters": {
            "chat_list": {
                "description": "The chat list in which to load chats; pass null to load chats from the main chat list",
                "nullable": true,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "limit": {
                "description": "The maximum number of chats to be loaded. For optimal performance, the number of loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChats": {
        "comment": "Returns an ordered list of chats from the beginning of a chat list. For informational purposes only. Use loadChats and updates processing instead to maintain chat lists in a consistent state",
        "parameters": {
            "chat_list": {
                "description": "The chat list in which to return chats; pass null to get chats from the main chat list",
                "nullable": true,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "limit": {
                "description": "The maximum number of chats to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "SearchPublicChat": {
        "comment": "Searches a public chat by its username. Currently, only private chats, supergroups and channels can be public. Returns the chat if found; otherwise, an error is returned",
        "parameters": {
            "username": {
                "description": "Username to be resolved",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "SearchPublicChats": {
        "comment": "Searches public chats by looking for specified query in their username and title. Currently, only private chats, supergroups and channels can be public. Returns a meaningful number of results.",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "SearchChats": {
        "comment": "Searches for the specified query in the title and username of already known chats, this is an offline request. Returns chats in the order seen in the main chat list",
        "parameters": {
            "query": {
                "description": "Query to search for. If the query is empty, returns up to 50 recently found chats",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of chats to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "SearchChatsOnServer": {
        "comment": "Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the main chat list",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of chats to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "SearchChatsNearby": {
        "comment": "Returns a list of users and location-based supergroups nearby. The list of users nearby will be updated for 60 seconds after the request by the updates updateUsersNearby.",
        "parameters": {
            "location": {
                "description": "Current user location",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ChatsNearby"
    },
    "GetTopChats": {
        "comment": "Returns a list of frequently used chats. Supported only if the chat info database is enabled",
        "parameters": {
            "category": {
                "description": "Category of chats to be returned",
                "nullable": false,
                "type": "TopChatCategory",
                "tl": "TopChatCategory",
                "enum": 2
            },
            "limit": {
                "description": "The maximum number of chats to be returned; up to 30",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "RemoveTopChat": {
        "comment": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled",
        "parameters": {
            "category": {
                "description": "Category of frequently used chats",
                "nullable": false,
                "type": "TopChatCategory",
                "tl": "TopChatCategory",
                "enum": 2
            },
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddRecentlyFoundChat": {
        "comment": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to add",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveRecentlyFoundChat": {
        "comment": "Removes a chat from the list of recently found chats",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to be removed",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ClearRecentlyFoundChats": {
        "comment": "Clears the list of recently found chats",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "GetRecentlyOpenedChats": {
        "comment": "Returns recently opened chats, this is an offline request. Returns chats in the order of last opening",
        "parameters": {
            "limit": {
                "description": "The maximum number of chats to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "CheckChatUsername": {
        "comment": "Checks whether a username can be set for a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a private chat with self, or zero if the chat is being created",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "username": {
                "description": "Username to be checked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "CheckChatUsernameResult"
    },
    "GetCreatedPublicChats": {
        "comment": "Returns a list of public chats of the specified type, owned by the user",
        "parameters": {
            "type": {
                "description": "Type of the public chats to return",
                "nullable": false,
                "type": "PublicChatType",
                "tl": "PublicChatType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "CheckCreatedPublicChatsLimit": {
        "comment": "Checks whether the maximum number of owned public chats has been reached. Returns corresponding error if the limit was reached. The limit can be increased with Telegram Premium",
        "parameters": {
            "type": {
                "description": "Type of the public chats, for which to check the limit",
                "nullable": false,
                "type": "PublicChatType",
                "tl": "PublicChatType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetSuitableDiscussionChats": {
        "comment": "Returns a list of basic group and supergroup chats, which can be used as a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups before they can be set as a discussion group.",
        "parameters": {},
        "is-function": true,
        "return": "Chats"
    },
    "GetInactiveSupergroupChats": {
        "comment": "Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be increased with Telegram Premium",
        "parameters": {},
        "is-function": true,
        "return": "Chats"
    },
    "GetGroupsInCommon": {
        "comment": "Returns a list of common group chats with a given user. Chats are sorted by their type and creation date",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset_chat_id": {
                "description": "Chat identifier starting from which to return chats; use 0 for the first request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of chats to be returned; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "GetChatHistory": {
        "comment": "Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "from_message_id": {
                "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset": {
                "description": "Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "only_local": {
                "description": "Pass true to get only messages that are available without sending network requests",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "GetMessageThreadHistory": {
        "comment": "Returns messages in a message thread of a message. Can be used only if message.can_get_message_thread == true. Message thread of a channel message is in the channel's linked supergroup.",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier, which thread history needs to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "from_message_id": {
                "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset": {
                "description": "Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "DeleteChatHistory": {
        "comment": "Deletes all messages in the chat. Use chat.can_be_deleted_only_for_self and chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "remove_from_chat_list": {
                "description": "Pass true to remove the chat from all chat lists",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "revoke": {
                "description": "Pass true to delete chat history for all users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteChat": {
        "comment": "Deletes a chat along with all messages in the corresponding chat for all chat members. For group chats this will release the usernames and remove all members.",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SearchChatMessages": {
        "comment": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to search messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender of messages to search for; pass null to search for messages from any sender. Not supported in secret chats",
                "nullable": true,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "from_message_id": {
                "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset": {
                "description": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset.",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filter": {
                "description": "Additional filter for messages to search; pass null to search for all messages",
                "nullable": true,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "message_thread_id": {
                "description": "If not 0, only messages in the specified thread will be returned; supergroups only",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundChatMessages"
    },
    "SearchMessages": {
        "comment": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)).",
        "parameters": {
            "chat_list": {
                "description": "Chat list in which to search messages; pass null to search in all chats regardless of their chat list. Only Main and Archive chat lists are supported",
                "nullable": true,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filter": {
                "description": "Additional filter for messages to search; pass null to search for all messages. Filters searchMessagesFilterMention, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are unsupported in this function",
                "nullable": true,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "min_date": {
                "description": "If not 0, the minimum date of the messages to return",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "max_date": {
                "description": "If not 0, the maximum date of the messages to return",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundMessages"
    },
    "SearchSecretMessages": {
        "comment": "Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance, the number of returned messages is chosen by TDLib",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to search. Specify 0 to search in all secret chats",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "query": {
                "description": "Query to search for. If empty, searchChatMessages must be used instead",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filter": {
                "description": "Additional filter for messages to search; pass null to search for all messages",
                "nullable": true,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "FoundMessages"
    },
    "SearchCallMessages": {
        "comment": "Searches for call messages. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib",
        "parameters": {
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "only_missed": {
                "description": "Pass true to search only for messages with missed/declined calls",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundMessages"
    },
    "SearchOutgoingDocumentMessages": {
        "comment": "Searches for outgoing messages with content of the type messageDocument in all chats except secret chats. Returns the results in reverse chronological order",
        "parameters": {
            "query": {
                "description": "Query to search for in document file name and message caption",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundMessages"
    },
    "DeleteAllCallMessages": {
        "comment": "Deletes all call messages",
        "parameters": {
            "revoke": {
                "description": "Pass true to delete the messages for all users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SearchChatRecentLocationMessages": {
        "comment": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "GetActiveLiveLocationMessages": {
        "comment": "Returns all active live locations that need to be updated by the application. The list is persistent across application restarts only if the message database is used",
        "parameters": {},
        "is-function": true,
        "return": "Messages"
    },
    "GetChatMessageByDate": {
        "comment": "Returns the last message sent in a chat no later than the specified date",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) relative to which to search for messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "GetChatSparseMessagePositions": {
        "comment": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation. Returns the results in reverse chronological order (i.e., in order of decreasing message_id).",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to return information about message positions",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "filter": {
                "description": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function",
                "nullable": false,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "from_message_id": {
                "description": "The message identifier from which to return information about message positions",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "limit": {
                "description": "The expected number of message positions to be returned; 50-2000. A smaller number of positions can be returned, if there are not enough appropriate messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessagePositions"
    },
    "GetChatMessageCalendar": {
        "comment": "Returns information about the next messages of the specified type in the chat split by days. Returns the results in reverse chronological order. Can return partial result for the last returned day. Behavior of this method depends on the value of the option \"utc_time_offset\"",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to return information about messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "filter": {
                "description": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function",
                "nullable": false,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "from_message_id": {
                "description": "The message identifier from which to return information about messages; use 0 to get results from the last message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageCalendar"
    },
    "GetChatMessageCount": {
        "comment": "Returns approximate number of messages of the specified type in the chat",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to count messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "filter": {
                "description": "Filter for message content; searchMessagesFilterEmpty is unsupported in this function",
                "nullable": false,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "return_local": {
                "description": "Pass true to get the number of messages without sending network requests, or -1 if the number of messages is unknown locally",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Count"
    },
    "GetChatMessagePosition": {
        "comment": "Returns approximate 1-based position of a message among messages, which can be found by the specified filter in the chat. Cannot be used in secret chats",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which to find message position",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "filter": {
                "description": "Filter for message content; searchMessagesFilterEmpty, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and searchMessagesFilterFailedToSend are unsupported in this function",
                "nullable": false,
                "type": "SearchMessagesFilter",
                "tl": "SearchMessagesFilter",
                "enum": 2
            },
            "message_thread_id": {
                "description": "If not 0, only messages in the specified thread will be considered; supergroups only",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Count"
    },
    "GetChatScheduledMessages": {
        "comment": "Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id)",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "GetMessagePublicForwards": {
        "comment": "Returns forwarded copies of a channel message to different public channels. For optimal performance, the number of returned messages is chosen by TDLib",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundMessages"
    },
    "GetChatSponsoredMessages": {
        "comment": "Returns sponsored messages to be shown in a chat; for channel chats only",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "SponsoredMessages"
    },
    "RemoveNotification": {
        "comment": "Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user",
        "parameters": {
            "notification_group_id": {
                "description": "Identifier of notification group to which the notification belongs",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "notification_id": {
                "description": "Identifier of removed notification",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveNotificationGroup": {
        "comment": "Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user",
        "parameters": {
            "notification_group_id": {
                "description": "Notification group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "max_notification_id": {
                "description": "The maximum identifier of removed notifications",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetMessageLink": {
        "comment": "Returns an HTTPS link to a message in a chat. Available only for already sent messages in supergroups and channels, or if message.can_get_media_timestamp_links and a media timestamp link is generated. This is an offline request",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "media_timestamp": {
                "description": "If not 0, timestamp from which the video/audio/video note/voice note playing must start, in seconds. The media can be in the message content or in its web page preview",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "for_album": {
                "description": "Pass true to create a link for the whole media album",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "in_message_thread": {
                "description": "Pass true to create a link to the message as a channel post comment, in a message thread, or a forum topic",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageLink"
    },
    "GetMessageEmbeddingCode": {
        "comment": "Returns an HTML code for embedding the message. Available only for messages in supergroups and channels with a username",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "for_album": {
                "description": "Pass true to return an HTML code for embedding of the whole media album",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "GetMessageLinkInfo": {
        "comment": "Returns information about a public or private message link. Can be called for any internal link of the type internalLinkTypeMessage",
        "parameters": {
            "url": {
                "description": "The message link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageLinkInfo"
    },
    "TranslateText": {
        "comment": "Translates a text to the given language. Returns a 404 error if the translation can't be performed",
        "parameters": {
            "text": {
                "description": "Text to translate",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "from_language_code": {
                "description": "A two-letter ISO 639-1 language code of the language from which the message is translated. If empty, the language will be detected automatically",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "to_language_code": {
                "description": "A two-letter ISO 639-1 language code of the language to which the message is translated",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "RecognizeSpeech": {
        "comment": "Recognizes speech in a video note or a voice note message. The message must be successfully sent and must not be scheduled. May return an error with a message \"MSG_VOICE_TOO_LONG\" if media duration is too big to be recognized",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RateSpeechRecognition": {
        "comment": "Rates recognized speech in a video note or a voice note message",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_good": {
                "description": "Pass true if the speech recognition is good",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatAvailableMessageSenders": {
        "comment": "Returns list of message sender identifiers, which can be used to send messages in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatMessageSenders"
    },
    "SetChatMessageSender": {
        "comment": "Selects a message sender to send messages in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_sender_id": {
                "description": "New message sender for the chat",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendMessage": {
        "comment": "Sends a message. Returns the sent message",
        "parameters": {
            "chat_id": {
                "description": "Target chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the message will be sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_to_message_id": {
                "description": "Identifier of the replied message; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "options": {
                "description": "Options to be used to send the message; pass null to use default options",
                "nullable": true,
                "type": "MessageSendOptions",
                "tl": "MessageSendOptions",
                "enum": 2
            },
            "reply_markup": {
                "description": "Markup for replying to the message; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "SendMessageAlbum": {
        "comment": "Sends 2-10 messages grouped together into an album. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages",
        "parameters": {
            "chat_id": {
                "description": "Target chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the messages will be sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_to_message_id": {
                "description": "Identifier of a replied message; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "options": {
                "description": "Options to be used to send the messages; pass null to use default options",
                "nullable": true,
                "type": "MessageSendOptions",
                "tl": "MessageSendOptions",
                "enum": 2
            },
            "input_message_contents": {
                "description": "Contents of messages to be sent. At most 10 messages can be added to an album",
                "nullable": false,
                "type": "List<InputMessageContent>",
                "tl": "InputMessageContent",
                "enum": 4
            },
            "only_preview": {
                "description": "Pass true to get fake messages instead of actually sending them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "SendBotStartMessage": {
        "comment": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message",
        "parameters": {
            "bot_user_id": {
                "description": "Identifier of the bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "chat_id": {
                "description": "Identifier of the target chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "parameter": {
                "description": "A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "SendInlineQueryResultMessage": {
        "comment": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message",
        "parameters": {
            "chat_id": {
                "description": "Target chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the message will be sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_to_message_id": {
                "description": "Identifier of a replied message; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "options": {
                "description": "Options to be used to send the message; pass null to use default options",
                "nullable": true,
                "type": "MessageSendOptions",
                "tl": "MessageSendOptions",
                "enum": 2
            },
            "query_id": {
                "description": "Identifier of the inline query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "result_id": {
                "description": "Identifier of the inline result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "hide_via_bot": {
                "description": "Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption(\"animation_search_bot_username\"), getOption(\"photo_search_bot_username\"), and getOption(\"venue_search_bot_username\")",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "ForwardMessages": {
        "comment": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which to forward messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the message will be sent; for forum threads only",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "from_chat_id": {
                "description": "Identifier of the chat from which to forward messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of the messages to forward. Message identifiers must be in a strictly increasing order. At most 100 messages can be forwarded simultaneously",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "options": {
                "description": "Options to be used to send the messages; pass null to use default options",
                "nullable": true,
                "type": "MessageSendOptions",
                "tl": "MessageSendOptions",
                "enum": 2
            },
            "send_copy": {
                "description": "Pass true to copy content of the messages without reference to the original sender. Always true if the messages are forwarded to a secret chat or are local",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "remove_caption": {
                "description": "Pass true to remove media captions of message copies. Ignored if send_copy is false",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "only_preview": {
                "description": "Pass true to get fake messages instead of actually forwarding them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "ResendMessages": {
        "comment": "Resends messages which failed to send. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed.",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to send messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Messages"
    },
    "SendChatScreenshotTakenNotification": {
        "comment": "Sends a notification about a screenshot taken in a chat. Supported only in private and secret chats",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddLocalMessage": {
        "comment": "Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message",
        "parameters": {
            "chat_id": {
                "description": "Target chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender of the message",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "reply_to_message_id": {
                "description": "Identifier of the replied message; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "disable_notification": {
                "description": "Pass true to disable notification for the message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "input_message_content": {
                "description": "The content of the message to be added",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "DeleteMessages": {
        "comment": "Deletes messages",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of the messages to be deleted",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "revoke": {
                "description": "Pass true to delete messages for all chat members. Always true for supergroups, channels and secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteChatMessagesBySender": {
        "comment": "Deletes all messages sent by the specified message sender in a chat. Supported only for supergroups; requires can_delete_messages administrator privileges",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender of messages to delete",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteChatMessagesByDate": {
        "comment": "Deletes all messages between the specified dates in a chat. Supported only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "min_date": {
                "description": "The minimum date of the messages to delete",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "max_date": {
                "description": "The maximum date of the messages to delete",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "revoke": {
                "description": "Pass true to delete chat messages for all users; private chats only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditMessageText": {
        "comment": "Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "New text content of the message. Must be of type inputMessageText",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "EditMessageLiveLocation": {
        "comment": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "location": {
                "description": "New location content of the message; pass null to stop sharing the live location",
                "nullable": true,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "heading": {
                "description": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "proximity_alert_radius": {
                "description": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "EditMessageMedia": {
        "comment": "Edits the content of a message with an animation, an audio, a document, a photo or a video, including message caption. If only the caption needs to be edited, use editMessageCaption instead.",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "EditMessageCaption": {
        "comment": "Edits the message content caption. Returns the edited message after the edit is completed on the server side",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "caption": {
                "description": "New message content caption; 0-getOption(\"message_caption_length_max\") characters; pass null to remove caption",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "EditMessageReplyMarkup": {
        "comment": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "EditInlineMessageText": {
        "comment": "Edits the text of an inline text or game message sent via a bot; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "New text content of the message. Must be of type inputMessageText",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditInlineMessageLiveLocation": {
        "comment": "Edits the content of a live location in an inline message sent via a bot; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "location": {
                "description": "New location content of the message; pass null to stop sharing the live location",
                "nullable": true,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "heading": {
                "description": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "proximity_alert_radius": {
                "description": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditInlineMessageMedia": {
        "comment": "Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditInlineMessageCaption": {
        "comment": "Edits the caption of an inline message sent via a bot; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "caption": {
                "description": "New message content caption; pass null to remove caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditInlineMessageReplyMarkup": {
        "comment": "Edits the reply markup of an inline message sent via a bot; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditMessageSchedulingState": {
        "comment": "Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed",
        "parameters": {
            "chat_id": {
                "description": "The chat the message belongs to",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "scheduling_state": {
                "description": "The new message scheduling state; pass null to send the message immediately",
                "nullable": true,
                "type": "MessageSchedulingState",
                "tl": "MessageSchedulingState",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetForumTopicDefaultIcons": {
        "comment": "Returns list of custom emojis, which can be used as forum topic icon by all users",
        "parameters": {},
        "is-function": true,
        "return": "Stickers"
    },
    "CreateForumTopic": {
        "comment": "Creates a topic in a forum supergroup chat; requires can_manage_topics rights in the supergroup",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "Name of the topic; 1-128 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "icon": {
                "description": "Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon, other users can use only a custom emoji returned by getForumTopicDefaultIcons",
                "nullable": false,
                "type": "ForumTopicIcon",
                "tl": "ForumTopicIcon",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ForumTopicInfo"
    },
    "EditForumTopic": {
        "comment": "Edits title and icon of a topic in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup unless the user is creator of the topic",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "New name of the topic; 0-128 characters. If empty, the previous topic name is kept",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "edit_icon_custom_emoji": {
                "description": "Pass true to edit the icon of the topic. Icon of the General topic can't be edited",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "icon_custom_emoji_id": {
                "description": "Identifier of the new custom emoji for topic icon; pass 0 to remove the custom emoji. Ignored if edit_icon_custom_emoji is false. Telegram Premium users can use any custom emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetForumTopic": {
        "comment": "Returns information about a forum topic",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ForumTopic"
    },
    "GetForumTopicLink": {
        "comment": "Returns an HTTPS link to a topic in a forum chat. This is an offline request",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageLink"
    },
    "GetForumTopics": {
        "comment": "Returns found forum topics in a forum chat. This is a temporary method for getting information about topic list from the server",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the forum chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "query": {
                "description": "Query to search for in the forum topic's name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset_date": {
                "description": "The date starting from which the results need to be fetched. Use 0 or any date in the future to get results from the last topic",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset_message_id": {
                "description": "The message identifier of the last message in the last found topic, or 0 for the first request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset_message_thread_id": {
                "description": "The message thread identifier of the last found topic, or 0 for the first request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of forum topics to be returned; up to 100. For optimal performance, the number of returned forum topics is chosen by TDLib and can be smaller than the specified limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ForumTopics"
    },
    "SetForumTopicNotificationSettings": {
        "comment": "Changes the notification settings of a forum topic",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "notification_settings": {
                "description": "New notification settings for the forum topic. If the topic is muted for more than 366 days, it is considered to be muted forever",
                "nullable": false,
                "type": "ChatNotificationSettings",
                "tl": "ChatNotificationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleForumTopicIsClosed": {
        "comment": "Toggles whether a topic is closed in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup unless the user is creator of the topic",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_closed": {
                "description": "Pass true to close the topic; pass false to reopen it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGeneralForumTopicIsHidden": {
        "comment": "Toggles whether a General topic is hidden in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_hidden": {
                "description": "Pass true to hide and close the General topic; pass false to unhide it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleForumTopicIsPinned": {
        "comment": "Changes the pinned state of a forum topic; requires can_manage_topics administrator right in the supergroup. There can be up to getOption(\"pinned_forum_topic_count_max\") pinned forum topics",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_pinned": {
                "description": "Pass true to pin the topic; pass false to unpin it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetPinnedForumTopics": {
        "comment": "Changes the order of pinned forum topics",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_ids": {
                "description": "The new list of pinned forum topics",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteForumTopic": {
        "comment": "Deletes all messages in a forum topic; requires can_delete_messages administrator right in the supergroup unless the user is creator of the topic, the topic has no messages from other users and has at most 11 messages",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier of the forum topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetEmojiReaction": {
        "comment": "Returns information about a emoji reaction. Returns a 404 error if the reaction is not found",
        "parameters": {
            "emoji": {
                "description": "Text representation of the reaction",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "EmojiReaction"
    },
    "GetCustomEmojiReactionAnimations": {
        "comment": "Returns TGS stickers with generic animations for custom emoji reactions",
        "parameters": {},
        "is-function": true,
        "return": "Stickers"
    },
    "GetMessageAvailableReactions": {
        "comment": "Returns reactions, which can be added to a message. The list can change after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or updateMessageInteractionInfo for the message",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "row_size": {
                "description": "Number of reaction per row, 5-25",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "AvailableReactions"
    },
    "ClearRecentReactions": {
        "comment": "Clears the list of recently used reactions",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "AddMessageReaction": {
        "comment": "Adds a reaction to a message. Use getMessageAvailableReactions to receive the list of available reactions for the message",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reaction_type": {
                "description": "Type of the reaction to add",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "is_big": {
                "description": "Pass true if the reaction is added with a big animation",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "update_recent_reactions": {
                "description": "Pass true if the reaction needs to be added to recent reactions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveMessageReaction": {
        "comment": "Removes a reaction from a message. A chosen reaction can always be removed",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reaction_type": {
                "description": "Type of the reaction to remove",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetMessageAddedReactions": {
        "comment": "Returns reactions added for a message, along with their sender",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reaction_type": {
                "description": "Type of the reactions to return; pass null to return all added reactions",
                "nullable": true,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of reactions to be returned; must be positive and can't be greater than 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "AddedReactions"
    },
    "SetDefaultReactionType": {
        "comment": "Changes type of default reaction for the current user",
        "parameters": {
            "reaction_type": {
                "description": "New type of the default reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetTextEntities": {
        "comment": "Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses) found in the text. Can be called synchronously",
        "parameters": {
            "text": {
                "description": "The text in which to look for entites",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TextEntities"
    },
    "ParseTextEntities": {
        "comment": "Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, Code, Pre, PreCode, TextUrl and MentionName entities from a marked-up text. Can be called synchronously",
        "parameters": {
            "text": {
                "description": "The text to parse",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "parse_mode": {
                "description": "Text parse mode",
                "nullable": false,
                "type": "TextParseMode",
                "tl": "TextParseMode",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "FormattedText"
    },
    "ParseMarkdown": {
        "comment": "Parses Markdown entities in a human-friendly format, ignoring markup errors. Can be called synchronously",
        "parameters": {
            "text": {
                "description": "The text to parse. For example, \"__italic__ ~~strikethrough~~ ||spoiler|| **bold** `code` ```pre``` __[italic__ text_url](telegram.org) __italic**bold italic__bold**\"",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "FormattedText"
    },
    "GetMarkdownText": {
        "comment": "Replaces text entities with Markdown formatting in a human-friendly format. Entities that can't be represented in Markdown unambiguously are kept as is. Can be called synchronously",
        "parameters": {
            "text": {
                "description": "The text",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "FormattedText"
    },
    "GetFileMimeType": {
        "comment": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. Can be called synchronously",
        "parameters": {
            "file_name": {
                "description": "The name of the file or path to the file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "GetFileExtension": {
        "comment": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. Can be called synchronously",
        "parameters": {
            "mime_type": {
                "description": "The MIME type of the file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "CleanFileName": {
        "comment": "Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. Can be called synchronously",
        "parameters": {
            "file_name": {
                "description": "File name or path to the file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "GetLanguagePackString": {
        "comment": "Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. Can be called synchronously",
        "parameters": {
            "language_pack_database_path": {
                "description": "Path to the language pack database in which strings are stored",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "localization_target": {
                "description": "Localization target to which the language pack belongs",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "language_pack_id": {
                "description": "Language pack identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "key": {
                "description": "Language pack key of the string to be returned",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LanguagePackStringValue"
    },
    "GetJsonValue": {
        "comment": "Converts a JSON-serialized string to corresponding JsonValue object. Can be called synchronously",
        "parameters": {
            "json": {
                "description": "The JSON-serialized string",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "JsonValue"
    },
    "GetJsonString": {
        "comment": "Converts a JsonValue object to corresponding JSON-serialized string. Can be called synchronously",
        "parameters": {
            "json_value": {
                "description": "The JsonValue object",
                "nullable": false,
                "type": "JsonValue",
                "tl": "JsonValue",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "GetThemeParametersJsonString": {
        "comment": "Converts a themeParameters object to corresponding JSON-serialized string. Can be called synchronously",
        "parameters": {
            "theme": {
                "description": "Theme parameters to convert to JSON",
                "nullable": false,
                "type": "ThemeParameters",
                "tl": "ThemeParameters",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "SetPollAnswer": {
        "comment": "Changes the user answer to a poll. A poll in quiz mode can be answered only once",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the poll belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message containing the poll",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "option_ids": {
                "description": "0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetPollVoters": {
        "comment": "Returns users voted for the specified option in a non-anonymous polls. For optimal performance, the number of returned users is chosen by TDLib",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the poll belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message containing the poll",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "option_id": {
                "description": "0-based identifier of the answer option",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset": {
                "description": "Number of users to skip in the result; must be non-negative",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of users to be returned; must be positive and can't be greater than 50. For optimal performance, the number of returned users is chosen by TDLib and can be smaller than the specified limit, even if the end of the voter list has not been reached",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Users"
    },
    "StopPoll": {
        "comment": "Stops a poll. A poll in a message can be stopped when the message has can_be_edited flag set",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the poll belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message containing the poll",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup": {
                "description": "The new message reply markup; pass null if none; for bots only",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "HideSuggestedAction": {
        "comment": "Hides a suggested action",
        "parameters": {
            "action": {
                "description": "Suggested action to hide",
                "nullable": false,
                "type": "SuggestedAction",
                "tl": "SuggestedAction",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetLoginUrlInfo": {
        "comment": "Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message with the button",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier of the message with the button",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "button_id": {
                "description": "Button identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LoginUrlInfo"
    },
    "GetLoginUrl": {
        "comment": "Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl.",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message with the button",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier of the message with the button",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "button_id": {
                "description": "Button identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "allow_write_access": {
                "description": "Pass true to allow the bot to send messages to the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "GetInlineQueryResults": {
        "comment": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
        "parameters": {
            "bot_user_id": {
                "description": "The identifier of the target bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "chat_id": {
                "description": "Identifier of the chat where the query was sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_location": {
                "description": "Location of the user; pass null if unknown or the bot doesn't need user's location",
                "nullable": true,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "query": {
                "description": "Text of the query",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "InlineQueryResults"
    },
    "AnswerInlineQuery": {
        "comment": "Sets the result of an inline query; for bots only",
        "parameters": {
            "inline_query_id": {
                "description": "Identifier of the inline query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "is_personal": {
                "description": "Pass true if results may be cached and returned only for the user that sent the query. By default, results may be returned to any user who sends the same query",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "results": {
                "description": "The results of the query",
                "nullable": false,
                "type": "List<InputInlineQueryResult>",
                "tl": "InputInlineQueryResult",
                "enum": 4
            },
            "cache_time": {
                "description": "Allowed time to cache the results of the query, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "next_offset": {
                "description": "Offset for the next inline query; pass an empty string if there are no more results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "switch_pm_text": {
                "description": "If non-empty, this text must be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "switch_pm_parameter": {
                "description": "The parameter for the bot start message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetWebAppUrl": {
        "comment": "Returns an HTTPS URL of a Web App to open after keyboardButtonTypeWebApp button is pressed",
        "parameters": {
            "bot_user_id": {
                "description": "Identifier of the target bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "url": {
                "description": "The URL from the keyboardButtonTypeWebApp button",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "theme": {
                "description": "Preferred Web App theme; pass null to use the default theme",
                "nullable": true,
                "type": "ThemeParameters",
                "tl": "ThemeParameters",
                "enum": 2
            },
            "application_name": {
                "description": "Short name of the application; 0-64 English letters, digits, and underscores",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "SendWebAppData": {
        "comment": "Sends data received from a keyboardButtonTypeWebApp Web App to a bot",
        "parameters": {
            "bot_user_id": {
                "description": "Identifier of the target bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "button_text": {
                "description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "data": {
                "description": "Received data",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "OpenWebApp": {
        "comment": "Informs TDLib that a Web App is being opened from attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button.",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat in which the Web App is opened",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "bot_user_id": {
                "description": "Identifier of the bot, providing the Web App",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "url": {
                "description": "The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, or an internalLinkTypeAttachmentMenuBot link, or an empty string otherwise",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "theme": {
                "description": "Preferred Web App theme; pass null to use the default theme",
                "nullable": true,
                "type": "ThemeParameters",
                "tl": "ThemeParameters",
                "enum": 2
            },
            "application_name": {
                "description": "Short name of the application; 0-64 English letters, digits, and underscores",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the message will be sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_to_message_id": {
                "description": "Identifier of the replied message for the message sent by the Web App; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "WebAppInfo"
    },
    "CloseWebApp": {
        "comment": "Informs TDLib that a previously opened Web App was closed",
        "parameters": {
            "web_app_launch_id": {
                "description": "Identifier of Web App launch, received from openWebApp",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AnswerWebAppQuery": {
        "comment": "Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only",
        "parameters": {
            "web_app_query_id": {
                "description": "Identifier of the Web App query",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "result": {
                "description": "The result of the query",
                "nullable": false,
                "type": "InputInlineQueryResult",
                "tl": "InputInlineQueryResult",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "SentWebAppMessage"
    },
    "GetCallbackQueryAnswer": {
        "comment": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat with the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message from which the query originated",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "payload": {
                "description": "Query payload",
                "nullable": false,
                "type": "CallbackQueryPayload",
                "tl": "CallbackQueryPayload",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "CallbackQueryAnswer"
    },
    "AnswerCallbackQuery": {
        "comment": "Sets the result of a callback query; for bots only",
        "parameters": {
            "callback_query_id": {
                "description": "Identifier of the callback query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "text": {
                "description": "Text of the answer",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "show_alert": {
                "description": "Pass true to show an alert to the user instead of a toast notification",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "url": {
                "description": "URL to be opened",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "cache_time": {
                "description": "Time during which the result of the query can be cached, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AnswerShippingQuery": {
        "comment": "Sets the result of a shipping query; for bots only",
        "parameters": {
            "shipping_query_id": {
                "description": "Identifier of the shipping query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "shipping_options": {
                "description": "Available shipping options",
                "nullable": false,
                "type": "List<ShippingOption>",
                "tl": "ShippingOption",
                "enum": 4
            },
            "error_message": {
                "description": "An error message, empty on success",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AnswerPreCheckoutQuery": {
        "comment": "Sets the result of a pre-checkout query; for bots only",
        "parameters": {
            "pre_checkout_query_id": {
                "description": "Identifier of the pre-checkout query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "error_message": {
                "description": "An error message, empty on success",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetGameScore": {
        "comment": "Updates the game score of the specified user in the game; for bots only",
        "parameters": {
            "chat_id": {
                "description": "The chat to which the message with the game belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "edit_message": {
                "description": "Pass true to edit the game message to include the current scoreboard",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "score": {
                "description": "The new score",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "force": {
                "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Message"
    },
    "SetInlineGameScore": {
        "comment": "Updates the game score of the specified user in a game; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "edit_message": {
                "description": "Pass true to edit the game message to include the current scoreboard",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "score": {
                "description": "The new score",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "force": {
                "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetGameHighScores": {
        "comment": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only",
        "parameters": {
            "chat_id": {
                "description": "The chat that contains the message with the game",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "GameHighScores"
    },
    "GetInlineGameHighScores": {
        "comment": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only",
        "parameters": {
            "inline_message_id": {
                "description": "Inline message identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "GameHighScores"
    },
    "DeleteChatReplyMarkup": {
        "comment": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup update will be sent if the reply markup is changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "The message identifier of the used keyboard",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendChatAction": {
        "comment": "Sends a notification about user activity in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the action was performed",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "action": {
                "description": "The action description; pass null to cancel the currently active action",
                "nullable": true,
                "type": "ChatAction",
                "tl": "ChatAction",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "OpenChat": {
        "comment": "Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats)",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CloseChat": {
        "comment": "Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ViewMessages": {
        "comment": "Informs TDLib that messages are being viewed by the user. Sponsored messages must be marked as viewed only when the entire text of the message is shown on the screen (excluding the button).",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the messages are being viewed",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "The identifiers of the messages being viewed",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "force_read": {
                "description": "Pass true to mark as read the specified messages even the chat is closed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "OpenMessageContent": {
        "comment": "Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message).",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message with the opened content",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ClickAnimatedEmojiMessage": {
        "comment": "Informs TDLib that a message with an animated emoji was clicked by the user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be played",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the clicked message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Sticker"
    },
    "GetInternalLinkType": {
        "comment": "Returns information about the type of an internal link. Returns a 404 error if the link is not internal. Can be called before authorization",
        "parameters": {
            "link": {
                "description": "The link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "InternalLinkType"
    },
    "GetExternalLinkInfo": {
        "comment": "Returns information about an action to be done when the current user clicks an external link. Don't use this method for links from secret chats if web page preview is disabled in secret chats",
        "parameters": {
            "link": {
                "description": "The link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LoginUrlInfo"
    },
    "GetExternalLink": {
        "comment": "Returns an HTTP URL which can be used to automatically authorize the current user on a website after clicking an HTTP link. Use the method getExternalLinkInfo to find whether a prior user confirmation is needed",
        "parameters": {
            "link": {
                "description": "The HTTP link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "allow_write_access": {
                "description": "Pass true if the current user allowed the bot, returned in getExternalLinkInfo, to send them messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "ReadAllChatMentions": {
        "comment": "Marks all mentions in a chat as read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReadAllMessageThreadMentions": {
        "comment": "Marks all mentions in a forum topic as read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier in which mentions are marked as read",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReadAllChatReactions": {
        "comment": "Marks all reactions in a chat or a forum topic as read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReadAllMessageThreadReactions": {
        "comment": "Marks all reactions in a forum topic as read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier in which reactions are marked as read",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CreatePrivateChat": {
        "comment": "Returns an existing chat corresponding to a given user",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "force": {
                "description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateBasicGroupChat": {
        "comment": "Returns an existing chat corresponding to a known basic group",
        "parameters": {
            "basic_group_id": {
                "description": "Basic group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "force": {
                "description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateSupergroupChat": {
        "comment": "Returns an existing chat corresponding to a known supergroup or channel",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup or channel identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "force": {
                "description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateSecretChat": {
        "comment": "Returns an existing chat corresponding to a known secret chat",
        "parameters": {
            "secret_chat_id": {
                "description": "Secret chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateNewBasicGroupChat": {
        "comment": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns the newly created chat",
        "parameters": {
            "user_ids": {
                "description": "Identifiers of users to be added to the basic group",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "title": {
                "description": "Title of the new basic group; 1-128 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "message_auto_delete_time": {
                "description": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateNewSupergroupChat": {
        "comment": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat",
        "parameters": {
            "title": {
                "description": "Title of the new chat; 1-128 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_channel": {
                "description": "Pass true to create a channel chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "description": {
                "description": "Chat description; 0-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "location": {
                "description": "Chat location if a location-based supergroup is being created; pass null to create an ordinary supergroup chat",
                "nullable": true,
                "type": "ChatLocation",
                "tl": "ChatLocation",
                "enum": 2
            },
            "message_auto_delete_time": {
                "description": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "for_import": {
                "description": "Pass true to create a supergroup for importing messages using importMessage",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "CreateNewSecretChat": {
        "comment": "Creates a new secret chat. Returns the newly created chat",
        "parameters": {
            "user_id": {
                "description": "Identifier of the target user",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "UpgradeBasicGroupChatToSupergroupChat": {
        "comment": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges. Deactivates the original basic group",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to upgrade",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "GetChatListsToAddChat": {
        "comment": "Returns chat lists to which the chat can be added. This is an offline request",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatLists"
    },
    "AddChatToList": {
        "comment": "Adds a chat to a chat list. A chat can't be simultaneously in Main and Archive chat lists, so it is automatically removed from another one if needed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "chat_list": {
                "description": "The chat list. Use getChatListsToAddChat to get suitable chat lists",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatFilter": {
        "comment": "Returns information about a chat filter by its identifier",
        "parameters": {
            "chat_filter_id": {
                "description": "Chat filter identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatFilter"
    },
    "CreateChatFilter": {
        "comment": "Creates new chat filter. Returns information about the created chat filter. There can be up to getOption(\"chat_filter_count_max\") chat filters, but the limit can be increased with Telegram Premium",
        "parameters": {
            "filter": {
                "description": "Chat filter",
                "nullable": false,
                "type": "ChatFilter",
                "tl": "ChatFilter",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ChatFilterInfo"
    },
    "EditChatFilter": {
        "comment": "Edits existing chat filter. Returns information about the edited chat filter",
        "parameters": {
            "chat_filter_id": {
                "description": "Chat filter identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filter": {
                "description": "The edited chat filter",
                "nullable": false,
                "type": "ChatFilter",
                "tl": "ChatFilter",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ChatFilterInfo"
    },
    "DeleteChatFilter": {
        "comment": "Deletes existing chat filter",
        "parameters": {
            "chat_filter_id": {
                "description": "Chat filter identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReorderChatFilters": {
        "comment": "Changes the order of chat filters",
        "parameters": {
            "chat_filter_ids": {
                "description": "Identifiers of chat filters in the new correct order",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            },
            "main_chat_list_position": {
                "description": "Position of the main chat list among chat filters, 0-based. Can be non-zero only for Premium users",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetRecommendedChatFilters": {
        "comment": "Returns recommended chat filters for the current user",
        "parameters": {},
        "is-function": true,
        "return": "RecommendedChatFilters"
    },
    "GetChatFilterDefaultIconName": {
        "comment": "Returns default icon name for a filter. Can be called synchronously",
        "parameters": {
            "filter": {
                "description": "Chat filter",
                "nullable": false,
                "type": "ChatFilter",
                "tl": "ChatFilter",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "SetChatTitle": {
        "comment": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires can_change_info administrator right",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "title": {
                "description": "New title of the chat; 1-128 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatPhoto": {
        "comment": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires can_change_info administrator right",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "photo": {
                "description": "New chat photo; pass null to delete the chat photo",
                "nullable": true,
                "type": "InputChatPhoto",
                "tl": "InputChatPhoto",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatMessageAutoDeleteTime": {
        "comment": "Changes the message auto-delete or self-destruct (for secret chats) time in a chat. Requires change_info administrator right in basic groups, supergroups and channels",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_auto_delete_time": {
                "description": "New time value, in seconds; unless the chat is secret, it must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatPermissions": {
        "comment": "Changes the chat members permissions. Supported only for basic groups and supergroups. Requires can_restrict_members administrator right",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "permissions": {
                "description": "New non-administrator members permissions in the chat",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatTheme": {
        "comment": "Changes the chat theme. Supported only in private and secret chats",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "theme_name": {
                "description": "Name of the new chat theme; pass an empty string to return the default theme",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatDraftMessage": {
        "comment": "Changes the draft message in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the draft was changed",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "draft_message": {
                "description": "New draft message; pass null to remove the draft",
                "nullable": true,
                "type": "DraftMessage",
                "tl": "DraftMessage",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatNotificationSettings": {
        "comment": "Changes the notification settings of a chat. Notification settings of a chat with the current user (Saved Messages) can't be changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "notification_settings": {
                "description": "New notification settings for the chat. If the chat is muted for more than 366 days, it is considered to be muted forever",
                "nullable": false,
                "type": "ChatNotificationSettings",
                "tl": "ChatNotificationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleChatHasProtectedContent": {
        "comment": "Changes the ability of users to save, forward, or copy chat content. Supported only for basic groups, supergroups and channels. Requires owner privileges",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "has_protected_content": {
                "description": "New value of has_protected_content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleChatIsMarkedAsUnread": {
        "comment": "Changes the marked as unread state of a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_marked_as_unread": {
                "description": "New value of is_marked_as_unread",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleChatDefaultDisableNotification": {
        "comment": "Changes the value of the default disable_notification parameter, used when a message is sent to a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "default_disable_notification": {
                "description": "New value of default_disable_notification",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatAvailableReactions": {
        "comment": "Changes reactions, available in a chat. Available for basic groups, supergroups, and channels. Requires can_change_info administrator right",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "available_reactions": {
                "description": "Reactions available in the chat. All emoji reactions must be active",
                "nullable": false,
                "type": "ChatAvailableReactions",
                "tl": "ChatAvailableReactions",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatClientData": {
        "comment": "Changes application-specific data associated with a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "client_data": {
                "description": "New value of client_data",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatDescription": {
        "comment": "Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info administrator right",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "description": {
                "description": "New chat description; 0-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatDiscussionGroup": {
        "comment": "Changes the discussion group of a channel chat; requires can_change_info administrator right in the channel if it is specified",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed in the second argument to a linked channel chat (requires can_pin_messages rights in the supergroup)",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "discussion_chat_id": {
                "description": "Identifier of a new channel's discussion group. Use 0 to remove the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups.",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatLocation": {
        "comment": "Changes the location of a chat. Available only for some location-based supergroups, use supergroupFullInfo.can_set_location to check whether the method is allowed to use",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "location": {
                "description": "New location for the chat; must be valid and not null",
                "nullable": false,
                "type": "ChatLocation",
                "tl": "ChatLocation",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatSlowModeDelay": {
        "comment": "Changes the slow mode delay of a chat. Available only for supergroups; requires can_restrict_members rights",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "slow_mode_delay": {
                "description": "New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60, 300, 900, 3600",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "PinChatMessage": {
        "comment": "Pins a message in a chat; requires can_pin_messages rights or can_edit_messages rights in the channel",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the new pinned message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "disable_notification": {
                "description": "Pass true to disable notification about the pinned message. Notifications are always disabled in channels and private chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "only_for_self": {
                "description": "Pass true to pin the message only for self; private chats only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "UnpinChatMessage": {
        "comment": "Removes a pinned message from a chat; requires can_pin_messages rights in the group or can_edit_messages rights in the channel",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the removed pinned message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "UnpinAllChatMessages": {
        "comment": "Removes all pinned messages from a chat; requires can_pin_messages rights in the group or can_edit_messages rights in the channel",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "UnpinAllMessageThreadMessages": {
        "comment": "Removes all pinned messages from a forum topic; requires can_pin_messages rights in the supergroup",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier in which messages will be unpinned",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "JoinChat": {
        "comment": "Adds the current user as a new member to a chat. Private and secret chats can't be joined using this method. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "LeaveChat": {
        "comment": "Removes the current user from chat members. Private and secret chats can't be left using this method",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddChatMember": {
        "comment": "Adds a new member to a chat. Members can't be added to private or secret chats",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_id": {
                "description": "Identifier of the user",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "forward_limit": {
                "description": "The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels, or if the added user is a bot",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddChatMembers": {
        "comment": "Adds multiple new members to a chat. Currently, this method is only available for supergroups and channels. This method can't be used to join a chat. Members can't be added to a channel if it has more than 200 members",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_ids": {
                "description": "Identifiers of the users to be added to the chat. The maximum number of added users is 20 for supergroups and 100 for channels",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetChatMemberStatus": {
        "comment": "Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for transferring chat ownership; use transferChatOwnership instead. Use addChatMember or banChatMember if some additional parameters needs to be passed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "member_id": {
                "description": "Member identifier. Chats can be only banned and unbanned in supergroups and channels",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "status": {
                "description": "The new status of the member in the chat",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "BanChatMember": {
        "comment": "Bans a member in a chat. Members can't be banned in private or secret chats. In supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "member_id": {
                "description": "Member identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "banned_until_date": {
                "description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Ignored in basic groups and if a chat is banned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "revoke_messages": {
                "description": "Pass true to delete all messages in the chat for the user that is being removed. Always true for supergroups and channels",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CanTransferOwnership": {
        "comment": "Checks whether the current session can be used to transfer a chat ownership to another user",
        "parameters": {},
        "is-function": true,
        "return": "CanTransferOwnershipResult"
    },
    "TransferChatOwnership": {
        "comment": "Changes the owner of a chat. The current user must be a current owner of the chat. Use the method canTransferOwnership to check whether the ownership can be transferred from the current session. Available only for supergroups and channel chats",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_id": {
                "description": "Identifier of the user to which transfer the ownership. The ownership can't be transferred to a bot or to a deleted user",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatMember": {
        "comment": "Returns information about a single member of a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "member_id": {
                "description": "Member identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ChatMember"
    },
    "SearchChatMembers": {
        "comment": "Searches for a specified query in the first name, last name and usernames of the members of a specified chat. Requires administrator rights in channels",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of users to be returned; up to 200",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filter": {
                "description": "The type of users to search for; pass null to search among all chat members",
                "nullable": true,
                "type": "ChatMembersFilter",
                "tl": "ChatMembersFilter",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ChatMembers"
    },
    "GetChatAdministrators": {
        "comment": "Returns a list of administrators of the chat with their custom titles",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatAdministrators"
    },
    "ClearAllDraftMessages": {
        "comment": "Clears message drafts in all chats",
        "parameters": {
            "exclude_secret_chats": {
                "description": "Pass true to keep local message drafts in secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetSavedNotificationSound": {
        "comment": "Returns saved notification sound by its identifier. Returns a 404 error if there is no saved notification sound with the specified identifier",
        "parameters": {
            "notification_sound_id": {
                "description": "Identifier of the notification sound",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "NotificationSounds"
    },
    "GetSavedNotificationSounds": {
        "comment": "Returns list of saved notification sounds. If a sound isn't in the list, then default sound needs to be used",
        "parameters": {},
        "is-function": true,
        "return": "NotificationSounds"
    },
    "AddSavedNotificationSound": {
        "comment": "Adds a new notification sound to the list of saved notification sounds. The new notification sound is added to the top of the list. If it is already in the list, its position isn't changed",
        "parameters": {
            "sound": {
                "description": "Notification sound file to add",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "NotificationSound"
    },
    "RemoveSavedNotificationSound": {
        "comment": "Removes a notification sound from the list of saved notification sounds",
        "parameters": {
            "notification_sound_id": {
                "description": "Identifier of the notification sound",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatNotificationSettingsExceptions": {
        "comment": "Returns list of chats with non-default notification settings",
        "parameters": {
            "scope": {
                "description": "If specified, only chats from the scope will be returned; pass null to return chats from all scopes",
                "nullable": true,
                "type": "NotificationSettingsScope",
                "tl": "NotificationSettingsScope",
                "enum": 2
            },
            "compare_sound": {
                "description": "Pass true to include in the response chats with only non-default sound",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chats"
    },
    "GetScopeNotificationSettings": {
        "comment": "Returns the notification settings for chats of a given type",
        "parameters": {
            "scope": {
                "description": "Types of chats for which to return the notification settings information",
                "nullable": false,
                "type": "NotificationSettingsScope",
                "tl": "NotificationSettingsScope",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "ScopeNotificationSettings"
    },
    "SetScopeNotificationSettings": {
        "comment": "Changes notification settings for chats of a given type",
        "parameters": {
            "scope": {
                "description": "Types of chats for which to change the notification settings",
                "nullable": false,
                "type": "NotificationSettingsScope",
                "tl": "NotificationSettingsScope",
                "enum": 2
            },
            "notification_settings": {
                "description": "The new notification settings for the given scope",
                "nullable": false,
                "type": "ScopeNotificationSettings",
                "tl": "ScopeNotificationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ResetAllNotificationSettings": {
        "comment": "Resets all notification settings to their default values. By default, all chats are unmuted and message previews are shown",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "ToggleChatIsPinned": {
        "comment": "Changes the pinned state of a chat. There can be up to getOption(\"pinned_chat_count_max\")/getOption(\"pinned_archived_chat_count_max\") pinned non-secret chats and the same number of secret chats in the main/archive chat list. The limit can be increased with Telegram Premium",
        "parameters": {
            "chat_list": {
                "description": "Chat list in which to change the pinned state of the chat",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_pinned": {
                "description": "Pass true to pin the chat; pass false to unpin it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetPinnedChats": {
        "comment": "Changes the order of pinned chats",
        "parameters": {
            "chat_list": {
                "description": "Chat list in which to change the order of pinned chats",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "chat_ids": {
                "description": "The new list of pinned chats",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetAttachmentMenuBot": {
        "comment": "Returns information about a bot that can be added to attachment menu",
        "parameters": {
            "bot_user_id": {
                "description": "Bot's user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "AttachmentMenuBot"
    },
    "ToggleBotIsAddedToAttachmentMenu": {
        "comment": "Adds or removes a bot to attachment menu. Bot can be added to attachment menu, only if userTypeBot.can_be_added_to_attachment_menu == true",
        "parameters": {
            "bot_user_id": {
                "description": "Bot's user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_added": {
                "description": "Pass true to add the bot to attachment menu; pass false to remove the bot from attachment menu",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_write_access": {
                "description": "Pass true if the current user allowed the bot to send them messages. Ignored if is_added is false",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetThemedEmojiStatuses": {
        "comment": "Returns up to 8 emoji statuses, which must be shown right after the default Premium Badge in the emoji status list",
        "parameters": {},
        "is-function": true,
        "return": "EmojiStatuses"
    },
    "GetRecentEmojiStatuses": {
        "comment": "Returns recent emoji statuses",
        "parameters": {},
        "is-function": true,
        "return": "EmojiStatuses"
    },
    "GetDefaultEmojiStatuses": {
        "comment": "Returns default emoji statuses",
        "parameters": {},
        "is-function": true,
        "return": "EmojiStatuses"
    },
    "ClearRecentEmojiStatuses": {
        "comment": "Clears the list of recently used emoji statuses",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "DownloadFile": {
        "comment": "Downloads a file from the cloud. Download progress and completion of the download will be notified through updateFile updates",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file to download",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "priority": {
                "description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset": {
                "description": "The starting position from which the file needs to be downloaded",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "limit": {
                "description": "Number of bytes which need to be downloaded starting from the \"offset\" position before the download will automatically be canceled; use 0 to download without a limit",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "synchronous": {
                "description": "Pass true to return response only after the file download has succeeded, has failed, has been canceled, or a new downloadFile request with different offset/limit parameters was sent; pass false to return file state immediately, just after the download has been started",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "File"
    },
    "GetFileDownloadedPrefixSize": {
        "comment": "Returns file downloaded prefix size from a given offset, in bytes",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset": {
                "description": "Offset from which downloaded prefix size needs to be calculated",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FileDownloadedPrefixSize"
    },
    "CancelDownloadFile": {
        "comment": "Stops the downloading of a file. If a file has already been downloaded, does nothing",
        "parameters": {
            "file_id": {
                "description": "Identifier of a file to stop downloading",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "only_if_pending": {
                "description": "Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetSuggestedFileName": {
        "comment": "Returns suggested name for saving a file in a given directory",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "directory": {
                "description": "Directory in which the file is supposed to be saved",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "PreliminaryUploadFile": {
        "comment": "Preliminary uploads a file to the cloud before sending it in a message, which can be useful for uploading of being recorded voice and video notes. Updates updateFile will be used",
        "parameters": {
            "file": {
                "description": "File to upload",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "file_type": {
                "description": "File type; pass null if unknown",
                "nullable": true,
                "type": "FileType",
                "tl": "FileType",
                "enum": 2
            },
            "priority": {
                "description": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which preliminaryUploadFile was called will be uploaded first",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "File"
    },
    "CancelPreliminaryUploadFile": {
        "comment": "Stops the preliminary uploading of a file. Supported only for files uploaded by using preliminaryUploadFile. For other files the behavior is undefined",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file to stop uploading",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "WriteGeneratedFilePart": {
        "comment": "Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file",
        "parameters": {
            "generation_id": {
                "description": "The identifier of the generation process",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "offset": {
                "description": "The offset from which to write the data to the file",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "data": {
                "description": "The data to write",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetFileGenerationProgress": {
        "comment": "Informs TDLib on a file generation progress",
        "parameters": {
            "generation_id": {
                "description": "The identifier of the generation process",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "expected_size": {
                "description": "Expected size of the generated file, in bytes; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "local_prefix_size": {
                "description": "The number of bytes already generated",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "FinishFileGeneration": {
        "comment": "Finishes the file generation",
        "parameters": {
            "generation_id": {
                "description": "The identifier of the generation process",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "error": {
                "description": "If passed, the file generation has failed and must be terminated; pass null if the file generation succeeded",
                "nullable": true,
                "type": "Error",
                "tl": "Error",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReadFilePart": {
        "comment": "Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct read from the file",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file. The file must be located in the TDLib file cache",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset": {
                "description": "The offset from which to read the file",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "count": {
                "description": "Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FilePart"
    },
    "DeleteFile": {
        "comment": "Deletes a file from the TDLib file cache",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file to delete",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddFileToDownloads": {
        "comment": "Adds a file from a message to the list of file downloads. Download progress and completion of the download will be notified through updateFile updates.",
        "parameters": {
            "file_id": {
                "description": "Identifier of the file to download",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "chat_id": {
                "description": "Chat identifier of the message with the file",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "priority": {
                "description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "File"
    },
    "ToggleDownloadIsPaused": {
        "comment": "Changes pause state of a file in the file download list",
        "parameters": {
            "file_id": {
                "description": "Identifier of the downloaded file",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_paused": {
                "description": "Pass true if the download is paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleAllDownloadsArePaused": {
        "comment": "Changes pause state of all files in the file download list",
        "parameters": {
            "are_paused": {
                "description": "Pass true to pause all downloads; pass false to unpause them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveFileFromDownloads": {
        "comment": "Removes a file from the file download list",
        "parameters": {
            "file_id": {
                "description": "Identifier of the downloaded file",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "delete_from_cache": {
                "description": "Pass true to delete the file from the TDLib file cache",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveAllFilesFromDownloads": {
        "comment": "Removes all files from the file download list",
        "parameters": {
            "only_active": {
                "description": "Pass true to remove only active downloads, including paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "only_completed": {
                "description": "Pass true to remove only completed downloads",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "delete_from_cache": {
                "description": "Pass true to delete the file from the TDLib file cache",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SearchFileDownloads": {
        "comment": "Searches for files in the file download list or recently downloaded files from the list",
        "parameters": {
            "query": {
                "description": "Query to search for; may be empty to return all downloaded files",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "only_active": {
                "description": "Pass true to search only for active downloads, including paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "only_completed": {
                "description": "Pass true to search only for completed downloads",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of files to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "FoundFileDownloads"
    },
    "GetMessageFileType": {
        "comment": "Returns information about a file with messages exported from another application",
        "parameters": {
            "message_file_head": {
                "description": "Beginning of the message file; up to 100 first lines",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageFileType"
    },
    "GetMessageImportConfirmationText": {
        "comment": "Returns a confirmation text to be shown to the user before starting message import",
        "parameters": {
            "chat_id": {
                "description": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "ImportMessages": {
        "comment": "Imports messages exported from another app",
        "parameters": {
            "chat_id": {
                "description": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_file": {
                "description": "File with messages to import. Only inputFileLocal and inputFileGenerated are supported. The file must not be previously uploaded",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "attached_files": {
                "description": "Files used in the imported messages. Only inputFileLocal and inputFileGenerated are supported. The files must not be previously uploaded",
                "nullable": false,
                "type": "List<InputFile>",
                "tl": "InputFile",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReplacePrimaryChatInviteLink": {
        "comment": "Replaces current primary invite link for a chat with a new primary invite link. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLink"
    },
    "CreateChatInviteLink": {
        "comment": "Creates a new invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "Invite link name; 0-32 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expiration_date": {
                "description": "Point in time (Unix timestamp) when the link will expire; pass 0 if never",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_limit": {
                "description": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "creates_join_request": {
                "description": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLink"
    },
    "EditChatInviteLink": {
        "comment": "Edits a non-primary invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link to be edited",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Invite link name; 0-32 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expiration_date": {
                "description": "Point in time (Unix timestamp) when the link will expire; pass 0 if never",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_limit": {
                "description": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "creates_join_request": {
                "description": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLink"
    },
    "GetChatInviteLink": {
        "comment": "Returns information about an invite link. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link to get",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLink"
    },
    "GetChatInviteLinkCounts": {
        "comment": "Returns list of chat administrators with number of their invite links. Requires owner privileges in the chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLinkCounts"
    },
    "GetChatInviteLinks": {
        "comment": "Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "creator_user_id": {
                "description": "User identifier of a chat administrator. Must be an identifier of the current user for non-owner",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_revoked": {
                "description": "Pass true if revoked links needs to be returned instead of active or expired",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "offset_date": {
                "description": "Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "offset_invite_link": {
                "description": "Invite link starting after which to return invite links; use empty string to get results from the beginning",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of invite links to return; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLinks"
    },
    "GetChatInviteLinkMembers": {
        "comment": "Returns chat members joined a chat via an invite link. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link for which to return chat members",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset_member": {
                "description": "A chat member from which to return next chat members; pass null to get results from the beginning",
                "nullable": true,
                "type": "ChatInviteLinkMember",
                "tl": "ChatInviteLinkMember",
                "enum": 2
            },
            "limit": {
                "description": "The maximum number of chat members to return; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLinkMembers"
    },
    "RevokeChatInviteLink": {
        "comment": "Revokes invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link to be revoked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLinks"
    },
    "DeleteRevokedChatInviteLink": {
        "comment": "Deletes revoked chat invite links. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link to revoke",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteAllRevokedChatInviteLinks": {
        "comment": "Deletes all revoked chat invite links created by a given chat administrator. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "creator_user_id": {
                "description": "User identifier of a chat administrator, which links will be deleted. Must be an identifier of the current user for non-owner",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CheckChatInviteLink": {
        "comment": "Checks the validity of an invite link for a chat and returns information about the corresponding chat",
        "parameters": {
            "invite_link": {
                "description": "Invite link to be checked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatInviteLinkInfo"
    },
    "JoinChatByInviteLink": {
        "comment": "Uses an invite link to add the current user to the chat if possible. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created",
        "parameters": {
            "invite_link": {
                "description": "Invite link to use",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Chat"
    },
    "GetChatJoinRequests": {
        "comment": "Returns pending join requests in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link for which to return join requests. If empty, all join requests will be returned. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "query": {
                "description": "A query to search for in the first names, last names and usernames of the users to return",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset_request": {
                "description": "A chat join request from which to return next requests; pass null to get results from the beginning",
                "nullable": true,
                "type": "ChatJoinRequest",
                "tl": "ChatJoinRequest",
                "enum": 2
            },
            "limit": {
                "description": "The maximum number of requests to join the chat to return",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatJoinRequests"
    },
    "ProcessChatJoinRequest": {
        "comment": "Handles a pending join request in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_id": {
                "description": "Identifier of the user that sent the request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "approve": {
                "description": "Pass true to approve the request; pass false to decline it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ProcessChatJoinRequests": {
        "comment": "Handles all pending join requests for a given link in a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link for which to process join requests. If empty, all join requests will be processed. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "approve": {
                "description": "Pass true to approve all requests; pass false to decline them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CreateCall": {
        "comment": "Creates a new call",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user to be called",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "protocol": {
                "description": "The call protocols supported by the application",
                "nullable": false,
                "type": "CallProtocol",
                "tl": "CallProtocol",
                "enum": 2
            },
            "is_video": {
                "description": "Pass true to create a video call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "CallId"
    },
    "AcceptCall": {
        "comment": "Accepts an incoming call",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "protocol": {
                "description": "The call protocols supported by the application",
                "nullable": false,
                "type": "CallProtocol",
                "tl": "CallProtocol",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendCallSignalingData": {
        "comment": "Sends call signaling data",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "data": {
                "description": "The data",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DiscardCall": {
        "comment": "Discards a call",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_disconnected": {
                "description": "Pass true if the user was disconnected",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "duration": {
                "description": "The call duration, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_video": {
                "description": "Pass true if the call was a video call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "connection_id": {
                "description": "Identifier of the connection used during the call",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendCallRating": {
        "comment": "Sends a call rating",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "rating": {
                "description": "Call rating; 1-5",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "comment": {
                "description": "An optional user comment if the rating is less than 5",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "problems": {
                "description": "List of the exact types of problems with the call, specified by the user",
                "nullable": false,
                "type": "List<CallProblem>",
                "tl": "CallProblem",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendCallDebugInformation": {
        "comment": "Sends debug information for a call to Telegram servers",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "debug_information": {
                "description": "Debug information in application-specific format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendCallLog": {
        "comment": "Sends log file for a call to Telegram servers",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "log_file": {
                "description": "Call log file. Only inputFileLocal and inputFileGenerated are supported",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetVideoChatAvailableParticipants": {
        "comment": "Returns list of participant identifiers, on whose behalf a video chat in the chat can be joined",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageSenders"
    },
    "SetVideoChatDefaultParticipant": {
        "comment": "Changes default participant identifier, on whose behalf a video chat in the chat will be joined",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "default_participant_id": {
                "description": "Default group call participant identifier to join the video chats",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "CreateVideoChat": {
        "comment": "Creates a video chat (a group call bound to a chat). Available only for basic groups, supergroups and channels; requires can_manage_video_chats rights",
        "parameters": {
            "chat_id": {
                "description": "Identifier of a chat in which the video chat will be created",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "title": {
                "description": "Group call title; if empty, chat title will be used",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "start_date": {
                "description": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at most 8 days in the future",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_rtmp_stream": {
                "description": "Pass true to create an RTMP stream instead of an ordinary video chat; requires creator privileges",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "GroupCallId"
    },
    "GetVideoChatRtmpUrl": {
        "comment": "Returns RTMP URL for streaming to the chat; requires creator privileges",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "RtmpUrl"
    },
    "ReplaceVideoChatRtmpUrl": {
        "comment": "Replaces the current RTMP URL for streaming to the chat; requires creator privileges",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "RtmpUrl"
    },
    "GetGroupCall": {
        "comment": "Returns information about a group call",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "GroupCall"
    },
    "StartScheduledGroupCall": {
        "comment": "Starts a scheduled group call",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallEnabledStartNotification": {
        "comment": "Toggles whether the current user will receive a notification when the group call will start; scheduled group calls only",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "enabled_start_notification": {
                "description": "New value of the enabled_start_notification setting",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "JoinGroupCall": {
        "comment": "Joins an active group call. Returns join response payload for tgcalls",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "participant_id": {
                "description": "Identifier of a group call participant, which will be used to join the call; pass null to join as self; video chats only",
                "nullable": true,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "audio_source_id": {
                "description": "Caller audio channel synchronization source identifier; received from tgcalls",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "payload": {
                "description": "Group call join payload; received from tgcalls",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_muted": {
                "description": "Pass true to join the call with muted microphone",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_my_video_enabled": {
                "description": "Pass true if the user's video is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "invite_hash": {
                "description": "If non-empty, invite hash to be used to join the group call without being muted by administrators",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "StartGroupCallScreenSharing": {
        "comment": "Starts screen sharing in a joined group call. Returns join response payload for tgcalls",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "audio_source_id": {
                "description": "Screen sharing audio channel synchronization source identifier; received from tgcalls",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "payload": {
                "description": "Group call join payload; received from tgcalls",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "ToggleGroupCallScreenSharingIsPaused": {
        "comment": "Pauses or unpauses screen sharing in a joined group call",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_paused": {
                "description": "Pass true to pause screen sharing; pass false to unpause it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EndGroupCallScreenSharing": {
        "comment": "Ends screen sharing in a joined group call",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetGroupCallTitle": {
        "comment": "Sets group call title. Requires groupCall.can_be_managed group call flag",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "New group call title; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallMuteNewParticipants": {
        "comment": "Toggles whether new participants of a group call can be unmuted only by administrators of the group call. Requires groupCall.can_toggle_mute_new_participants group call flag",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "mute_new_participants": {
                "description": "New value of the mute_new_participants setting",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "InviteGroupCallParticipants": {
        "comment": "Invites users to an active group call. Sends a service message of type messageInviteToGroupCall for video chats",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_ids": {
                "description": "User identifiers. At most 10 users can be invited simultaneously",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetGroupCallInviteLink": {
        "comment": "Returns invite link to a video chat in a public chat",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "can_self_unmute": {
                "description": "Pass true if the invite link needs to contain an invite hash, passing which to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.can_be_managed group call flag",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "RevokeGroupCallInviteLink": {
        "comment": "Revokes invite link for a group call. Requires groupCall.can_be_managed group call flag",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "StartGroupCallRecording": {
        "comment": "Starts recording of an active group call. Requires groupCall.can_be_managed group call flag",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Group call recording title; 0-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "record_video": {
                "description": "Pass true to record a video file instead of an audio file",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_portrait_orientation": {
                "description": "Pass true to use portrait orientation for video instead of landscape one",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EndGroupCallRecording": {
        "comment": "Ends recording of an active group call. Requires groupCall.can_be_managed group call flag",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallIsMyVideoPaused": {
        "comment": "Toggles whether current user's video is paused",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_my_video_paused": {
                "description": "Pass true if the current user's video is paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallIsMyVideoEnabled": {
        "comment": "Toggles whether current user's video is enabled",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_my_video_enabled": {
                "description": "Pass true if the current user's video is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetGroupCallParticipantIsSpeaking": {
        "comment": "Informs TDLib that speaking state of a participant of an active group has changed",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "audio_source": {
                "description": "Group call participant's synchronization audio source identifier, or 0 for the current user",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_speaking": {
                "description": "Pass true if the user is speaking",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallParticipantIsMuted": {
        "comment": "Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "participant_id": {
                "description": "Participant identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_muted": {
                "description": "Pass true to mute the user; pass false to unmute the them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetGroupCallParticipantVolumeLevel": {
        "comment": "Changes volume level of a participant of an active group call. If the current user can manage the group call, then the participant's volume level will be changed for all users with the default volume level",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "participant_id": {
                "description": "Participant identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "volume_level": {
                "description": "New participant's volume level; 1-20000 in hundreds of percents",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleGroupCallParticipantIsHandRaised": {
        "comment": "Toggles whether a group call participant hand is rased",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "participant_id": {
                "description": "Participant identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_hand_raised": {
                "description": "Pass true if the user's hand needs to be raised. Only self hand can be raised. Requires groupCall.can_be_managed group call flag to lower other's hand",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "LoadGroupCallParticipants": {
        "comment": "Loads more participants of a group call. The loaded participants will be received through updates. Use the field groupCall.loaded_all_participants to check whether all participants have already been loaded",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier. The group call must be previously received through getGroupCall and must be joined or being joined",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of participants to load; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "LeaveGroupCall": {
        "comment": "Leaves a group call",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EndGroupCall": {
        "comment": "Ends a group call. Requires groupCall.can_be_managed",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetGroupCallStreams": {
        "comment": "Returns information about available group call streams",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "GroupCallStreams"
    },
    "GetGroupCallStreamSegment": {
        "comment": "Returns a file with a segment of a group call stream in a modified OGG format for audio or MPEG-4 format for video",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "time_offset": {
                "description": "Point in time when the stream segment begins; Unix timestamp in milliseconds",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "scale": {
                "description": "Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "channel_id": {
                "description": "Identifier of an audio/video channel to get as received from tgcalls",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_quality": {
                "description": "Video quality as received from tgcalls; pass null to get the worst available quality",
                "nullable": true,
                "type": "GroupCallVideoQuality",
                "tl": "GroupCallVideoQuality",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "FilePart"
    },
    "ToggleMessageSenderIsBlocked": {
        "comment": "Changes the block state of a message sender. Currently, only users and supergroup chats can be blocked",
        "parameters": {
            "sender_id": {
                "description": "Identifier of a message sender to block/unblock",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_blocked": {
                "description": "New value of is_blocked",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "BlockMessageSenderFromReplies": {
        "comment": "Blocks an original sender of a message in the Replies chat",
        "parameters": {
            "message_id": {
                "description": "The identifier of an incoming message in the Replies chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "delete_message": {
                "description": "Pass true to delete the message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "delete_all_messages": {
                "description": "Pass true to delete all messages from the same sender",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "report_spam": {
                "description": "Pass true to report the sender to the Telegram moderators",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetBlockedMessageSenders": {
        "comment": "Returns users and chats that were blocked by the current user",
        "parameters": {
            "offset": {
                "description": "Number of users and chats to skip in the result; must be non-negative",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of users and chats to return; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageSenders"
    },
    "AddContact": {
        "comment": "Adds a user to the contact list or edits an existing contact by their user identifier",
        "parameters": {
            "contact": {
                "description": "The contact to add or edit; phone number may be empty and needs to be specified only if known, vCard is ignored",
                "nullable": false,
                "type": "Contact",
                "tl": "Contact",
                "enum": 2
            },
            "share_phone_number": {
                "description": "Pass true to share the current user's phone number with the new contact. A corresponding rule to userPrivacySettingShowPhoneNumber will be added if needed.",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ImportContacts": {
        "comment": "Adds new contacts or edits existing contacts by their phone numbers; contacts' user identifiers are ignored",
        "parameters": {
            "contacts": {
                "description": "The list of contacts to import or edit; contacts' vCard are ignored and are not imported",
                "nullable": false,
                "type": "List<Contact>",
                "tl": "Contact",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "ImportedContacts"
    },
    "GetContacts": {
        "comment": "Returns all user contacts",
        "parameters": {},
        "is-function": true,
        "return": "Users"
    },
    "SearchContacts": {
        "comment": "Searches for the specified query in the first names, last names and usernames of the known user contacts",
        "parameters": {
            "query": {
                "description": "Query to search for; may be empty to return all contacts",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of users to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Users"
    },
    "RemoveContacts": {
        "comment": "Removes users from the contact list",
        "parameters": {
            "user_ids": {
                "description": "Identifiers of users to be deleted",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetImportedContactCount": {
        "comment": "Returns the total number of imported contacts",
        "parameters": {},
        "is-function": true,
        "return": "Count"
    },
    "ChangeImportedContacts": {
        "comment": "Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts.",
        "parameters": {
            "contacts": {
                "description": "The new list of contacts, contact's vCard are ignored and are not imported",
                "nullable": false,
                "type": "List<Contact>",
                "tl": "Contact",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "ImportedContacts"
    },
    "ClearImportedContacts": {
        "comment": "Clears all imported contacts, contact list remains unchanged",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "SetUserPersonalProfilePhoto": {
        "comment": "Changes a personal profile photo of a contact user",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "photo": {
                "description": "Profile photo to set; pass null to delete the photo; inputChatPhotoPrevious isn't supported in this function",
                "nullable": true,
                "type": "InputChatPhoto",
                "tl": "InputChatPhoto",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SuggestUserProfilePhoto": {
        "comment": "Suggests a profile photo to another regular user with common messages",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "photo": {
                "description": "Profile photo to suggest; inputChatPhotoPrevious isn't supported in this function",
                "nullable": false,
                "type": "InputChatPhoto",
                "tl": "InputChatPhoto",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SearchUserByPhoneNumber": {
        "comment": "Searches a user by their phone number. Returns a 404 error if the user can't be found",
        "parameters": {
            "phone_number": {
                "description": "Phone number to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "User"
    },
    "SharePhoneNumber": {
        "comment": "Shares the phone number of the current user with a mutual contact. Supposed to be called when the user clicks on chatActionBarSharePhoneNumber",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user with whom to share the phone number. The user must be a mutual contact",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetUserProfilePhotos": {
        "comment": "Returns the profile photos of a user. Personal and public photo aren't returned",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "offset": {
                "description": "The number of photos to skip; must be non-negative",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of photos to be returned; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatPhotos"
    },
    "GetStickers": {
        "comment": "Returns stickers from the installed sticker sets that correspond to a given emoji or can be found by sticker-specific keywords. If the query is non-empty, then favorite, recently used or trending stickers may also be returned",
        "parameters": {
            "sticker_type": {
                "description": "Type of the stickers to return",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "query": {
                "description": "Search query; an emoji or a keyword prefix. If empty, returns all known installed stickers",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of stickers to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "chat_id": {
                "description": "Chat identifier for which to return stickers. Available custom emoji stickers may be different for different chats",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "SearchStickers": {
        "comment": "Searches for stickers from public sticker sets that correspond to a given emoji",
        "parameters": {
            "emoji": {
                "description": "String representation of emoji; must be non-empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of stickers to be returned; 0-100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "GetPremiumStickers": {
        "comment": "Returns premium stickers from regular sticker sets",
        "parameters": {
            "limit": {
                "description": "The maximum number of stickers to be returned; 0-100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "GetInstalledStickerSets": {
        "comment": "Returns a list of installed sticker sets",
        "parameters": {
            "sticker_type": {
                "description": "Type of the sticker sets to return",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "StickerSets"
    },
    "GetArchivedStickerSets": {
        "comment": "Returns a list of archived sticker sets",
        "parameters": {
            "sticker_type": {
                "description": "Type of the sticker sets to return",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "offset_sticker_set_id": {
                "description": "Identifier of the sticker set from which to return the result",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of sticker sets to return; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSets"
    },
    "GetTrendingStickerSets": {
        "comment": "Returns a list of trending sticker sets. For optimal performance, the number of returned sticker sets is chosen by TDLib",
        "parameters": {
            "sticker_type": {
                "description": "Type of the sticker sets to return",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "offset": {
                "description": "The offset from which to return the sticker sets; must be non-negative",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of sticker sets to be returned; up to 100. For optimal performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the specified limit, even if the end of the list has not been reached",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TrendingStickerSets"
    },
    "GetAttachedStickerSets": {
        "comment": "Returns a list of sticker sets attached to a file, including regular, mask, and emoji sticker sets. Currently, only animations, photos, and videos can have attached sticker sets",
        "parameters": {
            "file_id": {
                "description": "File identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSets"
    },
    "GetStickerSet": {
        "comment": "Returns information about a sticker set by its identifier",
        "parameters": {
            "set_id": {
                "description": "Identifier of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSet"
    },
    "SearchStickerSet": {
        "comment": "Searches for a sticker set by its name",
        "parameters": {
            "name": {
                "description": "Name of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSet"
    },
    "SearchInstalledStickerSets": {
        "comment": "Searches for installed sticker sets by looking for specified query in their title and name",
        "parameters": {
            "sticker_type": {
                "description": "Type of the sticker sets to search for",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of sticker sets to return",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSets"
    },
    "SearchStickerSets": {
        "comment": "Searches for ordinary sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSets"
    },
    "ChangeStickerSet": {
        "comment": "Installs/uninstalls or activates/archives a sticker set",
        "parameters": {
            "set_id": {
                "description": "Identifier of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "is_installed": {
                "description": "The new value of is_installed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_archived": {
                "description": "The new value of is_archived. A sticker set can't be installed and archived simultaneously",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ViewTrendingStickerSets": {
        "comment": "Informs the server that some trending sticker sets have been viewed by the user",
        "parameters": {
            "sticker_set_ids": {
                "description": "Identifiers of viewed trending sticker sets",
                "nullable": false,
                "type": "List<String>",
                "tl": "int64",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReorderInstalledStickerSets": {
        "comment": "Changes the order of installed sticker sets",
        "parameters": {
            "sticker_type": {
                "description": "Type of the sticker sets to reorder",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "sticker_set_ids": {
                "description": "Identifiers of installed sticker sets in the new correct order",
                "nullable": false,
                "type": "List<String>",
                "tl": "int64",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetRecentStickers": {
        "comment": "Returns a list of recently used stickers",
        "parameters": {
            "is_attached": {
                "description": "Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "AddRecentSticker": {
        "comment": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first.",
        "parameters": {
            "is_attached": {
                "description": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker": {
                "description": "Sticker file to add",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "RemoveRecentSticker": {
        "comment": "Removes a sticker from the list of recently used stickers",
        "parameters": {
            "is_attached": {
                "description": "Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker": {
                "description": "Sticker file to delete",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ClearRecentStickers": {
        "comment": "Clears the list of recently used stickers",
        "parameters": {
            "is_attached": {
                "description": "Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetFavoriteStickers": {
        "comment": "Returns favorite stickers",
        "parameters": {},
        "is-function": true,
        "return": "Stickers"
    },
    "AddFavoriteSticker": {
        "comment": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first.",
        "parameters": {
            "sticker": {
                "description": "Sticker file to add",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveFavoriteSticker": {
        "comment": "Removes a sticker from the list of favorite stickers",
        "parameters": {
            "sticker": {
                "description": "Sticker file to delete from the list",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetStickerEmojis": {
        "comment": "Returns emoji corresponding to a sticker. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
        "parameters": {
            "sticker": {
                "description": "Sticker file identifier",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Emojis"
    },
    "SearchEmojis": {
        "comment": "Searches for emojis by keywords. Supported only if the file database is enabled",
        "parameters": {
            "text": {
                "description": "Text to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "exact_match": {
                "description": "Pass true if only emojis, which exactly match the text, needs to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "input_language_codes": {
                "description": "List of possible IETF language tags of the user's input language; may be empty if unknown",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Emojis"
    },
    "GetAnimatedEmoji": {
        "comment": "Returns an animated emoji corresponding to a given emoji. Returns a 404 error if the emoji has no animated emoji",
        "parameters": {
            "emoji": {
                "description": "The emoji",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "AnimatedEmoji"
    },
    "GetEmojiSuggestionsUrl": {
        "comment": "Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
        "parameters": {
            "language_code": {
                "description": "Language code for which the emoji replacements will be suggested",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "GetCustomEmojiStickers": {
        "comment": "Returns list of custom emoji stickers by their identifiers. Stickers are returned in arbitrary order. Only found stickers are returned",
        "parameters": {
            "custom_emoji_ids": {
                "description": "Identifiers of custom emoji stickers. At most 200 custom emoji stickers can be received simultaneously",
                "nullable": false,
                "type": "List<String>",
                "tl": "int64",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Stickers"
    },
    "GetSavedAnimations": {
        "comment": "Returns saved animations",
        "parameters": {},
        "is-function": true,
        "return": "Animations"
    },
    "AddSavedAnimation": {
        "comment": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list",
        "parameters": {
            "animation": {
                "description": "The animation file to be added. Only animations known to the server (i.e., successfully sent via a message) can be added to the list",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveSavedAnimation": {
        "comment": "Removes an animation from the list of saved animations",
        "parameters": {
            "animation": {
                "description": "Animation file to be removed",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetRecentInlineBots": {
        "comment": "Returns up to 20 recently used inline bots in the order of their last usage",
        "parameters": {},
        "is-function": true,
        "return": "Users"
    },
    "SearchHashtags": {
        "comment": "Searches for recently used hashtags by their prefix",
        "parameters": {
            "prefix": {
                "description": "Hashtag prefix to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of hashtags to be returned",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Hashtags"
    },
    "RemoveRecentHashtag": {
        "comment": "Removes a hashtag from the list of recently used hashtags",
        "parameters": {
            "hashtag": {
                "description": "Hashtag to delete",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetWebPagePreview": {
        "comment": "Returns a web page preview by the text of the message. Do not call this function too often. Returns a 404 error if the web page has no preview",
        "parameters": {
            "text": {
                "description": "Message text with formatting",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "WebPage"
    },
    "GetWebPageInstantView": {
        "comment": "Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page",
        "parameters": {
            "url": {
                "description": "The web page URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "force_full": {
                "description": "Pass true to get full instant view for the web page",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "WebPageInstantView"
    },
    "SetProfilePhoto": {
        "comment": "Changes a profile photo for the current user",
        "parameters": {
            "photo": {
                "description": "Profile photo to set",
                "nullable": false,
                "type": "InputChatPhoto",
                "tl": "InputChatPhoto",
                "enum": 2
            },
            "is_public": {
                "description": "Pass true to set a public photo, which will be visible even the main photo is hidden by privacy settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteProfilePhoto": {
        "comment": "Deletes a profile photo",
        "parameters": {
            "profile_photo_id": {
                "description": "Identifier of the profile photo to delete",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetName": {
        "comment": "Changes the first and last name of the current user",
        "parameters": {
            "first_name": {
                "description": "The new value of the first name for the current user; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "last_name": {
                "description": "The new value of the optional last name for the current user; 0-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetBio": {
        "comment": "Changes the bio of the current user",
        "parameters": {
            "bio": {
                "description": "The new value of the user bio; 0-getOption(\"bio_length_max\") characters without line feeds",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetUsername": {
        "comment": "Changes the editable username of the current user",
        "parameters": {
            "username": {
                "description": "The new value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleUsernameIsActive": {
        "comment": "Changes active state for a username of the current user. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached",
        "parameters": {
            "username": {
                "description": "The username to change",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_active": {
                "description": "Pass true to activate the username; pass false to disable it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReorderActiveUsernames": {
        "comment": "Changes order of active usernames of the current user",
        "parameters": {
            "usernames": {
                "description": "The new order of active usernames. All currently active usernames must be specified",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetEmojiStatus": {
        "comment": "Changes the emoji status of the current user; for Telegram Premium users only",
        "parameters": {
            "emoji_status": {
                "description": "New emoji status; pass null to switch to the default badge",
                "nullable": true,
                "type": "EmojiStatus",
                "tl": "EmojiStatus",
                "enum": 2
            },
            "duration": {
                "description": "Duration of the status, in seconds; pass 0 to keep the status active until it will be changed manually",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetLocation": {
        "comment": "Changes the location of the current user. Needs to be called if getOption(\"is_location_visible\") is true and location changes for more than 1 kilometer",
        "parameters": {
            "location": {
                "description": "The new location of the user",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ChangePhoneNumber": {
        "comment": "Changes the phone number of the user and sends an authentication code to the user's new phone number. On success, returns information about the sent code",
        "parameters": {
            "phone_number": {
                "description": "The new phone number of the user in international format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "settings": {
                "description": "Settings for the authentication of the user's phone number; pass null to use default settings",
                "nullable": true,
                "type": "PhoneNumberAuthenticationSettings",
                "tl": "PhoneNumberAuthenticationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "ResendChangePhoneNumberCode": {
        "comment": "Resends the authentication code sent to confirm a new phone number for the current user. Works only if the previously received authenticationCodeInfo next_code_type was not null and the server-specified timeout has passed",
        "parameters": {},
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "CheckChangePhoneNumberCode": {
        "comment": "Checks the authentication code sent to confirm a new phone number of the user",
        "parameters": {
            "code": {
                "description": "Authentication code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetUserLink": {
        "comment": "Returns an HTTPS link, which can be used to get information about the current user",
        "parameters": {},
        "is-function": true,
        "return": "UserLink"
    },
    "SearchUserByToken": {
        "comment": "Searches a user by a token from the user's link",
        "parameters": {
            "token": {
                "description": "Token to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "User"
    },
    "SetCommands": {
        "comment": "Sets the list of commands supported by the bot for the given user scope and language; for bots only",
        "parameters": {
            "scope": {
                "description": "The scope to which the commands are relevant; pass null to change commands in the default bot command scope",
                "nullable": true,
                "type": "BotCommandScope",
                "tl": "BotCommandScope",
                "enum": 2
            },
            "language_code": {
                "description": "A two-letter ISO 639-1 language code. If empty, the commands will be applied to all users from the given scope, for which language there are no dedicated commands",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "commands": {
                "description": "List of the bot's commands",
                "nullable": false,
                "type": "List<BotCommand>",
                "tl": "BotCommand",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteCommands": {
        "comment": "Deletes commands supported by the bot for the given user scope and language; for bots only",
        "parameters": {
            "scope": {
                "description": "The scope to which the commands are relevant; pass null to delete commands in the default bot command scope",
                "nullable": true,
                "type": "BotCommandScope",
                "tl": "BotCommandScope",
                "enum": 2
            },
            "language_code": {
                "description": "A two-letter ISO 639-1 language code or an empty string",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetCommands": {
        "comment": "Returns the list of commands supported by the bot for the given user scope and language; for bots only",
        "parameters": {
            "scope": {
                "description": "The scope to which the commands are relevant; pass null to get commands in the default bot command scope",
                "nullable": true,
                "type": "BotCommandScope",
                "tl": "BotCommandScope",
                "enum": 2
            },
            "language_code": {
                "description": "A two-letter ISO 639-1 language code or an empty string",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "BotCommands"
    },
    "SetMenuButton": {
        "comment": "Sets menu button for the given user or for all users; for bots only",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user or 0 to set menu button for all users",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "menu_button": {
                "description": "New menu button",
                "nullable": false,
                "type": "BotMenuButton",
                "tl": "BotMenuButton",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetMenuButton": {
        "comment": "Returns menu button set by the bot for the given user; for bots only",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user or 0 to get the default menu button",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "BotMenuButton"
    },
    "SetDefaultGroupAdministratorRights": {
        "comment": "Sets default administrator rights for adding the bot to basic group and supergroup chats; for bots only",
        "parameters": {
            "default_group_administrator_rights": {
                "description": "Default administrator rights for adding the bot to basic group and supergroup chats; may be null",
                "nullable": true,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetDefaultChannelAdministratorRights": {
        "comment": "Sets default administrator rights for adding the bot to channel chats; for bots only",
        "parameters": {
            "default_channel_administrator_rights": {
                "description": "Default administrator rights for adding the bot to channels; may be null",
                "nullable": true,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetActiveSessions": {
        "comment": "Returns all active sessions of the current user",
        "parameters": {},
        "is-function": true,
        "return": "Sessions"
    },
    "TerminateSession": {
        "comment": "Terminates a session of the current user",
        "parameters": {
            "session_id": {
                "description": "Session identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "TerminateAllOtherSessions": {
        "comment": "Terminates all other sessions of the current user",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSessionCanAcceptCalls": {
        "comment": "Toggles whether a session can accept incoming calls",
        "parameters": {
            "session_id": {
                "description": "Session identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "can_accept_calls": {
                "description": "Pass true to allow accepting incoming calls by the session; pass false otherwise",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSessionCanAcceptSecretChats": {
        "comment": "Toggles whether a session can accept incoming secret chats",
        "parameters": {
            "session_id": {
                "description": "Session identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "can_accept_secret_chats": {
                "description": "Pass true to allow accepring secret chats by the session; pass false otherwise",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetInactiveSessionTtl": {
        "comment": "Changes the period of inactivity after which sessions will automatically be terminated",
        "parameters": {
            "inactive_session_ttl_days": {
                "description": "New number of days of inactivity before sessions will be automatically terminated; 1-366 days",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetConnectedWebsites": {
        "comment": "Returns all website where the current user used Telegram to log in",
        "parameters": {},
        "is-function": true,
        "return": "ConnectedWebsites"
    },
    "DisconnectWebsite": {
        "comment": "Disconnects website from the current user's Telegram account",
        "parameters": {
            "website_id": {
                "description": "Website identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DisconnectAllWebsites": {
        "comment": "Disconnects all websites from the current user's Telegram account",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "SetSupergroupUsername": {
        "comment": "Changes the editable username of a supergroup or channel, requires owner privileges in the supergroup or channel",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "username": {
                "description": "New value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupUsernameIsActive": {
        "comment": "Changes active state for a username of a supergroup or channel, requires owner privileges in the supergroup or channel. The editable username can't be disabled.",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "username": {
                "description": "The username to change",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_active": {
                "description": "Pass true to activate the username; pass false to disable it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DisableAllSupergroupUsernames": {
        "comment": "Disables all active non-editable usernames of a supergroup or channel, requires owner privileges in the supergroup or channel",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReorderSupergroupActiveUsernames": {
        "comment": "Changes order of active usernames of a supergroup or channel, requires owner privileges in the supergroup or channel",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "usernames": {
                "description": "The new order of active usernames. All currently active usernames must be specified",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetSupergroupStickerSet": {
        "comment": "Changes the sticker set of a supergroup; requires can_change_info administrator right",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sticker_set_id": {
                "description": "New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupSignMessages": {
        "comment": "Toggles whether sender signature is added to sent messages in a channel; requires can_change_info administrator right",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sign_messages": {
                "description": "New value of sign_messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupJoinToSendMessages": {
        "comment": "Toggles whether joining is mandatory to send messages to a discussion supergroup; requires can_restrict_members administrator right",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "join_to_send_messages": {
                "description": "New value of join_to_send_messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupJoinByRequest": {
        "comment": "Toggles whether all users directly joining the supergroup need to be approved by supergroup administrators; requires can_restrict_members administrator right",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "join_by_request": {
                "description": "New value of join_by_request",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupIsAllHistoryAvailable": {
        "comment": "Toggles whether the message history of a supergroup is available to new members; requires can_change_info administrator right",
        "parameters": {
            "supergroup_id": {
                "description": "The identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_all_history_available": {
                "description": "The new value of is_all_history_available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupHasHiddenMembers": {
        "comment": "Toggles whether non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers. Can be called only if supergroupFullInfo.can_hide_members == true",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "has_hidden_members": {
                "description": "New value of has_hidden_members",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupHasAggressiveAntiSpamEnabled": {
        "comment": "Toggles whether aggressive anti-spam checks are enabled in the supergroup. Can be called only if supergroupFullInfo.can_toggle_aggressive_anti_spam == true",
        "parameters": {
            "supergroup_id": {
                "description": "The identifier of the supergroup, which isn't a broadcast group",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "has_aggressive_anti_spam_enabled": {
                "description": "The new value of has_aggressive_anti_spam_enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupIsForum": {
        "comment": "Toggles whether the supergroup is a forum; requires owner privileges in the supergroup. Discussion supergroups can't be converted to forums",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_forum": {
                "description": "New value of is_forum",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ToggleSupergroupIsBroadcastGroup": {
        "comment": "Upgrades supergroup to a broadcast group; requires owner privileges in the supergroup",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReportSupergroupSpam": {
        "comment": "Reports messages in a supergroup as spam; requires administrator rights in the supergroup",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of messages to report",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReportSupergroupAntiSpamFalsePositive": {
        "comment": "Reports a false deletion of a message by aggressive anti-spam checks; requires administrator rights in the supergroup. Can be called only for messages from chatEventMessageDeleted with can_report_anti_spam_false_positive == true",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the erroneously deleted message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetSupergroupMembers": {
        "comment": "Returns information about members or banned users in a supergroup or channel. Can be used only if supergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "filter": {
                "description": "The type of users to return; pass null to use supergroupMembersFilterRecent",
                "nullable": true,
                "type": "SupergroupMembersFilter",
                "tl": "SupergroupMembersFilter",
                "enum": 2
            },
            "offset": {
                "description": "Number of users to skip",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of users be returned; up to 200",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatMembers"
    },
    "CloseSecretChat": {
        "comment": "Closes a secret chat, effectively transferring its state to secretChatStateClosed",
        "parameters": {
            "secret_chat_id": {
                "description": "Secret chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatEventLog": {
        "comment": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only for supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i.e., in order of decreasing event_id)",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "query": {
                "description": "Search query by which to filter events",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "from_event_id": {
                "description": "Identifier of an event from which to return results. Use 0 to get results from the latest events",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "limit": {
                "description": "The maximum number of events to return; up to 100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "filters": {
                "description": "The types of events to return; pass null to get chat events of all types",
                "nullable": true,
                "type": "ChatEventLogFilters",
                "tl": "ChatEventLogFilters",
                "enum": 2
            },
            "user_ids": {
                "description": "User identifiers by which to filter events. By default, events relating to all users will be returned",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "ChatEvents"
    },
    "GetPaymentForm": {
        "comment": "Returns an invoice payment form. This method must be called when the user presses inlineKeyboardButtonBuy",
        "parameters": {
            "input_invoice": {
                "description": "The invoice",
                "nullable": false,
                "type": "InputInvoice",
                "tl": "InputInvoice",
                "enum": 2
            },
            "theme": {
                "description": "Preferred payment form theme; pass null to use the default theme",
                "nullable": true,
                "type": "ThemeParameters",
                "tl": "ThemeParameters",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "PaymentForm"
    },
    "ValidateOrderInfo": {
        "comment": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice",
        "parameters": {
            "input_invoice": {
                "description": "The invoice",
                "nullable": false,
                "type": "InputInvoice",
                "tl": "InputInvoice",
                "enum": 2
            },
            "order_info": {
                "description": "The order information, provided by the user; pass null if empty",
                "nullable": true,
                "type": "OrderInfo",
                "tl": "OrderInfo",
                "enum": 2
            },
            "allow_save": {
                "description": "Pass true to save the order information",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ValidatedOrderInfo"
    },
    "SendPaymentForm": {
        "comment": "Sends a filled-out payment form to the bot for final verification",
        "parameters": {
            "input_invoice": {
                "description": "The invoice",
                "nullable": false,
                "type": "InputInvoice",
                "tl": "InputInvoice",
                "enum": 2
            },
            "payment_form_id": {
                "description": "Payment form identifier returned by getPaymentForm",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "order_info_id": {
                "description": "Identifier returned by validateOrderInfo, or an empty string",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "shipping_option_id": {
                "description": "Identifier of a chosen shipping option, if applicable",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "credentials": {
                "description": "The credentials chosen by user for payment",
                "nullable": false,
                "type": "InputCredentials",
                "tl": "InputCredentials",
                "enum": 2
            },
            "tip_amount": {
                "description": "Chosen by the user amount of tip in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PaymentResult"
    },
    "GetPaymentReceipt": {
        "comment": "Returns information about a successful payment",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the messagePaymentSuccessful message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PaymentReceipt"
    },
    "GetSavedOrderInfo": {
        "comment": "Returns saved order information. Returns a 404 error if there is no saved order information",
        "parameters": {},
        "is-function": true,
        "return": "OrderInfo"
    },
    "DeleteSavedOrderInfo": {
        "comment": "Deletes saved order information",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "DeleteSavedCredentials": {
        "comment": "Deletes saved credentials for all payment provider bots",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "CreateInvoiceLink": {
        "comment": "Creates a link for the given invoice; for bots only",
        "parameters": {
            "invoice": {
                "description": "Information about the invoice of the type inputMessageInvoice",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "GetSupportUser": {
        "comment": "Returns a user that can be contacted to get support",
        "parameters": {},
        "is-function": true,
        "return": "User"
    },
    "GetBackgrounds": {
        "comment": "Returns backgrounds installed by the user",
        "parameters": {
            "for_dark_theme": {
                "description": "Pass true to order returned backgrounds for a dark theme",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Backgrounds"
    },
    "GetBackgroundUrl": {
        "comment": "Constructs a persistent HTTP URL for a background",
        "parameters": {
            "name": {
                "description": "Background name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Background type",
                "nullable": false,
                "type": "BackgroundType",
                "tl": "BackgroundType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "SearchBackground": {
        "comment": "Searches for a background by its name",
        "parameters": {
            "name": {
                "description": "The name of the background",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Background"
    },
    "SetBackground": {
        "comment": "Changes the background selected by the user; adds background to the list of installed backgrounds",
        "parameters": {
            "background": {
                "description": "The input background to use; pass null to create a new filled backgrounds or to remove the current background",
                "nullable": true,
                "type": "InputBackground",
                "tl": "InputBackground",
                "enum": 2
            },
            "type": {
                "description": "Background type; pass null to use the default type of the remote background or to remove the current background",
                "nullable": true,
                "type": "BackgroundType",
                "tl": "BackgroundType",
                "enum": 2
            },
            "for_dark_theme": {
                "description": "Pass true if the background is changed for a dark theme",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Background"
    },
    "RemoveBackground": {
        "comment": "Removes background from the list of installed backgrounds",
        "parameters": {
            "background_id": {
                "description": "The background identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ResetBackgrounds": {
        "comment": "Resets list of installed backgrounds to its default value",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "GetLocalizationTargetInfo": {
        "comment": "Returns information about the current localization target. This is an offline request if only_local is true. Can be called before authorization",
        "parameters": {
            "only_local": {
                "description": "Pass true to get only locally available information without sending network requests",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LocalizationTargetInfo"
    },
    "GetLanguagePackInfo": {
        "comment": "Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization",
        "parameters": {
            "language_pack_id": {
                "description": "Language pack identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LanguagePackInfo"
    },
    "GetLanguagePackStrings": {
        "comment": "Returns strings from a language pack in the current localization target by their keys. Can be called before authorization",
        "parameters": {
            "language_pack_id": {
                "description": "Language pack identifier of the strings to be returned",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "keys": {
                "description": "Language pack keys of the strings to be returned; leave empty to request all available strings",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "LanguagePackStrings"
    },
    "SynchronizeLanguagePack": {
        "comment": "Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization",
        "parameters": {
            "language_pack_id": {
                "description": "Language pack identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddCustomServerLanguagePack": {
        "comment": "Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization",
        "parameters": {
            "language_pack_id": {
                "description": "Identifier of a language pack to be added; may be different from a name that is used in an \"https://t.me/setlanguage/\" link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetCustomLanguagePack": {
        "comment": "Adds or changes a custom local language pack to the current localization target",
        "parameters": {
            "info": {
                "description": "Information about the language pack. Language pack ID must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization",
                "nullable": false,
                "type": "LanguagePackInfo",
                "tl": "LanguagePackInfo",
                "enum": 2
            },
            "strings": {
                "description": "Strings of the new language pack",
                "nullable": false,
                "type": "List<LanguagePackString>",
                "tl": "LanguagePackString",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "EditCustomLanguagePackInfo": {
        "comment": "Edits information about a custom local language pack in the current localization target. Can be called before authorization",
        "parameters": {
            "info": {
                "description": "New information about the custom local language pack",
                "nullable": false,
                "type": "LanguagePackInfo",
                "tl": "LanguagePackInfo",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetCustomLanguagePackString": {
        "comment": "Adds, edits or deletes a string in a custom local language pack. Can be called before authorization",
        "parameters": {
            "language_pack_id": {
                "description": "Identifier of a previously added custom local language pack in the current localization target",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_string": {
                "description": "New language pack string",
                "nullable": false,
                "type": "LanguagePackString",
                "tl": "LanguagePackString",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DeleteLanguagePack": {
        "comment": "Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted.",
        "parameters": {
            "language_pack_id": {
                "description": "Identifier of the language pack to delete",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RegisterDevice": {
        "comment": "Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription",
        "parameters": {
            "device_token": {
                "description": "Device token",
                "nullable": false,
                "type": "DeviceToken",
                "tl": "DeviceToken",
                "enum": 2
            },
            "other_user_ids": {
                "description": "List of user identifiers of other users currently using the application",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "PushReceiverId"
    },
    "ProcessPushNotification": {
        "comment": "Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization",
        "parameters": {
            "payload": {
                "description": "JSON-encoded push notification payload with all fields sent by the server, and \"google.sent_time\" and \"google.notification.sound\" fields added",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetPushReceiverId": {
        "comment": "Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. Can be called synchronously",
        "parameters": {
            "payload": {
                "description": "JSON-encoded push notification payload",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PushReceiverId"
    },
    "GetRecentlyVisitedTMeUrls": {
        "comment": "Returns t.me URLs recently visited by a newly registered user",
        "parameters": {
            "referrer": {
                "description": "Google Play referrer to identify the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TMeUrls"
    },
    "SetUserPrivacySettingRules": {
        "comment": "Changes user privacy settings",
        "parameters": {
            "setting": {
                "description": "The privacy setting",
                "nullable": false,
                "type": "UserPrivacySetting",
                "tl": "UserPrivacySetting",
                "enum": 2
            },
            "rules": {
                "description": "The new privacy rules",
                "nullable": false,
                "type": "UserPrivacySettingRules",
                "tl": "UserPrivacySettingRules",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetUserPrivacySettingRules": {
        "comment": "Returns the current privacy settings",
        "parameters": {
            "setting": {
                "description": "The privacy setting",
                "nullable": false,
                "type": "UserPrivacySetting",
                "tl": "UserPrivacySetting",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "UserPrivacySettingRules"
    },
    "GetOption": {
        "comment": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization. Can be called synchronously for options \"version\" and \"commit_hash\"",
        "parameters": {
            "name": {
                "description": "The name of the option",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "OptionValue"
    },
    "SetOption": {
        "comment": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization",
        "parameters": {
            "name": {
                "description": "The name of the option",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "value": {
                "description": "The new value of the option; pass null to reset option value to a default value",
                "nullable": true,
                "type": "OptionValue",
                "tl": "OptionValue",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetAccountTtl": {
        "comment": "Changes the period of inactivity after which the account of the current user will automatically be deleted",
        "parameters": {
            "ttl": {
                "description": "New account TTL",
                "nullable": false,
                "type": "AccountTtl",
                "tl": "AccountTtl",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetAccountTtl": {
        "comment": "Returns the period of inactivity after which the account of the current user will automatically be deleted",
        "parameters": {},
        "is-function": true,
        "return": "AccountTtl"
    },
    "DeleteAccount": {
        "comment": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account.",
        "parameters": {
            "reason": {
                "description": "The reason why the account was deleted; optional",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "password": {
                "description": "The 2-step verification password of the current user. If not specified, account deletion can be canceled within one week",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetDefaultMessageAutoDeleteTime": {
        "comment": "Changes the default message auto-delete time for new chats",
        "parameters": {
            "message_auto_delete_time": {
                "description": "New default message auto-delete time; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically",
                "nullable": false,
                "type": "MessageAutoDeleteTime",
                "tl": "MessageAutoDeleteTime",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetDefaultMessageAutoDeleteTime": {
        "comment": "Returns default message auto-delete time setting for new chats",
        "parameters": {},
        "is-function": true,
        "return": "MessageAutoDeleteTime"
    },
    "RemoveChatActionBar": {
        "comment": "Removes a chat action bar without any other action",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReportChat": {
        "comment": "Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of reported messages; may be empty to report the whole chat",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "reason": {
                "description": "The reason for reporting the chat",
                "nullable": false,
                "type": "ChatReportReason",
                "tl": "ChatReportReason",
                "enum": 2
            },
            "text": {
                "description": "Additional report details; 0-1024 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReportChatPhoto": {
        "comment": "Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "file_id": {
                "description": "Identifier of the photo to report. Only full photos from chatPhoto can be reported",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reason": {
                "description": "The reason for reporting the chat photo",
                "nullable": false,
                "type": "ChatReportReason",
                "tl": "ChatReportReason",
                "enum": 2
            },
            "text": {
                "description": "Additional report details; 0-1024 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ReportMessageReactions": {
        "comment": "Reports reactions set on a message to the Telegram moderators. Reactions on a message can be reported only if message.can_report_reactions",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender, which added the reaction",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetChatStatistics": {
        "comment": "Returns detailed statistics about a chat. Currently, this method can be used only for supergroups and channels. Can be used only if supergroupFullInfo.can_get_statistics == true",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_dark": {
                "description": "Pass true if a dark theme is used by the application",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "ChatStatistics"
    },
    "GetMessageStatistics": {
        "comment": "Returns detailed statistics about a message. Can be used only if message.can_get_statistics == true",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_dark": {
                "description": "Pass true if a dark theme is used by the application",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "MessageStatistics"
    },
    "GetStatisticalGraph": {
        "comment": "Loads an asynchronous or a zoomed in statistical graph",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "token": {
                "description": "The token for graph loading",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "x": {
                "description": "X-value for zoomed in graph or 0 otherwise",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StatisticalGraph"
    },
    "GetStorageStatistics": {
        "comment": "Returns storage usage statistics. Can be called before authorization",
        "parameters": {
            "chat_limit": {
                "description": "The maximum number of chats with the largest storage usage for which separate statistics need to be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StorageStatistics"
    },
    "GetStorageStatisticsFast": {
        "comment": "Quickly returns approximate storage usage statistics. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "StorageStatisticsFast"
    },
    "GetDatabaseStatistics": {
        "comment": "Returns database statistics",
        "parameters": {},
        "is-function": true,
        "return": "DatabaseStatistics"
    },
    "OptimizeStorage": {
        "comment": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted",
        "parameters": {
            "size": {
                "description": "Limit on the total size of files after deletion, in bytes. Pass -1 to use the default limit",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "ttl": {
                "description": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "count": {
                "description": "Limit on the total number of files after deletion. Pass -1 to use the default limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "immunity_delay": {
                "description": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "file_types": {
                "description": "If non-empty, only files with the given types are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted",
                "nullable": false,
                "type": "List<FileType>",
                "tl": "FileType",
                "enum": 4
            },
            "chat_ids": {
                "description": "If non-empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "exclude_chat_ids": {
                "description": "If non-empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "return_deleted_file_statistics": {
                "description": "Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "chat_limit": {
                "description": "Same as in getStorageStatistics. Affects only returned statistics",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StorageStatistics"
    },
    "SetNetworkType": {
        "comment": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks,",
        "parameters": {
            "type": {
                "description": "The new network type; pass null to set network type to networkTypeOther",
                "nullable": true,
                "type": "NetworkType",
                "tl": "NetworkType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetNetworkStatistics": {
        "comment": "Returns network data usage statistics. Can be called before authorization",
        "parameters": {
            "only_current": {
                "description": "Pass true to get statistics only for the current library launch",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "NetworkStatistics"
    },
    "AddNetworkStatistics": {
        "comment": "Adds the specified data to data usage statistics. Can be called before authorization",
        "parameters": {
            "entry": {
                "description": "The network statistics entry with the data to be added to statistics",
                "nullable": false,
                "type": "NetworkStatisticsEntry",
                "tl": "NetworkStatisticsEntry",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ResetNetworkStatistics": {
        "comment": "Resets all network data usage statistics to zero. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "GetAutoDownloadSettingsPresets": {
        "comment": "Returns auto-download settings presets for the current user",
        "parameters": {},
        "is-function": true,
        "return": "AutoDownloadSettingsPresets"
    },
    "SetAutoDownloadSettings": {
        "comment": "Sets auto-download settings",
        "parameters": {
            "settings": {
                "description": "New user auto-download settings",
                "nullable": false,
                "type": "AutoDownloadSettings",
                "tl": "AutoDownloadSettings",
                "enum": 2
            },
            "type": {
                "description": "Type of the network for which the new settings are relevant",
                "nullable": false,
                "type": "NetworkType",
                "tl": "NetworkType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetBankCardInfo": {
        "comment": "Returns information about a bank card",
        "parameters": {
            "bank_card_number": {
                "description": "The bank card number",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "BankCardInfo"
    },
    "GetPassportElement": {
        "comment": "Returns one of the available Telegram Passport elements",
        "parameters": {
            "type": {
                "description": "Telegram Passport element type",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            },
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PassportElement"
    },
    "GetAllPassportElements": {
        "comment": "Returns all available Telegram Passport elements",
        "parameters": {
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PassportElements"
    },
    "SetPassportElement": {
        "comment": "Adds an element to the user's Telegram Passport. May return an error with a message \"PHONE_VERIFICATION_NEEDED\" or \"EMAIL_VERIFICATION_NEEDED\" if the chosen phone number or the chosen email address must be verified first",
        "parameters": {
            "element": {
                "description": "Input Telegram Passport element",
                "nullable": false,
                "type": "InputPassportElement",
                "tl": "InputPassportElement",
                "enum": 2
            },
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PassportElement"
    },
    "DeletePassportElement": {
        "comment": "Deletes a Telegram Passport element",
        "parameters": {
            "type": {
                "description": "Element type",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetPassportElementErrors": {
        "comment": "Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "errors": {
                "description": "The errors",
                "nullable": false,
                "type": "List<InputPassportElementError>",
                "tl": "InputPassportElementError",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetPreferredCountryLanguage": {
        "comment": "Returns an IETF language tag of the language preferred in the country, which must be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown",
        "parameters": {
            "country_code": {
                "description": "A two-letter ISO 3166-1 alpha-2 country code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "SendPhoneNumberVerificationCode": {
        "comment": "Sends a code to verify a phone number to be added to a user's Telegram Passport",
        "parameters": {
            "phone_number": {
                "description": "The phone number of the user, in international format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "settings": {
                "description": "Settings for the authentication of the user's phone number; pass null to use default settings",
                "nullable": true,
                "type": "PhoneNumberAuthenticationSettings",
                "tl": "PhoneNumberAuthenticationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "ResendPhoneNumberVerificationCode": {
        "comment": "Resends the code to verify a phone number to be added to a user's Telegram Passport",
        "parameters": {},
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "CheckPhoneNumberVerificationCode": {
        "comment": "Checks the phone number verification code for Telegram Passport",
        "parameters": {
            "code": {
                "description": "Verification code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendEmailAddressVerificationCode": {
        "comment": "Sends a code to verify an email address to be added to a user's Telegram Passport",
        "parameters": {
            "email_address": {
                "description": "Email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "EmailAddressAuthenticationCodeInfo"
    },
    "ResendEmailAddressVerificationCode": {
        "comment": "Resends the code to verify an email address to be added to a user's Telegram Passport",
        "parameters": {},
        "is-function": true,
        "return": "EmailAddressAuthenticationCodeInfo"
    },
    "CheckEmailAddressVerificationCode": {
        "comment": "Checks the email address verification code for Telegram Passport",
        "parameters": {
            "code": {
                "description": "Verification code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetPassportAuthorizationForm": {
        "comment": "Returns a Telegram Passport authorization form for sharing data with a service",
        "parameters": {
            "bot_user_id": {
                "description": "User identifier of the service's bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "scope": {
                "description": "Telegram Passport element types requested by the service",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "public_key": {
                "description": "Service's public key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "nonce": {
                "description": "Unique request identifier provided by the service",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PassportAuthorizationForm"
    },
    "GetPassportAuthorizationFormAvailableElements": {
        "comment": "Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form",
        "parameters": {
            "authorization_form_id": {
                "description": "Authorization form identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "password": {
                "description": "The 2-step verification password of the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PassportElementsWithErrors"
    },
    "SendPassportAuthorizationForm": {
        "comment": "Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after getPassportAuthorizationFormAvailableElements if some previously available elements are going to be reused",
        "parameters": {
            "authorization_form_id": {
                "description": "Authorization form identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "types": {
                "description": "Types of Telegram Passport elements chosen by user to complete the authorization form",
                "nullable": false,
                "type": "List<PassportElementType>",
                "tl": "PassportElementType",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendPhoneNumberConfirmationCode": {
        "comment": "Sends phone number confirmation code to handle links of the type internalLinkTypePhoneNumberConfirmation",
        "parameters": {
            "hash": {
                "description": "Hash value from the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "phone_number": {
                "description": "Phone number value from the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "settings": {
                "description": "Settings for the authentication of the user's phone number; pass null to use default settings",
                "nullable": true,
                "type": "PhoneNumberAuthenticationSettings",
                "tl": "PhoneNumberAuthenticationSettings",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "ResendPhoneNumberConfirmationCode": {
        "comment": "Resends phone number confirmation code",
        "parameters": {},
        "is-function": true,
        "return": "AuthenticationCodeInfo"
    },
    "CheckPhoneNumberConfirmationCode": {
        "comment": "Checks phone number confirmation code",
        "parameters": {
            "code": {
                "description": "Confirmation code to check",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetBotUpdatesStatus": {
        "comment": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
        "parameters": {
            "pending_update_count": {
                "description": "The number of pending updates",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "error_message": {
                "description": "The last error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "UploadStickerFile": {
        "comment": "Uploads a file with a sticker; returns the uploaded file",
        "parameters": {
            "user_id": {
                "description": "Sticker file owner; ignored for regular users",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sticker": {
                "description": "Sticker file to upload",
                "nullable": false,
                "type": "InputSticker",
                "tl": "InputSticker",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "File"
    },
    "GetSuggestedStickerSetName": {
        "comment": "Returns a suggested name for a new sticker set with a given title",
        "parameters": {
            "title": {
                "description": "Sticker set title; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Text"
    },
    "CheckStickerSetName": {
        "comment": "Checks whether a name can be used for a new sticker set",
        "parameters": {
            "name": {
                "description": "Name to be checked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "CheckStickerSetNameResult"
    },
    "CreateNewStickerSet": {
        "comment": "Creates a new sticker set. Returns the newly created sticker set",
        "parameters": {
            "user_id": {
                "description": "Sticker set owner; ignored for regular users",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "title": {
                "description": "Sticker set title; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Sticker set name. Can contain only English letters, digits and underscores. Must end with *\"_by_<bot username>\"* (*<bot_username>* is case insensitive) for bots; 1-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sticker_type": {
                "description": "Type of the stickers in the set",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "stickers": {
                "description": "List of stickers to be added to the set; must be non-empty. All stickers must have the same format. For TGS stickers, uploadStickerFile must be used before the sticker is shown",
                "nullable": false,
                "type": "List<InputSticker>",
                "tl": "InputSticker",
                "enum": 4
            },
            "source": {
                "description": "Source of the sticker set; may be empty if unknown",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "StickerSet"
    },
    "AddStickerToSet": {
        "comment": "Adds a new sticker to a set; for bots only. Returns the sticker set",
        "parameters": {
            "user_id": {
                "description": "Sticker set owner",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "Sticker set name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sticker": {
                "description": "Sticker to add to the set",
                "nullable": false,
                "type": "InputSticker",
                "tl": "InputSticker",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "StickerSet"
    },
    "SetStickerSetThumbnail": {
        "comment": "Sets a sticker set thumbnail; for bots only. Returns the sticker set",
        "parameters": {
            "user_id": {
                "description": "Sticker set owner",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "Sticker set name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail": {
                "description": "Thumbnail to set in PNG, TGS, or WEBM format; pass null to remove the sticker set thumbnail. Thumbnail format must match the format of stickers in the set",
                "nullable": true,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "StickerSet"
    },
    "SetStickerPositionInSet": {
        "comment": "Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
        "parameters": {
            "sticker": {
                "description": "Sticker",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "position": {
                "description": "New position of the sticker in the set, 0-based",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "RemoveStickerFromSet": {
        "comment": "Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot",
        "parameters": {
            "sticker": {
                "description": "Sticker",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetMapThumbnailFile": {
        "comment": "Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded",
        "parameters": {
            "location": {
                "description": "Location of the map center",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "zoom": {
                "description": "Map zoom level; 13-20",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Map width in pixels before applying scale; 16-1024",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Map height in pixels before applying scale; 16-1024",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "scale": {
                "description": "Map scale; 1-3",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "chat_id": {
                "description": "Identifier of a chat in which the thumbnail will be shown. Use 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "File"
    },
    "GetPremiumLimit": {
        "comment": "Returns information about a limit, increased for Premium users. Returns a 404 error if the limit is unknown",
        "parameters": {
            "limit_type": {
                "description": "Type of the limit",
                "nullable": false,
                "type": "PremiumLimitType",
                "tl": "PremiumLimitType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "PremiumLimit"
    },
    "GetPremiumFeatures": {
        "comment": "Returns information about features, available to Premium users",
        "parameters": {
            "source": {
                "description": "Source of the request; pass null if the method is called from some non-standard source",
                "nullable": true,
                "type": "PremiumSource",
                "tl": "PremiumSource",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "PremiumFeatures"
    },
    "GetPremiumStickerExamples": {
        "comment": "Returns examples of premium stickers for demonstration purposes",
        "parameters": {},
        "is-function": true,
        "return": "Stickers"
    },
    "ViewPremiumFeature": {
        "comment": "Informs TDLib that the user viewed detailed information about a Premium feature on the Premium features screen",
        "parameters": {
            "feature": {
                "description": "The viewed premium feature",
                "nullable": false,
                "type": "PremiumFeature",
                "tl": "PremiumFeature",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "ClickPremiumSubscriptionButton": {
        "comment": "Informs TDLib that the user clicked Premium subscription button on the Premium features screen",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "GetPremiumState": {
        "comment": "Returns state of Telegram Premium subscription and promotion videos for Premium features",
        "parameters": {},
        "is-function": true,
        "return": "PremiumState"
    },
    "CanPurchasePremium": {
        "comment": "Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase",
        "parameters": {
            "purpose": {
                "description": "Transaction purpose",
                "nullable": false,
                "type": "StorePaymentPurpose",
                "tl": "StorePaymentPurpose",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AssignAppStoreTransaction": {
        "comment": "Informs server about a purchase through App Store. For official applications only",
        "parameters": {
            "receipt": {
                "description": "App Store receipt",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "purpose": {
                "description": "Transaction purpose",
                "nullable": false,
                "type": "StorePaymentPurpose",
                "tl": "StorePaymentPurpose",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AssignGooglePlayTransaction": {
        "comment": "Informs server about a purchase through Google Play. For official applications only",
        "parameters": {
            "package_name": {
                "description": "Application package name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "store_product_id": {
                "description": "Identifier of the purchased store product",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "purchase_token": {
                "description": "Google Play purchase token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "purpose": {
                "description": "Transaction purpose",
                "nullable": false,
                "type": "StorePaymentPurpose",
                "tl": "StorePaymentPurpose",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AcceptTermsOfService": {
        "comment": "Accepts Telegram terms of services",
        "parameters": {
            "terms_of_service_id": {
                "description": "Terms of service identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SendCustomRequest": {
        "comment": "Sends a custom request; for bots only",
        "parameters": {
            "method": {
                "description": "The method name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "parameters": {
                "description": "JSON-serialized method parameters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "CustomRequestResult"
    },
    "AnswerCustomQuery": {
        "comment": "Answers a custom query; for bots only",
        "parameters": {
            "custom_query_id": {
                "description": "Identifier of a custom query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "data": {
                "description": "JSON-serialized answer to the query",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "SetAlarm": {
        "comment": "Succeeds after a specified amount of time has passed. Can be called before initialization",
        "parameters": {
            "seconds": {
                "description": "Number of seconds before the function returns",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetCountries": {
        "comment": "Returns information about existing countries. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Countries"
    },
    "GetCountryCode": {
        "comment": "Uses the current IP address to find the current country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Text"
    },
    "GetPhoneNumberInfo": {
        "comment": "Returns information about a phone number by its prefix. Can be called before authorization",
        "parameters": {
            "phone_number_prefix": {
                "description": "The phone number prefix",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PhoneNumberInfo"
    },
    "GetPhoneNumberInfoSync": {
        "comment": "Returns information about a phone number by its prefix synchronously. getCountries must be called at least once after changing localization to the specified language if properly localized country information is expected. Can be called synchronously",
        "parameters": {
            "language_code": {
                "description": "A two-letter ISO 639-1 language code for country information localization",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "phone_number_prefix": {
                "description": "The phone number prefix",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "PhoneNumberInfo"
    },
    "GetApplicationDownloadLink": {
        "comment": "Returns the link for downloading official Telegram application to be used when the current user invites friends to Telegram",
        "parameters": {},
        "is-function": true,
        "return": "HttpUrl"
    },
    "GetDeepLinkInfo": {
        "comment": "Returns information about a tg:// deep link. Use \"tg://need_update_for_some_feature\" or \"tg:some_unsupported_feature\" for testing. Returns a 404 error for unknown links. Can be called before authorization",
        "parameters": {
            "link": {
                "description": "The link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "DeepLinkInfo"
    },
    "GetApplicationConfig": {
        "comment": "Returns application config, provided by the server. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "JsonValue"
    },
    "SaveApplicationLogEvent": {
        "comment": "Saves application log event on the server. Can be called before authorization",
        "parameters": {
            "type": {
                "description": "Event type",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "chat_id": {
                "description": "Optional chat identifier, associated with the event",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "data": {
                "description": "The log event data",
                "nullable": false,
                "type": "JsonValue",
                "tl": "JsonValue",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "AddProxy": {
        "comment": "Adds a proxy server for network requests. Can be called before authorization",
        "parameters": {
            "server": {
                "description": "Proxy server IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Proxy server port",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "enable": {
                "description": "Pass true to immediately enable the proxy",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Proxy type",
                "nullable": false,
                "type": "ProxyType",
                "tl": "ProxyType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Proxy"
    },
    "EditProxy": {
        "comment": "Edits an existing proxy server for network requests. Can be called before authorization",
        "parameters": {
            "proxy_id": {
                "description": "Proxy identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "server": {
                "description": "Proxy server IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Proxy server port",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "enable": {
                "description": "Pass true to immediately enable the proxy",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Proxy type",
                "nullable": false,
                "type": "ProxyType",
                "tl": "ProxyType",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Proxy"
    },
    "EnableProxy": {
        "comment": "Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization",
        "parameters": {
            "proxy_id": {
                "description": "Proxy identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "DisableProxy": {
        "comment": "Disables the currently enabled proxy. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "RemoveProxy": {
        "comment": "Removes a proxy server. Can be called before authorization",
        "parameters": {
            "proxy_id": {
                "description": "Proxy identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetProxies": {
        "comment": "Returns list of proxies that are currently set up. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Proxies"
    },
    "GetProxyLink": {
        "comment": "Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization",
        "parameters": {
            "proxy_id": {
                "description": "Proxy identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "HttpUrl"
    },
    "PingProxy": {
        "comment": "Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization",
        "parameters": {
            "proxy_id": {
                "description": "Proxy identifier. Use 0 to ping a Telegram server without a proxy",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Seconds"
    },
    "SetLogStream": {
        "comment": "Sets new log stream for internal logging of TDLib. Can be called synchronously",
        "parameters": {
            "log_stream": {
                "description": "New log stream",
                "nullable": false,
                "type": "LogStream",
                "tl": "LogStream",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetLogStream": {
        "comment": "Returns information about currently used log stream for internal logging of TDLib. Can be called synchronously",
        "parameters": {},
        "is-function": true,
        "return": "LogStream"
    },
    "SetLogVerbosityLevel": {
        "comment": "Sets the verbosity level of the internal logging of TDLib. Can be called synchronously",
        "parameters": {
            "new_verbosity_level": {
                "description": "New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings,",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetLogVerbosityLevel": {
        "comment": "Returns current verbosity level of the internal logging of TDLib. Can be called synchronously",
        "parameters": {},
        "is-function": true,
        "return": "LogVerbosityLevel"
    },
    "GetLogTags": {
        "comment": "Returns list of available TDLib internal log tags, for example, [\"actor\", \"binlog\", \"connections\", \"notifications\", \"proxy\"]. Can be called synchronously",
        "parameters": {},
        "is-function": true,
        "return": "LogTags"
    },
    "SetLogTagVerbosityLevel": {
        "comment": "Sets the verbosity level for a specified TDLib internal log tag. Can be called synchronously",
        "parameters": {
            "tag": {
                "description": "Logging tag to change verbosity level",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_verbosity_level": {
                "description": "New verbosity level; 1-1024",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetLogTagVerbosityLevel": {
        "comment": "Returns current verbosity level for a specified TDLib internal log tag. Can be called synchronously",
        "parameters": {
            "tag": {
                "description": "Logging tag to change verbosity level",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "LogVerbosityLevel"
    },
    "AddLogMessage": {
        "comment": "Adds a message to TDLib internal log. Can be called synchronously",
        "parameters": {
            "verbosity_level": {
                "description": "The minimum verbosity level needed for the message to be logged; 0-1023",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "text": {
                "description": "Text of a message to log",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "GetUserSupportInfo": {
        "comment": "Returns support information for the given user; for Telegram support only",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "UserSupportInfo"
    },
    "SetUserSupportInfo": {
        "comment": "Sets support information for the given user; for Telegram support only",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message": {
                "description": "New information message",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "UserSupportInfo"
    },
    "TestCallEmpty": {
        "comment": "Does nothing; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "TestCallString": {
        "comment": "Returns the received string; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "String to return",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TestString"
    },
    "TestCallBytes": {
        "comment": "Returns the received bytes; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Bytes to return",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TestBytes"
    },
    "TestCallVectorInt": {
        "comment": "Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Vector of numbers to return",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "TestVectorInt"
    },
    "TestCallVectorIntObject": {
        "comment": "Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Vector of objects to return",
                "nullable": false,
                "type": "List<TestInt>",
                "tl": "TestInt",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "TestVectorIntObject"
    },
    "TestCallVectorString": {
        "comment": "Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Vector of strings to return",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": true,
        "return": "TestVectorString"
    },
    "TestCallVectorStringObject": {
        "comment": "Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Vector of objects to return",
                "nullable": false,
                "type": "List<TestString>",
                "tl": "TestString",
                "enum": 4
            }
        },
        "is-function": true,
        "return": "TestVectorStringObject"
    },
    "TestSquareInt": {
        "comment": "Returns the squared received number; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {
            "x": {
                "description": "Number to square",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "TestInt"
    },
    "TestNetwork": {
        "comment": "Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "TestProxy": {
        "comment": "Sends a simple network request to the Telegram servers via proxy; for testing only. Can be called before authorization",
        "parameters": {
            "server": {
                "description": "Proxy server IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Proxy server port",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Proxy type",
                "nullable": false,
                "type": "ProxyType",
                "tl": "ProxyType",
                "enum": 2
            },
            "dc_id": {
                "description": "Identifier of a datacenter with which to test connection",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "timeout": {
                "description": "The maximum overall timeout for the request",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": true,
        "return": "Ok"
    },
    "TestGetDifference": {
        "comment": "Forces an updates.getDifference call to the Telegram servers; for testing only",
        "parameters": {},
        "is-function": true,
        "return": "Ok"
    },
    "TestUseUpdate": {
        "comment": "Does nothing and ensures that the Update object is used; for testing only. This is an offline method. Can be called before authorization",
        "parameters": {},
        "is-function": true,
        "return": "Update"
    },
    "TestReturnError": {
        "comment": "Returns the specified error and ensures that the Error object is used; for testing only. Can be called synchronously",
        "parameters": {
            "error": {
                "description": "The error to be returned",
                "nullable": false,
                "type": "Error",
                "tl": "Error",
                "enum": 2
            }
        },
        "is-function": true,
        "return": "Error"
    }
}