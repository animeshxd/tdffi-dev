{
    "Error": {
        "comment": "An object of this type can be returned on every function call, in case of an error",
        "parameters": {
            "code": {
                "description": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "message": {
                "description": "Error message; subject to future changes",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Ok": {
        "comment": "An object of this type is returned on a successful function call for certain functions",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeTelegramMessage": {
        "comment": "An authentication code is delivered via a private Telegram message, which can be viewed from another active session",
        "parameters": {
            "length": {
                "description": "Length of the code",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeSms": {
        "comment": "An authentication code is delivered via an SMS message to the specified phone number",
        "parameters": {
            "length": {
                "description": "Length of the code",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeCall": {
        "comment": "An authentication code is delivered via a phone call to the specified phone number",
        "parameters": {
            "length": {
                "description": "Length of the code",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeFlashCall": {
        "comment": "An authentication code is delivered by an immediately canceled call to the specified phone number. The phone number that calls is the code that must be entered automatically",
        "parameters": {
            "pattern": {
                "description": "Pattern of the phone number from which the call will be made",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeMissedCall": {
        "comment": "An authentication code is delivered by an immediately canceled call to the specified phone number. The last digits of the phone number that calls are the code that must be entered manually by the user",
        "parameters": {
            "phone_number_prefix": {
                "description": "Prefix of the phone number from which the call will be made",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "length": {
                "description": "Number of digits in the code, excluding the prefix",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeTypeFragment": {
        "comment": "An authentication code is delivered to https://fragment.com. The user must be logged in there via a wallet owning the phone number's NFT",
        "parameters": {
            "url": {
                "description": "URL to open to receive the code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "length": {
                "description": "Length of the code",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthenticationCodeInfo": {
        "comment": "Information about the authentication code that was sent",
        "parameters": {
            "phone_number": {
                "description": "A phone number that is being authenticated",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "The way the code was sent to the user",
                "nullable": false,
                "type": "AuthenticationCodeType",
                "tl": "AuthenticationCodeType",
                "enum": 2
            },
            "next_type": {
                "description": "The way the next code will be sent to the user; may be null",
                "nullable": true,
                "type": "AuthenticationCodeType",
                "tl": "AuthenticationCodeType",
                "enum": 2
            },
            "timeout": {
                "description": "Timeout before the code can be re-sent, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmailAddressAuthenticationCodeInfo": {
        "comment": "Information about the email address authentication code that was sent",
        "parameters": {
            "email_address_pattern": {
                "description": "Pattern of the email address to which an authentication code was sent",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "length": {
                "description": "Length of the code; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmailAddressAuthenticationCode": {
        "comment": "An authentication code delivered to a user's email address",
        "parameters": {
            "code": {
                "description": "The code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmailAddressAuthenticationAppleId": {
        "comment": "An authentication token received through Apple ID",
        "parameters": {
            "token": {
                "description": "The token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmailAddressAuthenticationGoogleId": {
        "comment": "An authentication token received through Google ID",
        "parameters": {
            "token": {
                "description": "The token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntity": {
        "comment": "Represents a part of the text that needs to be formatted in some unusual way",
        "parameters": {
            "offset": {
                "description": "Offset of the entity, in UTF-16 code units",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "length": {
                "description": "Length of the entity, in UTF-16 code units",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Type of the entity",
                "nullable": false,
                "type": "TextEntityType",
                "tl": "TextEntityType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntities": {
        "comment": "Contains a list of text entities",
        "parameters": {
            "entities": {
                "description": "List of text entities",
                "nullable": false,
                "type": "List<TextEntity>",
                "tl": "TextEntity",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "FormattedText": {
        "comment": "A text with some entities",
        "parameters": {
            "text": {
                "description": "The text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "entities": {
                "description": "Entities contained in the text. Entities can be nested, but must not mutually intersect with each other.",
                "nullable": false,
                "type": "List<TextEntity>",
                "tl": "TextEntity",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "TermsOfService": {
        "comment": "Contains Telegram terms of service",
        "parameters": {
            "text": {
                "description": "Text of the terms of service",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "min_user_age": {
                "description": "The minimum age of a user to be able to accept the terms; 0 if age isn't restricted",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "show_popup": {
                "description": "True, if a blocking popup with terms of service must be shown to the user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitTdlibParameters": {
        "comment": "Initializetion parameters are needed. Call setTdlibParameters to provide them",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitPhoneNumber": {
        "comment": "TDLib needs the user's phone number to authorize. Call setAuthenticationPhoneNumber to provide the phone number, or use requestQrCodeAuthentication or checkAuthenticationBotToken for other authentication options",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitEmailAddress": {
        "comment": "TDLib needs the user's email address to authorize. Call setAuthenticationEmailAddress to provide the email address, or directly call checkAuthenticationEmailCode with Apple ID/Google ID token if allowed",
        "parameters": {
            "allow_apple_id": {
                "description": "True, if authorization through Apple ID is allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_google_id": {
                "description": "True, if authorization through Google ID is allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitEmailCode": {
        "comment": "TDLib needs the user's authentication code sent to an email address to authorize. Call checkAuthenticationEmailCode to provide the code",
        "parameters": {
            "allow_apple_id": {
                "description": "True, if authorization through Apple ID is allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_google_id": {
                "description": "True, if authorization through Google ID is allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "code_info": {
                "description": "Information about the sent authentication code",
                "nullable": false,
                "type": "EmailAddressAuthenticationCodeInfo",
                "tl": "EmailAddressAuthenticationCodeInfo",
                "enum": 2
            },
            "next_phone_number_authorization_date": {
                "description": "Point in time (Unix timestamp) when the user will be able to authorize with a code sent to the user's phone number; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitCode": {
        "comment": "TDLib needs the user's authentication code to authorize. Call checkAuthenticationCode to check the code",
        "parameters": {
            "code_info": {
                "description": "Information about the authorization code that was sent",
                "nullable": false,
                "type": "AuthenticationCodeInfo",
                "tl": "AuthenticationCodeInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitOtherDeviceConfirmation": {
        "comment": "The user needs to confirm authorization on another logged in device by scanning a QR code with the provided link",
        "parameters": {
            "link": {
                "description": "A tg:// URL for the QR code. The link will be updated frequently",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitRegistration": {
        "comment": "The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration. Call registerUser to accept the terms of service and provide the data",
        "parameters": {
            "terms_of_service": {
                "description": "Telegram terms of service",
                "nullable": false,
                "type": "TermsOfService",
                "tl": "TermsOfService",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateWaitPassword": {
        "comment": "The user has been authorized, but needs to enter a 2-step verification password to start using the application.",
        "parameters": {
            "password_hint": {
                "description": "Hint for the password; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "has_recovery_email_address": {
                "description": "True, if a recovery email address has been set up",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "recovery_email_address_pattern": {
                "description": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateReady": {
        "comment": "The user has been successfully authorized. TDLib is now ready to answer general requests",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateLoggingOut": {
        "comment": "The user is currently logging out",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateClosing": {
        "comment": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AuthorizationStateClosed": {
        "comment": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PasswordState": {
        "comment": "Represents the current state of 2-step verification",
        "parameters": {
            "has_password": {
                "description": "True, if a 2-step verification password is set",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "password_hint": {
                "description": "Hint for the password; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "has_recovery_email_address": {
                "description": "True, if a recovery email is set",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_passport_data": {
                "description": "True, if some Telegram Passport elements were saved",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "recovery_email_address_code_info": {
                "description": "Information about the recovery email address to which the confirmation email was sent; may be null",
                "nullable": true,
                "type": "EmailAddressAuthenticationCodeInfo",
                "tl": "EmailAddressAuthenticationCodeInfo",
                "enum": 2
            },
            "login_email_address_pattern": {
                "description": "Pattern of the email address set up for logging in",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "pending_reset_date": {
                "description": "If not 0, point in time (Unix timestamp) after which the 2-step verification password can be reset immediately using resetPassword",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RecoveryEmailAddress": {
        "comment": "Contains information about the current recovery email address",
        "parameters": {
            "recovery_email_address": {
                "description": "Recovery email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TemporaryPasswordState": {
        "comment": "Returns information about the availability of a temporary password, which can be used for payments",
        "parameters": {
            "has_password": {
                "description": "True, if a temporary password is available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "valid_for": {
                "description": "Time left before the temporary password expires, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LocalFile": {
        "comment": "Represents a local file",
        "parameters": {
            "path": {
                "description": "Local path to the locally available file part; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "can_be_downloaded": {
                "description": "True, if it is possible to download or generate the file",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_deleted": {
                "description": "True, if the file can be deleted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_downloading_active": {
                "description": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_downloading_completed": {
                "description": "True, if the local copy is fully available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "download_offset": {
                "description": "Download will be started from this offset. downloaded_prefix_size is calculated from this offset",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "downloaded_prefix_size": {
                "description": "If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "downloaded_size": {
                "description": "Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RemoteFile": {
        "comment": "Represents a remote file",
        "parameters": {
            "id": {
                "description": "Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers.",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "unique_id": {
                "description": "Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_uploading_active": {
                "description": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_uploading_completed": {
                "description": "True, if a remote copy is fully available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "uploaded_size": {
                "description": "Size of the remote available part of the file, in bytes; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "File": {
        "comment": "Represents a file",
        "parameters": {
            "id": {
                "description": "Unique file identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "size": {
                "description": "File size, in bytes; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "expected_size": {
                "description": "Approximate file size in bytes in case the exact file size is unknown. Can be used to show download/upload progress",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "local": {
                "description": "Information about the local copy of the file",
                "nullable": false,
                "type": "LocalFile",
                "tl": "LocalFile",
                "enum": 2
            },
            "remote": {
                "description": "Information about the remote copy of the file",
                "nullable": false,
                "type": "RemoteFile",
                "tl": "RemoteFile",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputFileId": {
        "comment": "A file defined by its unique ID",
        "parameters": {
            "id": {
                "description": "Unique file identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputFileRemote": {
        "comment": "A file defined by its remote ID. The remote ID is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib.",
        "parameters": {
            "id": {
                "description": "Remote file identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputFileLocal": {
        "comment": "A file defined by a local path",
        "parameters": {
            "path": {
                "description": "Local path to the file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputFileGenerated": {
        "comment": "A file generated by the application",
        "parameters": {
            "original_path": {
                "description": "Local path to a file from which the file is generated; may be empty if there is no such file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "conversion": {
                "description": "String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expected_size": {
                "description": "Expected size of the generated file, in bytes; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PhotoSize": {
        "comment": "Describes an image in JPEG format",
        "parameters": {
            "type": {
                "description": "Image type (see https://core.telegram.org/constructor/photoSize)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Information about the image file",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "width": {
                "description": "Image width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Image height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "progressive_sizes": {
                "description": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image; in bytes",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "Minithumbnail": {
        "comment": "Thumbnail image of a very poor quality and low resolution",
        "parameters": {
            "width": {
                "description": "Thumbnail width, usually doesn't exceed 40",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Thumbnail height, usually doesn't exceed 40",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "data": {
                "description": "The thumbnail in JPEG format",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatJpeg": {
        "comment": "The thumbnail is in JPEG format",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatGif": {
        "comment": "The thumbnail is in static GIF format. It will be used only for some bot inline results",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatMpeg4": {
        "comment": "The thumbnail is in MPEG4 format. It will be used only for some animations and videos",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatPng": {
        "comment": "The thumbnail is in PNG format. It will be used only for background patterns",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatTgs": {
        "comment": "The thumbnail is in TGS format. It will be used only for TGS sticker sets",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatWebm": {
        "comment": "The thumbnail is in WEBM format. It will be used only for WEBM sticker sets",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ThumbnailFormatWebp": {
        "comment": "The thumbnail is in WEBP format. It will be used only for some stickers",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "Thumbnail": {
        "comment": "Represents a thumbnail",
        "parameters": {
            "format": {
                "description": "Thumbnail format",
                "nullable": false,
                "type": "ThumbnailFormat",
                "tl": "ThumbnailFormat",
                "enum": 2
            },
            "width": {
                "description": "Thumbnail width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Thumbnail height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "file": {
                "description": "The thumbnail",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MaskPointForehead": {
        "comment": "The mask is placed relatively to the forehead",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MaskPointEyes": {
        "comment": "The mask is placed relatively to the eyes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MaskPointMouth": {
        "comment": "The mask is placed relatively to the mouth",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MaskPointChin": {
        "comment": "The mask is placed relatively to the chin",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MaskPosition": {
        "comment": "Position on a photo where a mask is placed",
        "parameters": {
            "point": {
                "description": "Part of the face, relative to which the mask is placed",
                "nullable": false,
                "type": "MaskPoint",
                "tl": "MaskPoint",
                "enum": 2
            },
            "x_shift": {
                "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "y_shift": {
                "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "scale": {
                "description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerFormatWebp": {
        "comment": "The sticker is an image in WEBP format",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerFormatTgs": {
        "comment": "The sticker is an animation in TGS format",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerFormatWebm": {
        "comment": "The sticker is a video in WEBM format",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerTypeRegular": {
        "comment": "The sticker is a regular sticker",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerTypeMask": {
        "comment": "The sticker is a mask in WEBP format to be placed on photos or videos",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerTypeCustomEmoji": {
        "comment": "The sticker is a custom emoji to be used inside message text and caption",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StickerFullTypeRegular": {
        "comment": "The sticker is a regular sticker",
        "parameters": {
            "premium_animation": {
                "description": "Premium animation of the sticker; may be null. If present, only Telegram Premium users can use the sticker",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerFullTypeMask": {
        "comment": "The sticker is a mask in WEBP format to be placed on photos or videos",
        "parameters": {
            "mask_position": {
                "description": "Position where the mask is placed; may be null",
                "nullable": true,
                "type": "MaskPosition",
                "tl": "MaskPosition",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerFullTypeCustomEmoji": {
        "comment": "The sticker is a custom emoji to be used inside message text and caption. Currently, only Telegram Premium users can use custom emoji",
        "parameters": {
            "custom_emoji_id": {
                "description": "Identifier of the custom emoji",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "needs_repainting": {
                "description": "True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, or another appropriate color in other places",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ClosedVectorPath": {
        "comment": "Represents a closed vector path. The path begins at the end point of the last command",
        "parameters": {
            "commands": {
                "description": "List of vector path commands",
                "nullable": false,
                "type": "List<VectorPathCommand>",
                "tl": "VectorPathCommand",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PollOption": {
        "comment": "Describes one answer option of a poll",
        "parameters": {
            "text": {
                "description": "Option text; 1-100 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "voter_count": {
                "description": "Number of voters for this option, available only for closed or voted polls",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "vote_percentage": {
                "description": "The percentage of votes for this option; 0-100",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_chosen": {
                "description": "True, if the option was chosen by the user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_being_chosen": {
                "description": "True, if the option is being chosen by a pending setPollAnswer request",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PollTypeRegular": {
        "comment": "A regular poll",
        "parameters": {
            "allow_multiple_answers": {
                "description": "True, if multiple answer options can be chosen simultaneously",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PollTypeQuiz": {
        "comment": "A poll in quiz mode, which has exactly one correct answer option and can be answered only once",
        "parameters": {
            "correct_option_id": {
                "description": "0-based identifier of the correct answer option; -1 for a yet unanswered poll",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "explanation": {
                "description": "Text that is shown when the user chooses an incorrect answer or taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Animation": {
        "comment": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format",
        "parameters": {
            "duration": {
                "description": "Duration of the animation, in seconds; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Width of the animation",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Height of the animation",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "file_name": {
                "description": "Original name of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the file, usually \"image/gif\" or \"video/mp4\"",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "has_stickers": {
                "description": "True, if stickers were added to the animation. The list of corresponding sticker set can be received using getAttachedStickerSets",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Animation minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "thumbnail": {
                "description": "Animation thumbnail in JPEG or MPEG4 format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "animation": {
                "description": "File containing the animation",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Audio": {
        "comment": "Describes an audio file. Audio is usually in MP3 or M4A format",
        "parameters": {
            "duration": {
                "description": "Duration of the audio, in seconds; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Title of the audio; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "performer": {
                "description": "Performer of the audio; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "file_name": {
                "description": "Original name of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "The MIME type of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "album_cover_minithumbnail": {
                "description": "The minithumbnail of the album cover; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "album_cover_thumbnail": {
                "description": "The thumbnail of the album cover in JPEG format; as defined by the sender. The full size thumbnail is supposed to be extracted from the downloaded audio file; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "external_album_covers": {
                "description": "Album cover variants to use if the downloaded audio file contains no album cover. Provided thumbnail dimensions are approximate",
                "nullable": false,
                "type": "List<Thumbnail>",
                "tl": "Thumbnail",
                "enum": 4
            },
            "audio": {
                "description": "File containing the audio",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Document": {
        "comment": "Describes a document of any type",
        "parameters": {
            "file_name": {
                "description": "Original name of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Document minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "thumbnail": {
                "description": "Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "document": {
                "description": "File containing the document",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Photo": {
        "comment": "Describes a photo",
        "parameters": {
            "has_stickers": {
                "description": "True, if stickers were added to the photo. The list of corresponding sticker sets can be received using getAttachedStickerSets",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Photo minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "sizes": {
                "description": "Available variants of the photo, in different sizes",
                "nullable": false,
                "type": "List<PhotoSize>",
                "tl": "PhotoSize",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Sticker": {
        "comment": "Describes a sticker",
        "parameters": {
            "set_id": {
                "description": "The identifier of the sticker set to which the sticker belongs; 0 if none",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "width": {
                "description": "Sticker width; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Sticker height; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "emoji": {
                "description": "Emoji corresponding to the sticker",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "format": {
                "description": "Sticker format",
                "nullable": false,
                "type": "StickerFormat",
                "tl": "StickerFormat",
                "enum": 2
            },
            "full_type": {
                "description": "Sticker's full type",
                "nullable": false,
                "type": "StickerFullType",
                "tl": "StickerFullType",
                "enum": 2
            },
            "outline": {
                "description": "Sticker's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner",
                "nullable": false,
                "type": "List<ClosedVectorPath>",
                "tl": "ClosedVectorPath",
                "enum": 4
            },
            "thumbnail": {
                "description": "Sticker thumbnail in WEBP or JPEG format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "sticker": {
                "description": "File containing the sticker",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Video": {
        "comment": "Describes a video file",
        "parameters": {
            "duration": {
                "description": "Duration of the video, in seconds; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Video width; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Video height; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "file_name": {
                "description": "Original name of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "has_stickers": {
                "description": "True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_streaming": {
                "description": "True, if the video is supposed to be streamed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Video minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "thumbnail": {
                "description": "Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "video": {
                "description": "File containing the video",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "VideoNote": {
        "comment": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format",
        "parameters": {
            "duration": {
                "description": "Duration of the video, in seconds; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "waveform": {
                "description": "A waveform representation of the video note's audio in 5-bit format; may be empty if unknown",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "length": {
                "description": "Video width and height; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Video minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "thumbnail": {
                "description": "Video thumbnail in JPEG format; as defined by the sender; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "speech_recognition_result": {
                "description": "Result of speech recognition in the video note; may be null",
                "nullable": true,
                "type": "SpeechRecognitionResult",
                "tl": "SpeechRecognitionResult",
                "enum": 2
            },
            "video": {
                "description": "File containing the video",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "VoiceNote": {
        "comment": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel",
        "parameters": {
            "duration": {
                "description": "Duration of the voice note, in seconds; as defined by the sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "waveform": {
                "description": "A waveform representation of the voice note in 5-bit format",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the file; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "speech_recognition_result": {
                "description": "Result of speech recognition in the voice note; may be null",
                "nullable": true,
                "type": "SpeechRecognitionResult",
                "tl": "SpeechRecognitionResult",
                "enum": 2
            },
            "voice": {
                "description": "File containing the voice note",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "AnimatedEmoji": {
        "comment": "Describes an animated or custom representation of an emoji",
        "parameters": {
            "sticker": {
                "description": "Sticker for the emoji; may be null if yet unknown for a custom emoji. If the sticker is a custom emoji, it can have arbitrary format different from stickerFormatTgs",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "sticker_width": {
                "description": "Expected width of the sticker, which can be used if the sticker is null",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sticker_height": {
                "description": "Expected height of the sticker, which can be used if the sticker is null",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "fitzpatrick_type": {
                "description": "Emoji modifier fitzpatrick type; 0-6; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sound": {
                "description": "File containing the sound to be played when the sticker is clicked; may be null. The sound is encoded with the Opus codec, and stored inside an OGG container",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Contact": {
        "comment": "Describes a user contact",
        "parameters": {
            "phone_number": {
                "description": "Phone number of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "first_name": {
                "description": "First name of the user; 1-255 characters in length",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "last_name": {
                "description": "Last name of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "vcard": {
                "description": "Additional data about the user in a form of vCard; 0-2048 bytes in length",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "user_id": {
                "description": "Identifier of the user, if known; 0 otherwise",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Location": {
        "comment": "Describes a location on planet Earth",
        "parameters": {
            "latitude": {
                "description": "Latitude of the location in degrees; as defined by the sender",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "longitude": {
                "description": "Longitude of the location, in degrees; as defined by the sender",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "horizontal_accuracy": {
                "description": "The estimated horizontal accuracy of the location, in meters; as defined by the sender. 0 if unknown",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Venue": {
        "comment": "Describes a venue",
        "parameters": {
            "location": {
                "description": "Venue location; as defined by the sender",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "title": {
                "description": "Venue name; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "address": {
                "description": "Venue address; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "provider": {
                "description": "Provider of the venue database; as defined by the sender. Currently, only \"foursquare\" and \"gplaces\" (Google Places) need to be supported",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "id": {
                "description": "Identifier of the venue in the provider database; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Type of the venue in the provider database; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Game": {
        "comment": "Describes a game",
        "parameters": {
            "id": {
                "description": "Unique game identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "short_name": {
                "description": "Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name}",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Game title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "text": {
                "description": "Game text, usually containing scoreboards for a game",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "description": {
                "description": "Game description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Game photo",
                "nullable": false,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "animation": {
                "description": "Game animation; may be null",
                "nullable": true,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Poll": {
        "comment": "Describes a poll",
        "parameters": {
            "id": {
                "description": "Unique poll identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "question": {
                "description": "Poll question; 1-300 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "options": {
                "description": "List of poll answer options",
                "nullable": false,
                "type": "List<PollOption>",
                "tl": "PollOption",
                "enum": 4
            },
            "total_voter_count": {
                "description": "Total number of voters, participating in the poll",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "recent_voter_user_ids": {
                "description": "User identifiers of recent voters, if the poll is non-anonymous",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "is_anonymous": {
                "description": "True, if the poll is anonymous",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Type of the poll",
                "nullable": false,
                "type": "PollType",
                "tl": "PollType",
                "enum": 2
            },
            "open_period": {
                "description": "Amount of time the poll will be active after creation, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "close_date": {
                "description": "Point in time (Unix timestamp) when the poll will automatically be closed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_closed": {
                "description": "True, if the poll is closed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ProfilePhoto": {
        "comment": "Describes a user profile photo",
        "parameters": {
            "id": {
                "description": "Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of user profile photos",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "small": {
                "description": "A small (160x160) user profile photo. The file can be downloaded only before the photo is changed",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "big": {
                "description": "A big (640x640) user profile photo. The file can be downloaded only before the photo is changed",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "minithumbnail": {
                "description": "User profile photo minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "has_animation": {
                "description": "True, if the photo has animated variant",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_personal": {
                "description": "True, if the photo is visible only for the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatPhotoInfo": {
        "comment": "Contains basic information about the photo of a chat",
        "parameters": {
            "small": {
                "description": "A small (160x160) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "big": {
                "description": "A big (640x640) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "minithumbnail": {
                "description": "Chat photo minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "has_animation": {
                "description": "True, if the photo has animated variant",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_personal": {
                "description": "True, if the photo is visible only for the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserTypeRegular": {
        "comment": "A regular user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserTypeDeleted": {
        "comment": "A deleted user or deleted bot. No information on the user besides the user identifier is available. It is not possible to perform any active actions on this type of user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserTypeBot": {
        "comment": "A bot (see https://core.telegram.org/bots)",
        "parameters": {
            "can_join_groups": {
                "description": "True, if the bot can be invited to basic group and supergroup chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_read_all_group_messages": {
                "description": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_inline": {
                "description": "True, if the bot supports inline queries",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "inline_query_placeholder": {
                "description": "Placeholder for inline queries (displayed on the application input field)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "need_location": {
                "description": "True, if the location of the user is expected to be sent with every inline query to this bot",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_added_to_attachment_menu": {
                "description": "True, if the bot can be added to attachment menu",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserTypeUnknown": {
        "comment": "No information on the user besides the user identifier is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "BotCommand": {
        "comment": "Represents a command supported by a bot",
        "parameters": {
            "command": {
                "description": "Text of the bot command",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Description of the bot command",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotCommands": {
        "comment": "Contains a list of bot commands",
        "parameters": {
            "bot_user_id": {
                "description": "Bot's user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "commands": {
                "description": "List of bot commands",
                "nullable": false,
                "type": "List<BotCommand>",
                "tl": "BotCommand",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotMenuButton": {
        "comment": "Describes a button to be shown instead of bot commands menu button",
        "parameters": {
            "text": {
                "description": "Text of the button",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "URL to be passed to openWebApp",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatLocation": {
        "comment": "Represents a location to which a chat is connected",
        "parameters": {
            "location": {
                "description": "The location",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "address": {
                "description": "Location address; 1-64 characters, as defined by the chat owner",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AnimatedChatPhoto": {
        "comment": "Animated variant of a chat photo in MPEG4 format",
        "parameters": {
            "length": {
                "description": "Animation width and height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "file": {
                "description": "Information about the animation file",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "main_frame_timestamp": {
                "description": "Timestamp of the frame, used as a static chat photo",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatPhoto": {
        "comment": "Describes a chat or user profile photo",
        "parameters": {
            "id": {
                "description": "Unique photo identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "added_date": {
                "description": "Point in time (Unix timestamp) when the photo has been added",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Photo minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "sizes": {
                "description": "Available variants of the photo in JPEG format, in different size",
                "nullable": false,
                "type": "List<PhotoSize>",
                "tl": "PhotoSize",
                "enum": 4
            },
            "animation": {
                "description": "A big (640x640) animated variant of the photo in MPEG4 format; may be null",
                "nullable": true,
                "type": "AnimatedChatPhoto",
                "tl": "AnimatedChatPhoto",
                "enum": 2
            },
            "small_animation": {
                "description": "A small (160x160) animated variant of the photo in MPEG4 format; may be null even the big animation is available",
                "nullable": true,
                "type": "AnimatedChatPhoto",
                "tl": "AnimatedChatPhoto",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatPhotos": {
        "comment": "Contains a list of chat or user profile photos",
        "parameters": {
            "total_count": {
                "description": "Total number of photos",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "photos": {
                "description": "List of photos",
                "nullable": false,
                "type": "List<ChatPhoto>",
                "tl": "ChatPhoto",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputChatPhotoPrevious": {
        "comment": "A previously used profile photo of the current user",
        "parameters": {
            "chat_photo_id": {
                "description": "Identifier of the current user's profile photo to reuse",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputChatPhotoStatic": {
        "comment": "A static photo in JPEG format",
        "parameters": {
            "photo": {
                "description": "Photo to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputChatPhotoAnimation": {
        "comment": "An animation in MPEG4 format; must be square, at most 10 seconds long, have width between 160 and 800 and be at most 2MB in size",
        "parameters": {
            "animation": {
                "description": "Animation to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "main_frame_timestamp": {
                "description": "Timestamp of the frame, which will be used as static chat photo",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatPermissions": {
        "comment": "Describes actions that a user is allowed to take in a chat",
        "parameters": {
            "can_send_messages": {
                "description": "True, if the user can send text messages, contacts, locations, and venues",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_send_media_messages": {
                "description": "True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_send_polls": {
                "description": "True, if the user can send polls. Implies can_send_messages permissions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_send_other_messages": {
                "description": "True, if the user can send animations, games, stickers, and dice and use inline bots. Implies can_send_messages permissions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_add_web_page_previews": {
                "description": "True, if the user may add a web page preview to their messages. Implies can_send_messages permissions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_change_info": {
                "description": "True, if the user can change the chat title, photo, and other settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_invite_users": {
                "description": "True, if the user can invite new users to the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_pin_messages": {
                "description": "True, if the user can pin messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_manage_topics": {
                "description": "True, if the user can manage topics",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatAdministratorRights": {
        "comment": "Describes rights of the administrator",
        "parameters": {
            "can_manage_chat": {
                "description": "True, if the administrator can get chat event log, get chat statistics, get message statistics in channels, get channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other privilege; applicable to supergroups and channels only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_change_info": {
                "description": "True, if the administrator can change the chat title, photo, and other settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_post_messages": {
                "description": "True, if the administrator can create channel posts; applicable to channels only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_edit_messages": {
                "description": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_delete_messages": {
                "description": "True, if the administrator can delete messages of other users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_invite_users": {
                "description": "True, if the administrator can invite new users to the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_restrict_members": {
                "description": "True, if the administrator can restrict, ban, or unban chat members; always true for channels",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_pin_messages": {
                "description": "True, if the administrator can pin messages; applicable to basic groups and supergroups only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_manage_topics": {
                "description": "True, if the administrator can manage topics; applicable to forum supergroups only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_promote_members": {
                "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by them",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_manage_video_chats": {
                "description": "True, if the administrator can manage video chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_anonymous": {
                "description": "True, if the administrator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumPaymentOption": {
        "comment": "Describes an option for buying Telegram Premium to a user",
        "parameters": {
            "currency": {
                "description": "ISO 4217 currency code for Telegram Premium subscription payment",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "amount": {
                "description": "The amount to pay, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "discount_percentage": {
                "description": "The discount associated with this option, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "month_count": {
                "description": "Number of month the Telegram Premium subscription will be active",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "store_product_id": {
                "description": "Identifier of the store product associated with the option",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "payment_link": {
                "description": "An internal link to be opened for buying Telegram Premium to the user if store payment isn't possible; may be null if direct payment isn't available",
                "nullable": true,
                "type": "InternalLinkType",
                "tl": "InternalLinkType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmojiStatus": {
        "comment": "Describes a custom emoji to be shown instead of the Telegram Premium badge",
        "parameters": {
            "custom_emoji_id": {
                "description": "Identifier of the custom emoji in stickerFormatTgs format",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmojiStatuses": {
        "comment": "Contains a list of emoji statuses",
        "parameters": {
            "emoji_statuses": {
                "description": "The list of emoji statuses",
                "nullable": false,
                "type": "List<EmojiStatus>",
                "tl": "EmojiStatus",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Usernames": {
        "comment": "Describes usernames assigned to a user, a supergroup, or a channel",
        "parameters": {
            "active_usernames": {
                "description": "List of active usernames; the first one must be shown as the primary username. The order of active usernames can be changed with reorderActiveUsernames or reorderSupergroupActiveUsernames",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            },
            "disabled_usernames": {
                "description": "List of currently disabled usernames; the username can be activated with toggleUsernameIsActive/toggleSupergroupUsernameIsActive",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            },
            "editable_username": {
                "description": "The active username, which can be changed with setUsername/setSupergroupUsername",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "User": {
        "comment": "Represents a user",
        "parameters": {
            "id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "first_name": {
                "description": "First name of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "last_name": {
                "description": "Last name of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "usernames": {
                "description": "Usernames of the user; may be null",
                "nullable": true,
                "type": "Usernames",
                "tl": "Usernames",
                "enum": 2
            },
            "phone_number": {
                "description": "Phone number of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "status": {
                "description": "Current online status of the user",
                "nullable": false,
                "type": "UserStatus",
                "tl": "UserStatus",
                "enum": 2
            },
            "profile_photo": {
                "description": "Profile photo of the user; may be null",
                "nullable": true,
                "type": "ProfilePhoto",
                "tl": "ProfilePhoto",
                "enum": 2
            },
            "emoji_status": {
                "description": "Emoji status to be shown instead of the default Telegram Premium badge; may be null. For Telegram Premium users only",
                "nullable": true,
                "type": "EmojiStatus",
                "tl": "EmojiStatus",
                "enum": 2
            },
            "is_contact": {
                "description": "The user is a contact of the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_mutual_contact": {
                "description": "The user is a contact of the current user and the current user is a contact of the user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_verified": {
                "description": "True, if the user is verified",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_premium": {
                "description": "True, if the user is a Telegram Premium user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_support": {
                "description": "True, if the user is Telegram support account",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "restriction_reason": {
                "description": "If non-empty, it contains a human-readable description of the reason why access to this user must be restricted",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_scam": {
                "description": "True, if many users reported this user as a scam",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_fake": {
                "description": "True, if many users reported this user as a fake account",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "have_access": {
                "description": "If false, the user is inaccessible, and the only information known about the user is inside this class. Identifier of the user can't be passed to any method",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Type of the user",
                "nullable": false,
                "type": "UserType",
                "tl": "UserType",
                "enum": 2
            },
            "language_code": {
                "description": "IETF language tag of the user's language; only available to bots",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "added_to_attachment_menu": {
                "description": "True, if the user added the current bot to attachment menu; only available to bots",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotInfo": {
        "comment": "Contains information about a bot",
        "parameters": {
            "share_text": {
                "description": "The text that is shown on the bot's profile page and is sent together with the link when users share the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "The text shown in the chat with the bot if the chat is empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Photo shown in the chat with the bot if the chat is empty; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "animation": {
                "description": "Animation shown in the chat with the bot if the chat is empty; may be null",
                "nullable": true,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "menu_button": {
                "description": "Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown",
                "nullable": true,
                "type": "BotMenuButton",
                "tl": "BotMenuButton",
                "enum": 2
            },
            "commands": {
                "description": "List of the bot commands",
                "nullable": false,
                "type": "List<BotCommand>",
                "tl": "BotCommand",
                "enum": 4
            },
            "default_group_administrator_rights": {
                "description": "Default administrator rights for adding the bot to basic group and supergroup chats; may be null",
                "nullable": true,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            },
            "default_channel_administrator_rights": {
                "description": "Default administrator rights for adding the bot to channels; may be null",
                "nullable": true,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserFullInfo": {
        "comment": "Contains full information about a user",
        "parameters": {
            "personal_photo": {
                "description": "User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "photo": {
                "description": "User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "public_photo": {
                "description": "User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "is_blocked": {
                "description": "True, if the user is blocked by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_called": {
                "description": "True, if the user can be called",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_video_calls": {
                "description": "True, if a video call can be created with the user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_private_calls": {
                "description": "True, if the user can't be called due to their privacy settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_private_forwards": {
                "description": "True, if the user can't be linked in forwarded messages due to their privacy settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_restricted_voice_and_video_note_messages": {
                "description": "True, if voice and video notes can't be sent or forwarded to the user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_phone_number_privacy_exception": {
                "description": "True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "bio": {
                "description": "A short user bio; may be null for bots",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "premium_gift_options": {
                "description": "The list of available options for gifting Telegram Premium to the user",
                "nullable": false,
                "type": "List<PremiumPaymentOption>",
                "tl": "PremiumPaymentOption",
                "enum": 4
            },
            "group_in_common_count": {
                "description": "Number of group chats where both the other user and the current user are a member; 0 for the current user",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "bot_info": {
                "description": "For bots, information about the bot; may be null",
                "nullable": true,
                "type": "BotInfo",
                "tl": "BotInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Users": {
        "comment": "Represents a list of users",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of users found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_ids": {
                "description": "A list of user identifiers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatAdministrator": {
        "comment": "Contains information about a chat administrator",
        "parameters": {
            "user_id": {
                "description": "User identifier of the administrator",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "custom_title": {
                "description": "Custom title of the administrator",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_owner": {
                "description": "True, if the user is the owner of the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatAdministrators": {
        "comment": "Represents a list of chat administrators",
        "parameters": {
            "administrators": {
                "description": "A list of chat administrators",
                "nullable": false,
                "type": "List<ChatAdministrator>",
                "tl": "ChatAdministrator",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusCreator": {
        "comment": "The user is the owner of the chat and has all the administrator privileges",
        "parameters": {
            "custom_title": {
                "description": "A custom title of the owner; 0-16 characters without emojis; applicable to supergroups only",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_anonymous": {
                "description": "True, if the creator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_member": {
                "description": "True, if the user is a member of the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusAdministrator": {
        "comment": "The user is a member of the chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, ban unprivileged members, and manage video chats.",
        "parameters": {
            "custom_title": {
                "description": "A custom title of the administrator; 0-16 characters without emojis; applicable to supergroups only",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "can_be_edited": {
                "description": "True, if the current user can edit the administrator privileges for the called user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "rights": {
                "description": "Rights of the administrator",
                "nullable": false,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusMember": {
        "comment": "The user is a member of the chat, without any additional privileges or restrictions",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusRestricted": {
        "comment": "The user is under certain restrictions in the chat. Not supported in basic groups and channels",
        "parameters": {
            "is_member": {
                "description": "True, if the user is a member of the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "restricted_until_date": {
                "description": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "permissions": {
                "description": "User permissions in the chat",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusLeft": {
        "comment": "The user or the chat is not a chat member",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMemberStatusBanned": {
        "comment": "The user or the chat was banned (and hence is not a member of the chat). Implies the user can't return to the chat, view messages, or be used as a participant identifier to join a video chat of the chat",
        "parameters": {
            "banned_until_date": {
                "description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Always 0 in basic groups",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMember": {
        "comment": "Describes a user or a chat as a member of another chat",
        "parameters": {
            "member_id": {
                "description": "Identifier of the chat member. Currently, other chats can be only Left or Banned. Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups or channels",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "inviter_user_id": {
                "description": "Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "joined_chat_date": {
                "description": "Point in time (Unix timestamp) when the user joined/was promoted/was banned in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "status": {
                "description": "Status of the member in the chat",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMembers": {
        "comment": "Contains a list of chat members",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of chat members found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "members": {
                "description": "A list of chat members",
                "nullable": false,
                "type": "List<ChatMember>",
                "tl": "ChatMember",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterContacts": {
        "comment": "Returns contacts of the user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterAdministrators": {
        "comment": "Returns the owner and administrators",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterMembers": {
        "comment": "Returns all chat members, including restricted chat members",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterMention": {
        "comment": "Returns users which can be mentioned in the chat",
        "parameters": {
            "message_thread_id": {
                "description": "If non-zero, the identifier of the current message thread",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterRestricted": {
        "comment": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterBanned": {
        "comment": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatMembersFilterBots": {
        "comment": "Returns bot members of the chat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterRecent": {
        "comment": "Returns recently active users in reverse chronological order",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterContacts": {
        "comment": "Returns contacts of the user, which are members of the supergroup or channel",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterAdministrators": {
        "comment": "Returns the owner and administrators",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterSearch": {
        "comment": "Used to search for supergroup or channel members via a (string) query",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterRestricted": {
        "comment": "Returns restricted supergroup members; can be used only by administrators",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterBanned": {
        "comment": "Returns users banned from the supergroup or channel; can be used only by administrators",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterMention": {
        "comment": "Returns users which can be mentioned in the supergroup",
        "parameters": {
            "query": {
                "description": "Query to search for",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If non-zero, the identifier of the current message thread",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupMembersFilterBots": {
        "comment": "Returns bot members of the supergroup or channel",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatInviteLink": {
        "comment": "Contains a chat invite link",
        "parameters": {
            "invite_link": {
                "description": "Chat invite link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Name of the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "creator_user_id": {
                "description": "User identifier of an administrator created the link",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the link was created",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "edit_date": {
                "description": "Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "expiration_date": {
                "description": "Point in time (Unix timestamp) when the link will expire; 0 if never",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_limit": {
                "description": "The maximum number of members, which can join the chat using the link simultaneously; 0 if not limited. Always 0 if the link requires approval",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_count": {
                "description": "Number of chat members, which joined the chat using the link",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "pending_join_request_count": {
                "description": "Number of pending join requests created using this link",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "creates_join_request": {
                "description": "True, if the link only creates join request. If true, total number of joining members will be unlimited",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_primary": {
                "description": "True, if the link is primary. Primary invite link can't have name, expiration date, or usage limit. There is exactly one primary invite link for each administrator with can_invite_users right at a given time",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_revoked": {
                "description": "True, if the link was revoked",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinks": {
        "comment": "Contains a list of chat invite links",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of chat invite links found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "invite_links": {
                "description": "List of invite links",
                "nullable": false,
                "type": "List<ChatInviteLink>",
                "tl": "ChatInviteLink",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinkCount": {
        "comment": "Describes a chat administrator with a number of active and revoked chat invite links",
        "parameters": {
            "user_id": {
                "description": "Administrator's user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link_count": {
                "description": "Number of active invite links",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "revoked_invite_link_count": {
                "description": "Number of revoked invite links",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinkCounts": {
        "comment": "Contains a list of chat invite link counts",
        "parameters": {
            "invite_link_counts": {
                "description": "List of invite link counts",
                "nullable": false,
                "type": "List<ChatInviteLinkCount>",
                "tl": "ChatInviteLinkCount",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinkMember": {
        "comment": "Describes a chat member joined a chat via an invite link",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "joined_chat_date": {
                "description": "Point in time (Unix timestamp) when the user joined the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "approver_user_id": {
                "description": "User identifier of the chat administrator, approved user join request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinkMembers": {
        "comment": "Contains a list of chat members joined a chat via an invite link",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of chat members found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "members": {
                "description": "List of chat members, joined a chat via an invite link",
                "nullable": false,
                "type": "List<ChatInviteLinkMember>",
                "tl": "ChatInviteLinkMember",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatInviteLinkInfo": {
        "comment": "Contains information about a chat invite link",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the invite link; 0 if the user has no access to the chat before joining",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "accessible_for": {
                "description": "If non-zero, the amount of time for which read access to the chat will remain available, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Type of the chat",
                "nullable": false,
                "type": "ChatType",
                "tl": "ChatType",
                "enum": 2
            },
            "title": {
                "description": "Title of the chat",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Chat photo; may be null",
                "nullable": true,
                "type": "ChatPhotoInfo",
                "tl": "ChatPhotoInfo",
                "enum": 2
            },
            "description": {
                "description": "Chat description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "member_count": {
                "description": "Number of members in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_user_ids": {
                "description": "User identifiers of some chat members that may be known to the current user",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "creates_join_request": {
                "description": "True, if the link only creates join request",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_public": {
                "description": "True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatJoinRequest": {
        "comment": "Describes a user that sent a join request and waits for administrator approval",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the user sent the join request",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "bio": {
                "description": "A short bio of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatJoinRequests": {
        "comment": "Contains a list of requests to join a chat",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of requests found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "requests": {
                "description": "List of the requests",
                "nullable": false,
                "type": "List<ChatJoinRequest>",
                "tl": "ChatJoinRequest",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatJoinRequestsInfo": {
        "comment": "Contains information about pending join requests for a chat",
        "parameters": {
            "total_count": {
                "description": "Total number of pending join requests",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_ids": {
                "description": "Identifiers of at most 3 users sent the newest pending join requests",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "BasicGroup": {
        "comment": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)",
        "parameters": {
            "id": {
                "description": "Group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "member_count": {
                "description": "Number of members in the group",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "status": {
                "description": "Status of the current user in the group",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            },
            "is_active": {
                "description": "True, if the group is active",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "upgraded_to_supergroup_id": {
                "description": "Identifier of the supergroup to which this group was upgraded; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BasicGroupFullInfo": {
        "comment": "Contains full information about a basic group",
        "parameters": {
            "photo": {
                "description": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "description": {
                "description": "Group description. Updated only after the basic group is opened",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "creator_user_id": {
                "description": "User identifier of the creator of the group; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "members": {
                "description": "Group members",
                "nullable": false,
                "type": "List<ChatMember>",
                "tl": "ChatMember",
                "enum": 4
            },
            "can_hide_members": {
                "description": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators after upgrading the basic group to a supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_toggle_aggressive_anti_spam": {
                "description": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup after upgrading the basic group to a supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "invite_link": {
                "description": "Primary invite link for this group; may be null. For chat administrators with can_invite_users right only. Updated only after the basic group is opened",
                "nullable": true,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            },
            "bot_commands": {
                "description": "List of commands of bots in the group",
                "nullable": false,
                "type": "List<BotCommands>",
                "tl": "BotCommands",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Supergroup": {
        "comment": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup:",
        "parameters": {
            "id": {
                "description": "Supergroup or channel identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "usernames": {
                "description": "Usernames of the supergroup or channel; may be null",
                "nullable": true,
                "type": "Usernames",
                "tl": "Usernames",
                "enum": 2
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "status": {
                "description": "Status of the current user in the supergroup or channel; custom title will always be empty",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            },
            "member_count": {
                "description": "Number of members in the supergroup or channel; 0 if unknown. Currently, it is guaranteed to be known only if the supergroup or channel was received",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_linked_chat": {
                "description": "True, if the channel has a discussion group, or the supergroup is the designated discussion group for a channel",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_location": {
                "description": "True, if the supergroup is connected to a location, i.e. the supergroup is a location-based supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sign_messages": {
                "description": "True, if messages sent to the channel need to contain information about the sender. This field is only applicable to channels",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "join_to_send_messages": {
                "description": "True, if users need to join the supergroup before they can send messages. Always true for channels and non-discussion supergroups",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "join_by_request": {
                "description": "True, if all users directly joining the supergroup need to be approved by supergroup administrators. Always false for channels and supergroups without username, location, or a linked chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_slow_mode_enabled": {
                "description": "True, if the slow mode is enabled in the supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_channel": {
                "description": "True, if the supergroup is a channel",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_broadcast_group": {
                "description": "True, if the supergroup is a broadcast group, i.e. only administrators can send messages and there is no limit on the number of members",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_forum": {
                "description": "True, if the supergroup must be shown as a forum by default",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_verified": {
                "description": "True, if the supergroup or channel is verified",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "restriction_reason": {
                "description": "If non-empty, contains a human-readable description of the reason why access to this supergroup or channel must be restricted",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_scam": {
                "description": "True, if many users reported this supergroup or channel as a scam",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_fake": {
                "description": "True, if many users reported this supergroup or channel as a fake account",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SupergroupFullInfo": {
        "comment": "Contains full information about a supergroup or channel",
        "parameters": {
            "photo": {
                "description": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "description": {
                "description": "Supergroup or channel description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "member_count": {
                "description": "Number of members in the supergroup or channel; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "administrator_count": {
                "description": "Number of privileged users in the supergroup or channel; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "restricted_count": {
                "description": "Number of restricted users in the supergroup; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "banned_count": {
                "description": "Number of users banned from chat; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "linked_chat_id": {
                "description": "Chat identifier of a discussion group for the channel, or a channel, for which the supergroup is the designated discussion group; 0 if none or unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "slow_mode_delay": {
                "description": "Delay between consecutive sent messages for non-administrator supergroup members, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "slow_mode_delay_expires_in": {
                "description": "Time left before next message can be sent in the supergroup, in seconds. An updateSupergroupFullInfo update is not triggered when value of this field changes, but both new and old values are non-zero",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "can_get_members": {
                "description": "True, if members of the chat can be retrieved via getSupergroupMembers or searchChatMembers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_hidden_members": {
                "description": "True, if non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_hide_members": {
                "description": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_set_username": {
                "description": "True, if the chat username can be changed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_set_sticker_set": {
                "description": "True, if the supergroup sticker set can be changed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_set_location": {
                "description": "True, if the supergroup location can be changed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_statistics": {
                "description": "True, if the supergroup or channel statistics are available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_toggle_aggressive_anti_spam": {
                "description": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_all_history_available": {
                "description": "True, if new chat members will have access to old messages. In public, discussion, of forum groups and all channels, old messages are always available,",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_aggressive_anti_spam_enabled": {
                "description": "True, if aggressive anti-spam checks are enabled in the supergroup. The value of this field is only available to chat administrators",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker_set_id": {
                "description": "Identifier of the supergroup sticker set; 0 if none",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "location": {
                "description": "Location to which the supergroup is connected; may be null",
                "nullable": true,
                "type": "ChatLocation",
                "tl": "ChatLocation",
                "enum": 2
            },
            "invite_link": {
                "description": "Primary invite link for the chat; may be null. For chat administrators with can_invite_users right only",
                "nullable": true,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            },
            "bot_commands": {
                "description": "List of commands of bots in the group",
                "nullable": false,
                "type": "List<BotCommands>",
                "tl": "BotCommands",
                "enum": 4
            },
            "upgraded_from_basic_group_id": {
                "description": "Identifier of the basic group from which supergroup was upgraded; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "upgraded_from_max_message_id": {
                "description": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SecretChatStatePending": {
        "comment": "The secret chat is not yet created; waiting for the other user to get online",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SecretChatStateReady": {
        "comment": "The secret chat is ready to use",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SecretChatStateClosed": {
        "comment": "The secret chat is closed",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SecretChat": {
        "comment": "Represents a secret chat",
        "parameters": {
            "id": {
                "description": "Secret chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_id": {
                "description": "Identifier of the chat partner",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "state": {
                "description": "State of the secret chat",
                "nullable": false,
                "type": "SecretChatState",
                "tl": "SecretChatState",
                "enum": 2
            },
            "is_outbound": {
                "description": "True, if the chat was created by the current user; false otherwise",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "key_hash": {
                "description": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9.",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "layer": {
                "description": "Secret chat layer; determines features supported by the chat partner's application. Nested text entities and underline and strikethrough entities are supported if the layer >= 101,",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSenderUser": {
        "comment": "The message was sent by a known user",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user that sent the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSenderChat": {
        "comment": "The message was sent on behalf of a chat",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat that sent the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSenders": {
        "comment": "Represents a list of message senders",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of messages senders found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "senders": {
                "description": "List of message senders",
                "nullable": false,
                "type": "List<MessageSender>",
                "tl": "MessageSender",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMessageSender": {
        "comment": "Represents a message sender, which can be used to send messages in a chat",
        "parameters": {
            "sender": {
                "description": "Available message senders",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "needs_premium": {
                "description": "True, if Telegram Premium is needed to use the message sender",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatMessageSenders": {
        "comment": "Represents a list of message senders, which can be used to send messages in a chat",
        "parameters": {
            "senders": {
                "description": "List of available message senders",
                "nullable": false,
                "type": "List<ChatMessageSender>",
                "tl": "ChatMessageSender",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardOriginUser": {
        "comment": "The message was originally sent by a known user",
        "parameters": {
            "sender_user_id": {
                "description": "Identifier of the user that originally sent the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardOriginChat": {
        "comment": "The message was originally sent on behalf of a chat",
        "parameters": {
            "sender_chat_id": {
                "description": "Identifier of the chat that originally sent the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "author_signature": {
                "description": "For messages originally sent by an anonymous chat administrator, original message author signature",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardOriginHiddenUser": {
        "comment": "The message was originally sent by a user, which is hidden by their privacy settings",
        "parameters": {
            "sender_name": {
                "description": "Name of the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardOriginChannel": {
        "comment": "The message was originally a post in a channel",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat from which the message was originally forwarded",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier of the original message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "author_signature": {
                "description": "Original post author signature",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardOriginMessageImport": {
        "comment": "The message was imported from an exported message history",
        "parameters": {
            "sender_name": {
                "description": "Name of the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReactionTypeEmoji": {
        "comment": "A reaction with an emoji",
        "parameters": {
            "emoji": {
                "description": "Text representation of the reaction",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReactionTypeCustomEmoji": {
        "comment": "A reaction with a custom emoji",
        "parameters": {
            "custom_emoji_id": {
                "description": "Unique identifier of the custom emoji",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForwardInfo": {
        "comment": "Contains information about a forwarded message",
        "parameters": {
            "origin": {
                "description": "Origin of a forwarded message",
                "nullable": false,
                "type": "MessageForwardOrigin",
                "tl": "MessageForwardOrigin",
                "enum": 2
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the message was originally sent",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "public_service_announcement_type": {
                "description": "The type of a public service announcement for the forwarded message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "from_chat_id": {
                "description": "For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, the identifier of the chat from which the message was forwarded last time; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "from_message_id": {
                "description": "For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, the identifier of the original message from which the new message was forwarded last time; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageReplyInfo": {
        "comment": "Contains information about replies to a message",
        "parameters": {
            "reply_count": {
                "description": "Number of times the message was directly or indirectly replied",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "recent_replier_ids": {
                "description": "Identifiers of at most 3 recent repliers to the message; available in channels with a discussion supergroup. The users and chats are expected to be inaccessible: only their photo and name will be available",
                "nullable": false,
                "type": "List<MessageSender>",
                "tl": "MessageSender",
                "enum": 4
            },
            "last_read_inbox_message_id": {
                "description": "Identifier of the last read incoming reply to the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_read_outbox_message_id": {
                "description": "Identifier of the last read outgoing reply to the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_message_id": {
                "description": "Identifier of the last reply to the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageReaction": {
        "comment": "Contains information about a reaction to a message",
        "parameters": {
            "type": {
                "description": "Type of the reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "total_count": {
                "description": "Number of times the reaction was added",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_chosen": {
                "description": "True, if the reaction is chosen by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "recent_sender_ids": {
                "description": "Identifiers of at most 3 recent message senders, added the reaction; available in private, basic group and supergroup chats",
                "nullable": false,
                "type": "List<MessageSender>",
                "tl": "MessageSender",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageInteractionInfo": {
        "comment": "Contains information about interactions with a message",
        "parameters": {
            "view_count": {
                "description": "Number of times the message was viewed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "forward_count": {
                "description": "Number of times the message was forwarded",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_info": {
                "description": "Information about direct or indirect replies to the message; may be null. Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which are not replies itself",
                "nullable": true,
                "type": "MessageReplyInfo",
                "tl": "MessageReplyInfo",
                "enum": 2
            },
            "reactions": {
                "description": "The list of reactions added to the message",
                "nullable": false,
                "type": "List<MessageReaction>",
                "tl": "MessageReaction",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UnreadReaction": {
        "comment": "Contains information about an unread reaction to a message",
        "parameters": {
            "type": {
                "description": "Type of the reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "sender_id": {
                "description": "Identifier of the sender, added the reaction",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_big": {
                "description": "True, if the reaction was added with a big animation",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSendingStatePending": {
        "comment": "The message is being sent now, but has not yet been delivered to the server",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageSendingStateFailed": {
        "comment": "The message failed to be sent",
        "parameters": {
            "error_code": {
                "description": "An error code; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "error_message": {
                "description": "Error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "can_retry": {
                "description": "True, if the message can be re-sent",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_another_sender": {
                "description": "True, if the message can be re-sent only on behalf of a different sender",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "retry_after": {
                "description": "Time left before the message can be re-sent, in seconds. No update is sent when this field changes",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Message": {
        "comment": "Describes a message",
        "parameters": {
            "id": {
                "description": "Message identifier; unique for the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender of the message",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sending_state": {
                "description": "The sending state of the message; may be null",
                "nullable": true,
                "type": "MessageSendingState",
                "tl": "MessageSendingState",
                "enum": 2
            },
            "scheduling_state": {
                "description": "The scheduling state of the message; may be null",
                "nullable": true,
                "type": "MessageSchedulingState",
                "tl": "MessageSchedulingState",
                "enum": 2
            },
            "is_outgoing": {
                "description": "True, if the message is outgoing",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is pinned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_edited": {
                "description": "True, if the message can be edited. For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used with this message by the application",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_forwarded": {
                "description": "True, if the message can be forwarded",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_saved": {
                "description": "True, if content of the message can be saved locally or copied",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_deleted_only_for_self": {
                "description": "True, if the message can be deleted only for the current user while other users will continue to see it",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_deleted_for_all_users": {
                "description": "True, if the message can be deleted for all users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_added_reactions": {
                "description": "True, if the list of added reactions is available through getMessageAddedReactions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_statistics": {
                "description": "True, if the message statistics are available through getMessageStatistics",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_message_thread": {
                "description": "True, if information about the message thread is available through getMessageThread and getMessageThreadHistory",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_viewers": {
                "description": "True, if chat members already viewed the message can be received through getMessageViewers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_get_media_timestamp_links": {
                "description": "True, if media timestamp links can be generated for media timestamp entities in the message text, caption or web page description through getMessageLink",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_report_reactions": {
                "description": "True, if reactions on the message can be reported through reportMessageReactions",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_timestamped_media": {
                "description": "True, if media timestamp entities refers to a media in this message as opposed to a media in the replied message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_channel_post": {
                "description": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_topic_message": {
                "description": "True, if the message is a forum topic message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "contains_unread_mention": {
                "description": "True, if the message contains an unread mention for the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the message was sent",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "edit_date": {
                "description": "Point in time (Unix timestamp) when the message was last edited",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "forward_info": {
                "description": "Information about the initial message sender; may be null",
                "nullable": true,
                "type": "MessageForwardInfo",
                "tl": "MessageForwardInfo",
                "enum": 2
            },
            "interaction_info": {
                "description": "Information about interactions with the message; may be null",
                "nullable": true,
                "type": "MessageInteractionInfo",
                "tl": "MessageInteractionInfo",
                "enum": 2
            },
            "unread_reactions": {
                "description": "Information about unread reactions added to the message",
                "nullable": false,
                "type": "List<UnreadReaction>",
                "tl": "UnreadReaction",
                "enum": 4
            },
            "reply_in_chat_id": {
                "description": "If non-zero, the identifier of the chat to which the replied message belongs; Currently, only messages in the Replies chat can have different reply_in_chat_id and chat_id",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_to_message_id": {
                "description": "If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If non-zero, the identifier of the message thread the message belongs to; unique within the chat to which the message belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "self_destruct_time": {
                "description": "The message's self-destruct time, in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the time expires",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "self_destruct_in": {
                "description": "Time left before the message self-destruct timer expires, in seconds. If the self-destruct timer isn't started yet, equals to the value of the self_destruct_time field",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "auto_delete_in": {
                "description": "Time left before the message will be automatically deleted by message_auto_delete_time setting of the chat, in seconds; 0 if never. TDLib will send updateDeleteMessages or updateMessageContent once the time expires",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "via_bot_user_id": {
                "description": "If non-zero, the user identifier of the bot through which this message was sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "author_signature": {
                "description": "For channel posts and anonymous group messages, optional author signature",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "media_album_id": {
                "description": "Unique identifier of an album this message belongs to. Only audios, documents, photos and videos can be grouped together in albums",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "restriction_reason": {
                "description": "If non-empty, contains a human-readable description of the reason why access to this message must be restricted",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "content": {
                "description": "Content of the message",
                "nullable": false,
                "type": "MessageContent",
                "tl": "MessageContent",
                "enum": 2
            },
            "reply_markup": {
                "description": "Reply markup for the message; may be null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Messages": {
        "comment": "Contains a list of messages",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of messages found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "messages": {
                "description": "List of messages; messages may be null",
                "nullable": true,
                "type": "List<Message>",
                "tl": "Message",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "FoundMessages": {
        "comment": "Contains a list of messages found by a search",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of messages found; -1 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "messages": {
                "description": "List of messages",
                "nullable": false,
                "type": "List<Message>",
                "tl": "Message",
                "enum": 4
            },
            "next_offset": {
                "description": "The offset for the next request. If empty, there are no more results",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FoundChatMessages": {
        "comment": "Contains a list of messages found by a search in a given chat",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of messages found; -1 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "messages": {
                "description": "List of messages",
                "nullable": false,
                "type": "List<Message>",
                "tl": "Message",
                "enum": 4
            },
            "next_from_message_id": {
                "description": "The offset for the next request. If 0, there are no more results",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePosition": {
        "comment": "Contains information about a message in a specific position",
        "parameters": {
            "position": {
                "description": "0-based message position in the full list of suitable messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the message was sent",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePositions": {
        "comment": "Contains a list of message positions",
        "parameters": {
            "total_count": {
                "description": "Total number of messages found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "positions": {
                "description": "List of message positions",
                "nullable": false,
                "type": "List<MessagePosition>",
                "tl": "MessagePosition",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageCalendarDay": {
        "comment": "Contains information about found messages sent on a specific day",
        "parameters": {
            "total_count": {
                "description": "Total number of found messages sent on the day",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "message": {
                "description": "First message sent on the day",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageCalendar": {
        "comment": "Contains information about found messages, split by days according to the option \"utc_time_offset\"",
        "parameters": {
            "total_count": {
                "description": "Total number of found messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "days": {
                "description": "Information about messages sent",
                "nullable": false,
                "type": "List<MessageCalendarDay>",
                "tl": "MessageCalendarDay",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "SponsoredMessage": {
        "comment": "Describes a sponsored message",
        "parameters": {
            "message_id": {
                "description": "Message identifier; unique for the chat to which the sponsored message belongs among both ordinary and sponsored messages",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_recommended": {
                "description": "True, if the message needs to be labeled as \"recommended\" instead of \"sponsored\"",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sponsor_chat_id": {
                "description": "Sponsor chat identifier; 0 if the sponsor chat is accessible through an invite link",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sponsor_chat_info": {
                "description": "Information about the sponsor chat; may be null unless sponsor_chat_id == 0",
                "nullable": true,
                "type": "ChatInviteLinkInfo",
                "tl": "ChatInviteLinkInfo",
                "enum": 2
            },
            "show_chat_photo": {
                "description": "True, if the sponsor's chat photo must be shown",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "link": {
                "description": "An internal link to be opened when the sponsored message is clicked; may be null if the sponsor chat needs to be opened instead",
                "nullable": true,
                "type": "InternalLinkType",
                "tl": "InternalLinkType",
                "enum": 2
            },
            "content": {
                "description": "Content of the message. Currently, can be only of the type messageText",
                "nullable": false,
                "type": "MessageContent",
                "tl": "MessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "SponsoredMessages": {
        "comment": "Contains a list of sponsored messages",
        "parameters": {
            "messages": {
                "description": "List of sponsored messages",
                "nullable": false,
                "type": "List<SponsoredMessage>",
                "tl": "SponsoredMessage",
                "enum": 4
            },
            "messages_between": {
                "description": "The minimum number of messages between shown sponsored messages, or 0 if only one sponsored message must be shown after all ordinary messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FileDownload": {
        "comment": "Describes a file added to file download list",
        "parameters": {
            "file_id": {
                "description": "File identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "message": {
                "description": "The message with the file",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "add_date": {
                "description": "Point in time (Unix timestamp) when the file was added to the download list",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "complete_date": {
                "description": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_paused": {
                "description": "True, if downloading of the file is paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DownloadedFileCounts": {
        "comment": "Contains number of being downloaded and recently downloaded files found",
        "parameters": {
            "active_count": {
                "description": "Number of active file downloads found, including paused",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "paused_count": {
                "description": "Number of paused file downloads found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "completed_count": {
                "description": "Number of completed file downloads found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FoundFileDownloads": {
        "comment": "Contains a list of downloaded files, found by a search",
        "parameters": {
            "total_counts": {
                "description": "Total number of suitable files, ignoring offset",
                "nullable": false,
                "type": "DownloadedFileCounts",
                "tl": "DownloadedFileCounts",
                "enum": 2
            },
            "files": {
                "description": "The list of files",
                "nullable": false,
                "type": "List<FileDownload>",
                "tl": "FileDownload",
                "enum": 4
            },
            "next_offset": {
                "description": "The offset for the next request. If empty, there are no more results",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationSettingsScopePrivateChats": {
        "comment": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationSettingsScopeGroupChats": {
        "comment": "Notification settings applied to all basic group and supergroup chats when the corresponding chat setting has a default value",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationSettingsScopeChannelChats": {
        "comment": "Notification settings applied to all channel chats when the corresponding chat setting has a default value",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatNotificationSettings": {
        "comment": "Contains information about notification settings for a chat or a froum topic",
        "parameters": {
            "use_default_mute_for": {
                "description": "If true, mute_for is ignored and the value for the relevant type of chat or the forum chat is used instead",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "mute_for": {
                "description": "Time left before notifications will be unmuted, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "use_default_sound": {
                "description": "If true, the value for the relevant type of chat or the forum chat is used instead of sound_id",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sound_id": {
                "description": "Identifier of the notification sound to be played; 0 if sound is disabled",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "use_default_show_preview": {
                "description": "If true, show_preview is ignored and the value for the relevant type of chat or the forum chat is used instead",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "show_preview": {
                "description": "True, if message content must be displayed in notifications",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_default_disable_pinned_message_notifications": {
                "description": "If true, disable_pinned_message_notifications is ignored and the value for the relevant type of chat or the forum chat is used instead",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "disable_pinned_message_notifications": {
                "description": "If true, notifications for incoming pinned messages will be created as for an ordinary unread message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_default_disable_mention_notifications": {
                "description": "If true, disable_mention_notifications is ignored and the value for the relevant type of chat or the forum chat is used instead",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "disable_mention_notifications": {
                "description": "If true, notifications for messages with mentions will be created as for an ordinary unread message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ScopeNotificationSettings": {
        "comment": "Contains information about notification settings for several chats",
        "parameters": {
            "mute_for": {
                "description": "Time left before notifications will be unmuted, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sound_id": {
                "description": "Identifier of the notification sound to be played; 0 if sound is disabled",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "show_preview": {
                "description": "True, if message content must be displayed in notifications",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "disable_pinned_message_notifications": {
                "description": "True, if notifications for incoming pinned messages will be created as for an ordinary unread message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "disable_mention_notifications": {
                "description": "True, if notifications for messages with mentions will be created as for an ordinary unread message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DraftMessage": {
        "comment": "Contains information about a message draft",
        "parameters": {
            "reply_to_message_id": {
                "description": "Identifier of the replied message; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the draft was created",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "input_message_text": {
                "description": "Content of the message draft; must be of the type inputMessageText",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatTypePrivate": {
        "comment": "An ordinary chat with a user",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatTypeBasicGroup": {
        "comment": "A basic group (a chat with 0-200 other users)",
        "parameters": {
            "basic_group_id": {
                "description": "Basic group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatTypeSupergroup": {
        "comment": "A supergroup or channel (with unlimited members)",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup or channel identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_channel": {
                "description": "True, if the supergroup is a channel",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatTypeSecret": {
        "comment": "A secret chat with a user",
        "parameters": {
            "secret_chat_id": {
                "description": "Secret chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier of the secret chat peer",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatFilter": {
        "comment": "Represents a filter of user chats",
        "parameters": {
            "title": {
                "description": "The title of the filter; 1-12 characters without line feeds",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "icon_name": {
                "description": "The chosen icon name for short filter representation. If non-empty, must be one of \"All\", \"Unread\", \"Unmuted\", \"Bots\", \"Channels\", \"Groups\", \"Private\", \"Custom\", \"Setup\", \"Cat\", \"Crown\",",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "pinned_chat_ids": {
                "description": "The chat identifiers of pinned chats in the filtered chat list. There can be up to getOption(\"chat_filter_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "included_chat_ids": {
                "description": "The chat identifiers of always included chats in the filtered chat list. There can be up to getOption(\"chat_filter_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "excluded_chat_ids": {
                "description": "The chat identifiers of always excluded chats in the filtered chat list. There can be up to getOption(\"chat_filter_chosen_chat_count_max\") always excluded non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "exclude_muted": {
                "description": "True, if muted chats need to be excluded",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "exclude_read": {
                "description": "True, if read chats need to be excluded",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "exclude_archived": {
                "description": "True, if archived chats need to be excluded",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "include_contacts": {
                "description": "True, if contacts need to be included",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "include_non_contacts": {
                "description": "True, if non-contact users need to be included",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "include_bots": {
                "description": "True, if bots need to be included",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "include_groups": {
                "description": "True, if basic groups and supergroups need to be included",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "include_channels": {
                "description": "True, if channels need to be included",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatFilterInfo": {
        "comment": "Contains basic information about a chat filter",
        "parameters": {
            "id": {
                "description": "Unique chat filter identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "The title of the filter; 1-12 characters without line feeds",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "icon_name": {
                "description": "The chosen or default icon name for short filter representation. One of \"All\", \"Unread\", \"Unmuted\", \"Bots\", \"Channels\", \"Groups\", \"Private\", \"Custom\", \"Setup\", \"Cat\", \"Crown\",",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RecommendedChatFilter": {
        "comment": "Describes a recommended chat filter",
        "parameters": {
            "filter": {
                "description": "The chat filter",
                "nullable": false,
                "type": "ChatFilter",
                "tl": "ChatFilter",
                "enum": 2
            },
            "description": {
                "description": "Chat filter description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RecommendedChatFilters": {
        "comment": "Contains a list of recommended chat filters",
        "parameters": {
            "chat_filters": {
                "description": "List of recommended chat filters",
                "nullable": false,
                "type": "List<RecommendedChatFilter>",
                "tl": "RecommendedChatFilter",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatListMain": {
        "comment": "A main list of chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatListArchive": {
        "comment": "A list of chats usually located at the top of the main chat list. Unmuted chats are automatically moved from the Archive to the Main chat list when a new message arrives",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatListFilter": {
        "comment": "A list of chats belonging to a chat filter",
        "parameters": {
            "chat_filter_id": {
                "description": "Chat filter identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatLists": {
        "comment": "Contains a list of chat lists",
        "parameters": {
            "chat_lists": {
                "description": "List of chat lists",
                "nullable": false,
                "type": "List<ChatList>",
                "tl": "ChatList",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatSourceMtprotoProxy": {
        "comment": "The chat is sponsored by the user's MTProxy server",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatSourcePublicServiceAnnouncement": {
        "comment": "The chat contains a public service announcement",
        "parameters": {
            "type": {
                "description": "The type of the announcement",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "text": {
                "description": "The text of the announcement",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatPosition": {
        "comment": "Describes a position of a chat in a chat list",
        "parameters": {
            "list": {
                "description": "The chat list",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "order": {
                "description": "A parameter used to determine order of the chat in the chat list. Chats must be sorted by the pair (order, chat.id) in descending order",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the chat is pinned in the chat list",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "source": {
                "description": "Source of the chat in the chat list; may be null",
                "nullable": true,
                "type": "ChatSource",
                "tl": "ChatSource",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatAvailableReactionsAll": {
        "comment": "All reactions are available in the chat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatAvailableReactionsSome": {
        "comment": "Only specific reactions are available in the chat",
        "parameters": {
            "reactions": {
                "description": "The list of reactions",
                "nullable": false,
                "type": "List<ReactionType>",
                "tl": "ReactionType",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "VideoChat": {
        "comment": "Describes a video chat",
        "parameters": {
            "group_call_id": {
                "description": "Group call identifier of an active video chat; 0 if none. Full information about the video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_participants": {
                "description": "True, if the video chat has participants",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "default_participant_id": {
                "description": "Default group call participant identifier to join the video chat; may be null",
                "nullable": true,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Chat": {
        "comment": "A chat. (Can be a private chat, basic group, supergroup, or secret chat)",
        "parameters": {
            "id": {
                "description": "Chat unique identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "type": {
                "description": "Type of the chat",
                "nullable": false,
                "type": "ChatType",
                "tl": "ChatType",
                "enum": 2
            },
            "title": {
                "description": "Chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Chat photo; may be null",
                "nullable": true,
                "type": "ChatPhotoInfo",
                "tl": "ChatPhotoInfo",
                "enum": 2
            },
            "permissions": {
                "description": "Actions that non-administrator chat members are allowed to take in the chat",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            },
            "last_message": {
                "description": "Last message in the chat; may be null",
                "nullable": true,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "positions": {
                "description": "Positions of the chat in chat lists",
                "nullable": false,
                "type": "List<ChatPosition>",
                "tl": "ChatPosition",
                "enum": 4
            },
            "message_sender_id": {
                "description": "Identifier of a user or chat that is selected to send messages in the chat; may be null if the user can't change message sender",
                "nullable": true,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "has_protected_content": {
                "description": "True, if chat content can't be saved locally, forwarded, or copied",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_marked_as_unread": {
                "description": "True, if the chat is marked as unread",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_blocked": {
                "description": "True, if the chat is blocked by the current user and private messages from the chat can't be received",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_scheduled_messages": {
                "description": "True, if the chat has scheduled messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_deleted_only_for_self": {
                "description": "True, if the chat messages can be deleted only for the current user while other users will continue to see the messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_deleted_for_all_users": {
                "description": "True, if the chat messages can be deleted for all users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_reported": {
                "description": "True, if the chat can be reported to Telegram moderators through reportChat or reportChatPhoto",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "default_disable_notification": {
                "description": "Default value of the disable_notification parameter, used when a message is sent to the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "unread_count": {
                "description": "Number of unread messages in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "last_read_inbox_message_id": {
                "description": "Identifier of the last read incoming message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_read_outbox_message_id": {
                "description": "Identifier of the last read outgoing message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_mention_count": {
                "description": "Number of unread messages with a mention/reply in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "unread_reaction_count": {
                "description": "Number of messages with unread reactions in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "notification_settings": {
                "description": "Notification settings for the chat",
                "nullable": false,
                "type": "ChatNotificationSettings",
                "tl": "ChatNotificationSettings",
                "enum": 2
            },
            "available_reactions": {
                "description": "Types of reaction, available in the chat",
                "nullable": false,
                "type": "ChatAvailableReactions",
                "tl": "ChatAvailableReactions",
                "enum": 2
            },
            "message_auto_delete_time": {
                "description": "Current message auto-delete or self-destruct timer setting for the chat, in seconds; 0 if disabled. Self-destruct timer in secret chats starts after the message or its content is viewed. Auto-delete timer in other chats starts from the send date",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "theme_name": {
                "description": "If non-empty, name of a theme, set for the chat",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "action_bar": {
                "description": "Information about actions which must be possible to do through the chat action bar; may be null",
                "nullable": true,
                "type": "ChatActionBar",
                "tl": "ChatActionBar",
                "enum": 2
            },
            "video_chat": {
                "description": "Information about video chat of the chat",
                "nullable": false,
                "type": "VideoChat",
                "tl": "VideoChat",
                "enum": 2
            },
            "pending_join_requests": {
                "description": "Information about pending join requests; may be null",
                "nullable": true,
                "type": "ChatJoinRequestsInfo",
                "tl": "ChatJoinRequestsInfo",
                "enum": 2
            },
            "reply_markup_message_id": {
                "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "draft_message": {
                "description": "A draft of a message in the chat; may be null",
                "nullable": true,
                "type": "DraftMessage",
                "tl": "DraftMessage",
                "enum": 2
            },
            "client_data": {
                "description": "Application-specific data associated with the chat. (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the message database is used",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Chats": {
        "comment": "Represents a list of chats",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of chats found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "chat_ids": {
                "description": "List of chat identifiers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatNearby": {
        "comment": "Describes a chat located nearby",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "distance": {
                "description": "Distance to the chat location, in meters",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatsNearby": {
        "comment": "Represents a list of chats located nearby",
        "parameters": {
            "users_nearby": {
                "description": "List of users nearby",
                "nullable": false,
                "type": "List<ChatNearby>",
                "tl": "ChatNearby",
                "enum": 4
            },
            "supergroups_nearby": {
                "description": "List of location-based supergroups nearby",
                "nullable": false,
                "type": "List<ChatNearby>",
                "tl": "ChatNearby",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PublicChatTypeHasUsername": {
        "comment": "The chat is public, because it has an active username",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PublicChatTypeIsLocationBased": {
        "comment": "The chat is public, because it is a location-based supergroup",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionBarReportSpam": {
        "comment": "The chat can be reported as spam using the method reportChat with the reason chatReportReasonSpam. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown",
        "parameters": {
            "can_unarchive": {
                "description": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionBarReportUnrelatedLocation": {
        "comment": "The chat is a location-based supergroup, which can be reported as having unrelated location using the method reportChat with the reason chatReportReasonUnrelatedLocation",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionBarInviteMembers": {
        "comment": "The chat is a recently created group chat to which new members can be invited",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionBarReportAddBlock": {
        "comment": "The chat is a private or secret chat, which can be reported using the method reportChat, or the other user can be blocked using the method toggleMessageSenderIsBlocked,",
        "parameters": {
            "can_unarchive": {
                "description": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "distance": {
                "description": "If non-negative, the current user was found by the peer through searchChatsNearby and this is the distance between the users",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionBarAddContact": {
        "comment": "The chat is a private or secret chat and the other user can be added to the contact list using the method addContact",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionBarSharePhoneNumber": {
        "comment": "The chat is a private or secret chat with a mutual contact and the user's phone number can be shared with the other user using the method sharePhoneNumber",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionBarJoinRequest": {
        "comment": "The chat is a private chat with an administrator of a chat to which the user sent join request",
        "parameters": {
            "title": {
                "description": "Title of the chat to which the join request was sent",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_channel": {
                "description": "True, if the join request was sent to a channel chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "request_date": {
                "description": "Point in time (Unix timestamp) when the join request was sent",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "KeyboardButtonTypeText": {
        "comment": "A simple button, with text that must be sent when the button is pressed",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "KeyboardButtonTypeRequestPhoneNumber": {
        "comment": "A button that sends the user's phone number when pressed; available only in private chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "KeyboardButtonTypeRequestLocation": {
        "comment": "A button that sends the user's location when pressed; available only in private chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "KeyboardButtonTypeRequestPoll": {
        "comment": "A button that allows the user to create and send a poll when pressed; available only in private chats",
        "parameters": {
            "force_regular": {
                "description": "If true, only regular polls must be allowed to create",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "force_quiz": {
                "description": "If true, only polls in quiz mode must be allowed to create",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "KeyboardButtonTypeWebApp": {
        "comment": "A button that opens a Web App by calling getWebAppUrl",
        "parameters": {
            "url": {
                "description": "An HTTP URL to pass to getWebAppUrl",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "KeyboardButton": {
        "comment": "Represents a single button in a bot keyboard",
        "parameters": {
            "text": {
                "description": "Text of the button",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Type of the button",
                "nullable": false,
                "type": "KeyboardButtonType",
                "tl": "KeyboardButtonType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeUrl": {
        "comment": "A button that opens a specified URL",
        "parameters": {
            "url": {
                "description": "HTTP or tg:// URL to open",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeLoginUrl": {
        "comment": "A button that opens a specified URL and automatically authorize the current user by calling getLoginUrlInfo",
        "parameters": {
            "url": {
                "description": "An HTTP URL to pass to getLoginUrlInfo",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "id": {
                "description": "Unique button identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "forward_text": {
                "description": "If non-empty, new text of the button in forwarded messages",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeWebApp": {
        "comment": "A button that opens a Web App by calling openWebApp",
        "parameters": {
            "url": {
                "description": "An HTTP URL to pass to openWebApp",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeCallback": {
        "comment": "A button that sends a callback query to a bot",
        "parameters": {
            "data": {
                "description": "Data to be sent to the bot via a callback query",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeCallbackWithPassword": {
        "comment": "A button that asks for the 2-step verification password of the current user and then sends a callback query to a bot",
        "parameters": {
            "data": {
                "description": "Data to be sent to the bot via a callback query",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeCallbackGame": {
        "comment": "A button with a game that sends a callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeSwitchInline": {
        "comment": "A button that forces an inline query to the bot to be inserted in the input field",
        "parameters": {
            "query": {
                "description": "Inline query to be sent to the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "in_current_chat": {
                "description": "True, if the inline query must be sent from the current chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeBuy": {
        "comment": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButtonTypeUser": {
        "comment": "A button with a user reference to be handled in the same way as textEntityTypeMentionName entities",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineKeyboardButton": {
        "comment": "Represents a single button in an inline keyboard",
        "parameters": {
            "text": {
                "description": "Text of the button",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Type of the button",
                "nullable": false,
                "type": "InlineKeyboardButtonType",
                "tl": "InlineKeyboardButtonType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReplyMarkupRemoveKeyboard": {
        "comment": "Instructs application to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, updateChatReplyMarkup with message_id == 0 will be sent",
        "parameters": {
            "is_personal": {
                "description": "True, if the keyboard is removed only for the mentioned users or the target user of a reply",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReplyMarkupForceReply": {
        "comment": "Instructs application to force a reply to this message",
        "parameters": {
            "is_personal": {
                "description": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "input_field_placeholder": {
                "description": "If non-empty, the placeholder to be shown in the input field when the reply is active; 0-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReplyMarkupShowKeyboard": {
        "comment": "Contains a custom keyboard layout to quickly reply to bots",
        "parameters": {
            "rows": {
                "description": "A list of rows of bot keyboard buttons",
                "nullable": false,
                "type": "List<KeyboardButton>",
                "tl": "KeyboardButton",
                "enum": 4
            },
            "is_persistent": {
                "description": "True, if the keyboard is supposed to always be shown when the ordinary keyboard is hidden",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "resize_keyboard": {
                "description": "True, if the application needs to resize the keyboard vertically",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "one_time": {
                "description": "True, if the application needs to hide the keyboard after use",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_personal": {
                "description": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "input_field_placeholder": {
                "description": "If non-empty, the placeholder to be shown in the input field when the keyboard is active; 0-64 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ReplyMarkupInlineKeyboard": {
        "comment": "Contains an inline keyboard layout",
        "parameters": {
            "rows": {
                "description": "A list of rows of inline keyboard buttons",
                "nullable": false,
                "type": "List<InlineKeyboardButton>",
                "tl": "InlineKeyboardButton",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "LoginUrlInfoOpen": {
        "comment": "An HTTP url needs to be open",
        "parameters": {
            "url": {
                "description": "The URL to open",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "skip_confirm": {
                "description": "True, if there is no need to show an ordinary open URL confirm",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LoginUrlInfoRequestConfirmation": {
        "comment": "An authorization confirmation dialog needs to be shown to the user",
        "parameters": {
            "url": {
                "description": "An HTTP URL to be opened",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "domain": {
                "description": "A domain of the URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "bot_user_id": {
                "description": "User identifier of a bot linked with the website",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "request_write_access": {
                "description": "True, if the user needs to be requested to give the permission to the bot to send them messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "WebAppInfo": {
        "comment": "Contains information about a Web App",
        "parameters": {
            "launch_id": {
                "description": "Unique identifier for the Web App launch",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "url": {
                "description": "A Web App URL to open in a web view",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageThreadInfo": {
        "comment": "Contains information about a message thread",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat to which the message thread belongs",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "Message thread identifier, unique within the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_info": {
                "description": "Information about the message thread; may be null for forum topic threads",
                "nullable": true,
                "type": "MessageReplyInfo",
                "tl": "MessageReplyInfo",
                "enum": 2
            },
            "unread_message_count": {
                "description": "Approximate number of unread messages in the message thread",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "messages": {
                "description": "The messages from which the thread starts. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id)",
                "nullable": false,
                "type": "List<Message>",
                "tl": "Message",
                "enum": 4
            },
            "draft_message": {
                "description": "A draft of a message in the message thread; may be null",
                "nullable": true,
                "type": "DraftMessage",
                "tl": "DraftMessage",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ForumTopicIcon": {
        "comment": "Describes a forum topic icon",
        "parameters": {
            "color": {
                "description": "Color of the topic icon in RGB format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "custom_emoji_id": {
                "description": "Unique identifier of the custom emoji shown on the topic icon; 0 if none",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ForumTopicInfo": {
        "comment": "Contains basic information about a forum topic",
        "parameters": {
            "message_thread_id": {
                "description": "Message thread identifier of the topic",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "name": {
                "description": "Name of the topic",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "icon": {
                "description": "Icon of the topic",
                "nullable": false,
                "type": "ForumTopicIcon",
                "tl": "ForumTopicIcon",
                "enum": 2
            },
            "creation_date": {
                "description": "Date the topic was created",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "creator_id": {
                "description": "Identifier of the creator of the topic",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_general": {
                "description": "True, if the topic is the General topic list",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_outgoing": {
                "description": "True, if the topic was created by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_closed": {
                "description": "True, if the topic is closed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_hidden": {
                "description": "True, if the topic is hidden above the topic list and closed; for General topic only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ForumTopic": {
        "comment": "Describes a forum topic",
        "parameters": {
            "info": {
                "description": "Basic information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            },
            "last_message": {
                "description": "Last message in the topic; may be null if unknown",
                "nullable": true,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "is_pinned": {
                "description": "True, if the topic is pinned in the topic list",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "unread_count": {
                "description": "Number of unread messages in the topic",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "last_read_inbox_message_id": {
                "description": "Identifier of the last read incoming message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_read_outbox_message_id": {
                "description": "Identifier of the last read outgoing message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_mention_count": {
                "description": "Number of unread messages with a mention/reply in the topic",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "unread_reaction_count": {
                "description": "Number of messages with unread reactions in the topic",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "notification_settings": {
                "description": "Notification settings for the topic",
                "nullable": false,
                "type": "ChatNotificationSettings",
                "tl": "ChatNotificationSettings",
                "enum": 2
            },
            "draft_message": {
                "description": "A draft of a message in the topic; may be null",
                "nullable": true,
                "type": "DraftMessage",
                "tl": "DraftMessage",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ForumTopics": {
        "comment": "Describes a list of forum topics",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of forum topics found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "topics": {
                "description": "List of forum topics",
                "nullable": false,
                "type": "List<ForumTopic>",
                "tl": "ForumTopic",
                "enum": 4
            },
            "next_offset_date": {
                "description": "Offset date for the next getForumTopics request",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "next_offset_message_id": {
                "description": "Offset message identifier for the next getForumTopics request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "next_offset_message_thread_id": {
                "description": "Offset message thread identifier for the next getForumTopics request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextPlain": {
        "comment": "A plain text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextBold": {
        "comment": "A bold rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextItalic": {
        "comment": "An italicized rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextUnderline": {
        "comment": "An underlined rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextStrikethrough": {
        "comment": "A strikethrough rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextFixed": {
        "comment": "A fixed-width rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextUrl": {
        "comment": "A rich text URL link",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "url": {
                "description": "URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_cached": {
                "description": "True, if the URL has cached instant view server-side",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextEmailAddress": {
        "comment": "A rich text email link",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "email_address": {
                "description": "Email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextSubscript": {
        "comment": "A subscript rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextSuperscript": {
        "comment": "A superscript rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextMarked": {
        "comment": "A marked rich text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextPhoneNumber": {
        "comment": "A rich text phone number",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "phone_number": {
                "description": "Phone number",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextIcon": {
        "comment": "A small image inside the text",
        "parameters": {
            "document": {
                "description": "The image represented as a document. The image can be in GIF, JPEG or PNG format",
                "nullable": false,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "width": {
                "description": "Width of a bounding box in which the image must be shown; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Height of a bounding box in which the image must be shown; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextReference": {
        "comment": "A reference to a richTexts object on the same web page",
        "parameters": {
            "text": {
                "description": "The text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "anchor_name": {
                "description": "The name of a richTextAnchor object, which is the first element of the target richTexts object",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "An HTTP URL, opening the reference",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextAnchor": {
        "comment": "An anchor",
        "parameters": {
            "name": {
                "description": "Anchor name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTextAnchorLink": {
        "comment": "A link to an anchor on the same web page",
        "parameters": {
            "text": {
                "description": "The link text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "anchor_name": {
                "description": "The anchor name. If the name is empty, the link must bring back to top",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "An HTTP URL, opening the anchor",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "RichTexts": {
        "comment": "A concatenation of rich texts",
        "parameters": {
            "texts": {
                "description": "Texts",
                "nullable": false,
                "type": "List<RichText>",
                "tl": "RichText",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockCaption": {
        "comment": "Contains a caption of an instant view web page block, consisting of a text and a trailing credit",
        "parameters": {
            "text": {
                "description": "Content of the caption",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "credit": {
                "description": "Block credit (like HTML tag <cite>)",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockListItem": {
        "comment": "Describes an item of a list page block",
        "parameters": {
            "label": {
                "description": "Item label",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "page_blocks": {
                "description": "Item blocks",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockHorizontalAlignmentLeft": {
        "comment": "The content must be left-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockHorizontalAlignmentCenter": {
        "comment": "The content must be center-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockHorizontalAlignmentRight": {
        "comment": "The content must be right-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockVerticalAlignmentTop": {
        "comment": "The content must be top-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockVerticalAlignmentMiddle": {
        "comment": "The content must be middle-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockVerticalAlignmentBottom": {
        "comment": "The content must be bottom-aligned",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockTableCell": {
        "comment": "Represents a cell of a table",
        "parameters": {
            "text": {
                "description": "Cell text; may be null. If the text is null, then the cell must be invisible",
                "nullable": true,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "is_header": {
                "description": "True, if it is a header cell",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "colspan": {
                "description": "The number of columns the cell spans",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "rowspan": {
                "description": "The number of rows the cell spans",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "align": {
                "description": "Horizontal cell content alignment",
                "nullable": false,
                "type": "PageBlockHorizontalAlignment",
                "tl": "PageBlockHorizontalAlignment",
                "enum": 2
            },
            "valign": {
                "description": "Vertical cell content alignment",
                "nullable": false,
                "type": "PageBlockVerticalAlignment",
                "tl": "PageBlockVerticalAlignment",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockRelatedArticle": {
        "comment": "Contains information about a related article",
        "parameters": {
            "url": {
                "description": "Related article URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Article title; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Article description; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Article photo; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "author": {
                "description": "Article author; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "publish_date": {
                "description": "Point in time (Unix timestamp) when the article was published; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockTitle": {
        "comment": "The title of a page",
        "parameters": {
            "title": {
                "description": "Title",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockSubtitle": {
        "comment": "The subtitle of a page",
        "parameters": {
            "subtitle": {
                "description": "Subtitle",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockAuthorDate": {
        "comment": "The author and publishing date of a page",
        "parameters": {
            "author": {
                "description": "Author",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "publish_date": {
                "description": "Point in time (Unix timestamp) when the article was published; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockHeader": {
        "comment": "A header",
        "parameters": {
            "header": {
                "description": "Header",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockSubheader": {
        "comment": "A subheader",
        "parameters": {
            "subheader": {
                "description": "Subheader",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockKicker": {
        "comment": "A kicker",
        "parameters": {
            "kicker": {
                "description": "Kicker",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockParagraph": {
        "comment": "A text paragraph",
        "parameters": {
            "text": {
                "description": "Paragraph text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockPreformatted": {
        "comment": "A preformatted text paragraph",
        "parameters": {
            "text": {
                "description": "Paragraph text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "language": {
                "description": "Programming language for which the text needs to be formatted",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockFooter": {
        "comment": "The footer of a page",
        "parameters": {
            "footer": {
                "description": "Footer",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockDivider": {
        "comment": "An empty block separating a page",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PageBlockAnchor": {
        "comment": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor",
        "parameters": {
            "name": {
                "description": "Name of the anchor",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockList": {
        "comment": "A list of data blocks",
        "parameters": {
            "items": {
                "description": "The items of the list",
                "nullable": false,
                "type": "List<PageBlockListItem>",
                "tl": "PageBlockListItem",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockBlockQuote": {
        "comment": "A block quote",
        "parameters": {
            "text": {
                "description": "Quote text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "credit": {
                "description": "Quote credit",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockPullQuote": {
        "comment": "A pull quote",
        "parameters": {
            "text": {
                "description": "Quote text",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "credit": {
                "description": "Quote credit",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockAnimation": {
        "comment": "An animation",
        "parameters": {
            "animation": {
                "description": "Animation file; may be null",
                "nullable": true,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "caption": {
                "description": "Animation caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            },
            "need_autoplay": {
                "description": "True, if the animation must be played automatically",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockAudio": {
        "comment": "An audio file",
        "parameters": {
            "audio": {
                "description": "Audio file; may be null",
                "nullable": true,
                "type": "Audio",
                "tl": "Audio",
                "enum": 2
            },
            "caption": {
                "description": "Audio file caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockPhoto": {
        "comment": "A photo",
        "parameters": {
            "photo": {
                "description": "Photo file; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "caption": {
                "description": "Photo caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            },
            "url": {
                "description": "URL that needs to be opened when the photo is clicked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockVideo": {
        "comment": "A video",
        "parameters": {
            "video": {
                "description": "Video file; may be null",
                "nullable": true,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "caption": {
                "description": "Video caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            },
            "need_autoplay": {
                "description": "True, if the video must be played automatically",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_looped": {
                "description": "True, if the video must be looped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockVoiceNote": {
        "comment": "A voice note",
        "parameters": {
            "voice_note": {
                "description": "Voice note; may be null",
                "nullable": true,
                "type": "VoiceNote",
                "tl": "VoiceNote",
                "enum": 2
            },
            "caption": {
                "description": "Voice note caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockCover": {
        "comment": "A page cover",
        "parameters": {
            "cover": {
                "description": "Cover",
                "nullable": false,
                "type": "PageBlock",
                "tl": "PageBlock",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockEmbedded": {
        "comment": "An embedded web page",
        "parameters": {
            "url": {
                "description": "Web page URL, if available",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "html": {
                "description": "HTML-markup of the embedded page",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "poster_photo": {
                "description": "Poster photo, if available; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "width": {
                "description": "Block width; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Block height; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "caption": {
                "description": "Block caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            },
            "is_full_width": {
                "description": "True, if the block must be full width",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_scrolling": {
                "description": "True, if scrolling needs to be allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockEmbeddedPost": {
        "comment": "An embedded post",
        "parameters": {
            "url": {
                "description": "Web page URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "author": {
                "description": "Post author",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "author_photo": {
                "description": "Post author photo; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the post was created; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "page_blocks": {
                "description": "Post content",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            },
            "caption": {
                "description": "Post caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockCollage": {
        "comment": "A collage",
        "parameters": {
            "page_blocks": {
                "description": "Collage item contents",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            },
            "caption": {
                "description": "Block caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockSlideshow": {
        "comment": "A slideshow",
        "parameters": {
            "page_blocks": {
                "description": "Slideshow item contents",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            },
            "caption": {
                "description": "Block caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockChatLink": {
        "comment": "A link to a chat",
        "parameters": {
            "title": {
                "description": "Chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Chat photo; may be null",
                "nullable": true,
                "type": "ChatPhotoInfo",
                "tl": "ChatPhotoInfo",
                "enum": 2
            },
            "username": {
                "description": "Chat username by which all other information about the chat can be resolved",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockTable": {
        "comment": "A table",
        "parameters": {
            "caption": {
                "description": "Table caption",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "cells": {
                "description": "Table cells",
                "nullable": false,
                "type": "List<PageBlockTableCell>",
                "tl": "PageBlockTableCell",
                "enum": 4
            },
            "is_bordered": {
                "description": "True, if the table is bordered",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_striped": {
                "description": "True, if the table is striped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockDetails": {
        "comment": "A collapsible block",
        "parameters": {
            "header": {
                "description": "Always visible heading for the block",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "page_blocks": {
                "description": "Block contents",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            },
            "is_open": {
                "description": "True, if the block is open by default",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockRelatedArticles": {
        "comment": "Related articles",
        "parameters": {
            "header": {
                "description": "Block header",
                "nullable": false,
                "type": "RichText",
                "tl": "RichText",
                "enum": 2
            },
            "articles": {
                "description": "List of related articles",
                "nullable": false,
                "type": "List<PageBlockRelatedArticle>",
                "tl": "PageBlockRelatedArticle",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PageBlockMap": {
        "comment": "A map",
        "parameters": {
            "location": {
                "description": "Location of the map center",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "zoom": {
                "description": "Map zoom level",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Map width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Map height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "caption": {
                "description": "Block caption",
                "nullable": false,
                "type": "PageBlockCaption",
                "tl": "PageBlockCaption",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "WebPageInstantView": {
        "comment": "Describes an instant view page for a web page",
        "parameters": {
            "page_blocks": {
                "description": "Content of the web page",
                "nullable": false,
                "type": "List<PageBlock>",
                "tl": "PageBlock",
                "enum": 4
            },
            "view_count": {
                "description": "Number of the instant view views; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "version": {
                "description": "Version of the instant view; currently, can be 1 or 2",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_rtl": {
                "description": "True, if the instant view must be shown from right to left",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_full": {
                "description": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "feedback_link": {
                "description": "An internal link to be opened to leave feedback about the instant view",
                "nullable": false,
                "type": "InternalLinkType",
                "tl": "InternalLinkType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "WebPage": {
        "comment": "Describes a web page preview",
        "parameters": {
            "url": {
                "description": "Original URL of the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "display_url": {
                "description": "URL to display",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "site_name": {
                "description": "Short name of the site (e.g., Google Docs, App Store)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the content",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Description of the content",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "photo": {
                "description": "Image representing the content; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "embed_url": {
                "description": "URL to show in the embedded preview",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "embed_type": {
                "description": "MIME type of the embedded preview, (e.g., text/html or video/mp4)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "embed_width": {
                "description": "Width of the embedded preview",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "embed_height": {
                "description": "Height of the embedded preview",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "duration": {
                "description": "Duration of the content, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "author": {
                "description": "Author of the content",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "animation": {
                "description": "Preview of the content as an animation, if available; may be null",
                "nullable": true,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "audio": {
                "description": "Preview of the content as an audio file, if available; may be null",
                "nullable": true,
                "type": "Audio",
                "tl": "Audio",
                "enum": 2
            },
            "document": {
                "description": "Preview of the content as a document, if available; may be null",
                "nullable": true,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "sticker": {
                "description": "Preview of the content as a sticker for small WEBP files, if available; may be null",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "video": {
                "description": "Preview of the content as a video, if available; may be null",
                "nullable": true,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "video_note": {
                "description": "Preview of the content as a video note, if available; may be null",
                "nullable": true,
                "type": "VideoNote",
                "tl": "VideoNote",
                "enum": 2
            },
            "voice_note": {
                "description": "Preview of the content as a voice note, if available; may be null",
                "nullable": true,
                "type": "VoiceNote",
                "tl": "VoiceNote",
                "enum": 2
            },
            "instant_view_version": {
                "description": "Version of web page instant view (currently, can be 1 or 2); 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CountryInfo": {
        "comment": "Contains information about a country",
        "parameters": {
            "country_code": {
                "description": "A two-letter ISO 3166-1 alpha-2 country code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Native name of the country",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "english_name": {
                "description": "English name of the country",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_hidden": {
                "description": "True, if the country must be hidden from the list of all countries",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "calling_codes": {
                "description": "List of country calling codes",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "Countries": {
        "comment": "Contains information about countries",
        "parameters": {
            "countries": {
                "description": "The list of countries",
                "nullable": false,
                "type": "List<CountryInfo>",
                "tl": "CountryInfo",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PhoneNumberInfo": {
        "comment": "Contains information about a phone number",
        "parameters": {
            "country": {
                "description": "Information about the country to which the phone number belongs; may be null",
                "nullable": true,
                "type": "CountryInfo",
                "tl": "CountryInfo",
                "enum": 2
            },
            "country_calling_code": {
                "description": "The part of the phone number denoting country calling code or its part",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "formatted_phone_number": {
                "description": "The phone number without country calling code formatted accordingly to local rules. Expected digits are returned as '-', but even more digits might be entered by the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_anonymous": {
                "description": "True, if the phone number was bought on Fragment and isn't tied to a SIM card",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BankCardActionOpenUrl": {
        "comment": "Describes an action associated with a bank card number",
        "parameters": {
            "text": {
                "description": "Action text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "The URL to be opened",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BankCardInfo": {
        "comment": "Information about a bank card",
        "parameters": {
            "title": {
                "description": "Title of the bank card description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "actions": {
                "description": "Actions that can be done with the bank card number",
                "nullable": false,
                "type": "List<BankCardActionOpenUrl>",
                "tl": "BankCardActionOpenUrl",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Address": {
        "comment": "Describes an address",
        "parameters": {
            "country_code": {
                "description": "A two-letter ISO 3166-1 alpha-2 country code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "state": {
                "description": "State, if applicable",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "city": {
                "description": "City",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "street_line1": {
                "description": "First line of the address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "street_line2": {
                "description": "Second line of the address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "postal_code": {
                "description": "Address postal code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ThemeParameters": {
        "comment": "Contains parameters of the application theme",
        "parameters": {
            "background_color": {
                "description": "A color of the background in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "secondary_background_color": {
                "description": "A secondary color for the background in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "text_color": {
                "description": "A color of text in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "hint_color": {
                "description": "A color of hints in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "link_color": {
                "description": "A color of links in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "button_color": {
                "description": "A color of the buttons in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "button_text_color": {
                "description": "A color of text on the buttons in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LabeledPricePart": {
        "comment": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\")",
        "parameters": {
            "label": {
                "description": "Label for this portion of the product price",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "amount": {
                "description": "Currency amount in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Invoice": {
        "comment": "Product invoice",
        "parameters": {
            "currency": {
                "description": "ISO 4217 currency code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "price_parts": {
                "description": "A list of objects used to calculate the total price of the product",
                "nullable": false,
                "type": "List<LabeledPricePart>",
                "tl": "LabeledPricePart",
                "enum": 4
            },
            "max_tip_amount": {
                "description": "The maximum allowed amount of tip in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "suggested_tip_amounts": {
                "description": "Suggested amounts of tip in the smallest units of the currency",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "recurring_payment_terms_of_service_url": {
                "description": "An HTTP URL with terms of service for recurring payments. If non-empty, the invoice payment will result in recurring payments and the user must accept the terms of service before allowed to pay",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_test": {
                "description": "True, if the payment is a test payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_name": {
                "description": "True, if the user's name is needed for payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_phone_number": {
                "description": "True, if the user's phone number is needed for payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_email_address": {
                "description": "True, if the user's email address is needed for payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_shipping_address": {
                "description": "True, if the user's shipping address is needed for payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "send_phone_number_to_provider": {
                "description": "True, if the user's phone number will be sent to the provider",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "send_email_address_to_provider": {
                "description": "True, if the user's email address will be sent to the provider",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_flexible": {
                "description": "True, if the total price depends on the shipping method",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "OrderInfo": {
        "comment": "Order information",
        "parameters": {
            "name": {
                "description": "Name of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "phone_number": {
                "description": "Phone number of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "email_address": {
                "description": "Email address of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "shipping_address": {
                "description": "Shipping address for this order; may be null",
                "nullable": true,
                "type": "Address",
                "tl": "Address",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ShippingOption": {
        "comment": "One shipping option",
        "parameters": {
            "id": {
                "description": "Shipping option identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Option title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "price_parts": {
                "description": "A list of objects used to calculate the total shipping costs",
                "nullable": false,
                "type": "List<LabeledPricePart>",
                "tl": "LabeledPricePart",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "SavedCredentials": {
        "comment": "Contains information about saved payment credentials",
        "parameters": {
            "id": {
                "description": "Unique identifier of the saved credentials",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the saved credentials",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputCredentialsSaved": {
        "comment": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password",
        "parameters": {
            "saved_credentials_id": {
                "description": "Identifier of the saved credentials",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputCredentialsNew": {
        "comment": "Applies if a user enters new credentials on a payment provider website",
        "parameters": {
            "data": {
                "description": "JSON-encoded data with the credential identifier from the payment provider",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "allow_save": {
                "description": "True, if the credential identifier can be saved on the server side",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputCredentialsApplePay": {
        "comment": "Applies if a user enters new credentials using Apple Pay",
        "parameters": {
            "data": {
                "description": "JSON-encoded data with the credential identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputCredentialsGooglePay": {
        "comment": "Applies if a user enters new credentials using Google Pay",
        "parameters": {
            "data": {
                "description": "JSON-encoded data with the credential identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentProviderSmartGlocal": {
        "comment": "Smart Glocal payment provider",
        "parameters": {
            "public_token": {
                "description": "Public payment token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentProviderStripe": {
        "comment": "Stripe payment provider",
        "parameters": {
            "publishable_key": {
                "description": "Stripe API publishable key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "need_country": {
                "description": "True, if the user country must be provided",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_postal_code": {
                "description": "True, if the user ZIP/postal code must be provided",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_cardholder_name": {
                "description": "True, if the cardholder name must be provided",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentProviderOther": {
        "comment": "Some other payment provider, for which a web payment form must be shown",
        "parameters": {
            "url": {
                "description": "Payment form URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentOption": {
        "comment": "Describes an additional payment option",
        "parameters": {
            "title": {
                "description": "Title for the payment option",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "Payment form URL to be opened in a web view",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentForm": {
        "comment": "Contains information about an invoice payment form",
        "parameters": {
            "id": {
                "description": "The payment form identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "invoice": {
                "description": "Full information about the invoice",
                "nullable": false,
                "type": "Invoice",
                "tl": "Invoice",
                "enum": 2
            },
            "seller_bot_user_id": {
                "description": "User identifier of the seller bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "payment_provider_user_id": {
                "description": "User identifier of the payment provider bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "payment_provider": {
                "description": "Information about the payment provider",
                "nullable": false,
                "type": "PaymentProvider",
                "tl": "PaymentProvider",
                "enum": 2
            },
            "additional_payment_options": {
                "description": "The list of additional payment options",
                "nullable": false,
                "type": "List<PaymentOption>",
                "tl": "PaymentOption",
                "enum": 4
            },
            "saved_order_info": {
                "description": "Saved server-side order information; may be null",
                "nullable": true,
                "type": "OrderInfo",
                "tl": "OrderInfo",
                "enum": 2
            },
            "saved_credentials": {
                "description": "The list of saved payment credentials",
                "nullable": false,
                "type": "List<SavedCredentials>",
                "tl": "SavedCredentials",
                "enum": 4
            },
            "can_save_credentials": {
                "description": "True, if the user can choose to save credentials",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_password": {
                "description": "True, if the user will be able to save credentials, if sets up a 2-step verification password",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "product_title": {
                "description": "Product title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "product_description": {
                "description": "Product description",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "product_photo": {
                "description": "Product photo; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ValidatedOrderInfo": {
        "comment": "Contains a temporary identifier of validated order information, which is stored for one hour, and the available shipping options",
        "parameters": {
            "order_info_id": {
                "description": "Temporary identifier of the order information",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "shipping_options": {
                "description": "Available shipping options",
                "nullable": false,
                "type": "List<ShippingOption>",
                "tl": "ShippingOption",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentResult": {
        "comment": "Contains the result of a payment request",
        "parameters": {
            "success": {
                "description": "True, if the payment request was successful; otherwise, the verification_url will be non-empty",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "verification_url": {
                "description": "URL for additional payment credentials verification",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PaymentReceipt": {
        "comment": "Contains information about a successful payment",
        "parameters": {
            "title": {
                "description": "Product title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Product description",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "photo": {
                "description": "Product photo; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the payment was made",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "seller_bot_user_id": {
                "description": "User identifier of the seller bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "payment_provider_user_id": {
                "description": "User identifier of the payment provider bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invoice": {
                "description": "Information about the invoice",
                "nullable": false,
                "type": "Invoice",
                "tl": "Invoice",
                "enum": 2
            },
            "order_info": {
                "description": "Order information; may be null",
                "nullable": true,
                "type": "OrderInfo",
                "tl": "OrderInfo",
                "enum": 2
            },
            "shipping_option": {
                "description": "Chosen shipping option; may be null",
                "nullable": true,
                "type": "ShippingOption",
                "tl": "ShippingOption",
                "enum": 2
            },
            "credentials_title": {
                "description": "Title of the saved credentials chosen by the buyer",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "tip_amount": {
                "description": "The amount of tip chosen by the buyer in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInvoiceMessage": {
        "comment": "An invoice from a message of the type messageInvoice",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier of the message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInvoiceName": {
        "comment": "An invoice from a link of the type internalLinkTypeInvoice",
        "parameters": {
            "name": {
                "description": "Name of the invoice",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExtendedMediaPreview": {
        "comment": "The media is hidden until the invoice is paid",
        "parameters": {
            "width": {
                "description": "Media width; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Media height; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "duration": {
                "description": "Media duration; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "minithumbnail": {
                "description": "Media minithumbnail; may be null",
                "nullable": true,
                "type": "Minithumbnail",
                "tl": "Minithumbnail",
                "enum": 2
            },
            "caption": {
                "description": "Media caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExtendedMediaPhoto": {
        "comment": "The media is a photo",
        "parameters": {
            "photo": {
                "description": "The photo",
                "nullable": false,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "caption": {
                "description": "Photo caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExtendedMediaVideo": {
        "comment": "The media is a video",
        "parameters": {
            "video": {
                "description": "The video",
                "nullable": false,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "caption": {
                "description": "Photo caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExtendedMediaUnsupported": {
        "comment": "The media is unuspported",
        "parameters": {
            "caption": {
                "description": "Media caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "DatedFile": {
        "comment": "File with the date it was uploaded",
        "parameters": {
            "file": {
                "description": "The file",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the file was uploaded",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementTypePersonalDetails": {
        "comment": "A Telegram Passport element containing the user's personal details",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypePassport": {
        "comment": "A Telegram Passport element containing the user's passport",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeDriverLicense": {
        "comment": "A Telegram Passport element containing the user's driver license",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeIdentityCard": {
        "comment": "A Telegram Passport element containing the user's identity card",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeInternalPassport": {
        "comment": "A Telegram Passport element containing the user's internal passport",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeAddress": {
        "comment": "A Telegram Passport element containing the user's address",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeUtilityBill": {
        "comment": "A Telegram Passport element containing the user's utility bill",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeBankStatement": {
        "comment": "A Telegram Passport element containing the user's bank statement",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeRentalAgreement": {
        "comment": "A Telegram Passport element containing the user's rental agreement",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypePassportRegistration": {
        "comment": "A Telegram Passport element containing the registration page of the user's passport",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeTemporaryRegistration": {
        "comment": "A Telegram Passport element containing the user's temporary registration",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypePhoneNumber": {
        "comment": "A Telegram Passport element containing the user's phone number",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementTypeEmailAddress": {
        "comment": "A Telegram Passport element containing the user's email address",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "Date": {
        "comment": "Represents a date according to the Gregorian calendar",
        "parameters": {
            "day": {
                "description": "Day of the month; 1-31",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "month": {
                "description": "Month; 1-12",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "year": {
                "description": "Year; 1-9999",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PersonalDetails": {
        "comment": "Contains the user's personal details",
        "parameters": {
            "first_name": {
                "description": "First name of the user written in English; 1-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "middle_name": {
                "description": "Middle name of the user written in English; 0-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "last_name": {
                "description": "Last name of the user written in English; 1-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "native_first_name": {
                "description": "Native first name of the user; 1-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "native_middle_name": {
                "description": "Native middle name of the user; 0-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "native_last_name": {
                "description": "Native last name of the user; 1-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "birthdate": {
                "description": "Birthdate of the user",
                "nullable": false,
                "type": "Date",
                "tl": "Date",
                "enum": 2
            },
            "gender": {
                "description": "Gender of the user, \"male\" or \"female\"",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "country_code": {
                "description": "A two-letter ISO 3166-1 alpha-2 country code of the user's country",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "residence_country_code": {
                "description": "A two-letter ISO 3166-1 alpha-2 country code of the user's residence country",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "IdentityDocument": {
        "comment": "An identity document",
        "parameters": {
            "number": {
                "description": "Document number; 1-24 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expiry_date": {
                "description": "Document expiry date; may be null if not applicable",
                "nullable": true,
                "type": "Date",
                "tl": "Date",
                "enum": 2
            },
            "front_side": {
                "description": "Front side of the document",
                "nullable": false,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "reverse_side": {
                "description": "Reverse side of the document; only for driver license and identity card; may be null",
                "nullable": true,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "selfie": {
                "description": "Selfie with the document; may be null",
                "nullable": true,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "translation": {
                "description": "List of files containing a certified English translation of the document",
                "nullable": false,
                "type": "List<DatedFile>",
                "tl": "DatedFile",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputIdentityDocument": {
        "comment": "An identity document to be saved to Telegram Passport",
        "parameters": {
            "number": {
                "description": "Document number; 1-24 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expiry_date": {
                "description": "Document expiry date; pass null if not applicable",
                "nullable": true,
                "type": "Date",
                "tl": "Date",
                "enum": 2
            },
            "front_side": {
                "description": "Front side of the document",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "reverse_side": {
                "description": "Reverse side of the document; only for driver license and identity card; pass null otherwise",
                "nullable": true,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "selfie": {
                "description": "Selfie with the document; pass null if unavailable",
                "nullable": true,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "translation": {
                "description": "List of files containing a certified English translation of the document",
                "nullable": false,
                "type": "List<InputFile>",
                "tl": "InputFile",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PersonalDocument": {
        "comment": "A personal document, containing some information about a user",
        "parameters": {
            "files": {
                "description": "List of files containing the pages of the document",
                "nullable": false,
                "type": "List<DatedFile>",
                "tl": "DatedFile",
                "enum": 4
            },
            "translation": {
                "description": "List of files containing a certified English translation of the document",
                "nullable": false,
                "type": "List<DatedFile>",
                "tl": "DatedFile",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPersonalDocument": {
        "comment": "A personal document to be saved to Telegram Passport",
        "parameters": {
            "files": {
                "description": "List of files containing the pages of the document",
                "nullable": false,
                "type": "List<InputFile>",
                "tl": "InputFile",
                "enum": 4
            },
            "translation": {
                "description": "List of files containing a certified English translation of the document",
                "nullable": false,
                "type": "List<InputFile>",
                "tl": "InputFile",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementPersonalDetails": {
        "comment": "A Telegram Passport element containing the user's personal details",
        "parameters": {
            "personal_details": {
                "description": "Personal details of the user",
                "nullable": false,
                "type": "PersonalDetails",
                "tl": "PersonalDetails",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementPassport": {
        "comment": "A Telegram Passport element containing the user's passport",
        "parameters": {
            "passport": {
                "description": "Passport",
                "nullable": false,
                "type": "IdentityDocument",
                "tl": "IdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementDriverLicense": {
        "comment": "A Telegram Passport element containing the user's driver license",
        "parameters": {
            "driver_license": {
                "description": "Driver license",
                "nullable": false,
                "type": "IdentityDocument",
                "tl": "IdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementIdentityCard": {
        "comment": "A Telegram Passport element containing the user's identity card",
        "parameters": {
            "identity_card": {
                "description": "Identity card",
                "nullable": false,
                "type": "IdentityDocument",
                "tl": "IdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementInternalPassport": {
        "comment": "A Telegram Passport element containing the user's internal passport",
        "parameters": {
            "internal_passport": {
                "description": "Internal passport",
                "nullable": false,
                "type": "IdentityDocument",
                "tl": "IdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementAddress": {
        "comment": "A Telegram Passport element containing the user's address",
        "parameters": {
            "address": {
                "description": "Address",
                "nullable": false,
                "type": "Address",
                "tl": "Address",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementUtilityBill": {
        "comment": "A Telegram Passport element containing the user's utility bill",
        "parameters": {
            "utility_bill": {
                "description": "Utility bill",
                "nullable": false,
                "type": "PersonalDocument",
                "tl": "PersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementBankStatement": {
        "comment": "A Telegram Passport element containing the user's bank statement",
        "parameters": {
            "bank_statement": {
                "description": "Bank statement",
                "nullable": false,
                "type": "PersonalDocument",
                "tl": "PersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementRentalAgreement": {
        "comment": "A Telegram Passport element containing the user's rental agreement",
        "parameters": {
            "rental_agreement": {
                "description": "Rental agreement",
                "nullable": false,
                "type": "PersonalDocument",
                "tl": "PersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementPassportRegistration": {
        "comment": "A Telegram Passport element containing the user's passport registration pages",
        "parameters": {
            "passport_registration": {
                "description": "Passport registration pages",
                "nullable": false,
                "type": "PersonalDocument",
                "tl": "PersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementTemporaryRegistration": {
        "comment": "A Telegram Passport element containing the user's temporary registration",
        "parameters": {
            "temporary_registration": {
                "description": "Temporary registration",
                "nullable": false,
                "type": "PersonalDocument",
                "tl": "PersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementPhoneNumber": {
        "comment": "A Telegram Passport element containing the user's phone number",
        "parameters": {
            "phone_number": {
                "description": "Phone number",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementEmailAddress": {
        "comment": "A Telegram Passport element containing the user's email address",
        "parameters": {
            "email_address": {
                "description": "Email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementPersonalDetails": {
        "comment": "A Telegram Passport element to be saved containing the user's personal details",
        "parameters": {
            "personal_details": {
                "description": "Personal details of the user",
                "nullable": false,
                "type": "PersonalDetails",
                "tl": "PersonalDetails",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementPassport": {
        "comment": "A Telegram Passport element to be saved containing the user's passport",
        "parameters": {
            "passport": {
                "description": "The passport to be saved",
                "nullable": false,
                "type": "InputIdentityDocument",
                "tl": "InputIdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementDriverLicense": {
        "comment": "A Telegram Passport element to be saved containing the user's driver license",
        "parameters": {
            "driver_license": {
                "description": "The driver license to be saved",
                "nullable": false,
                "type": "InputIdentityDocument",
                "tl": "InputIdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementIdentityCard": {
        "comment": "A Telegram Passport element to be saved containing the user's identity card",
        "parameters": {
            "identity_card": {
                "description": "The identity card to be saved",
                "nullable": false,
                "type": "InputIdentityDocument",
                "tl": "InputIdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementInternalPassport": {
        "comment": "A Telegram Passport element to be saved containing the user's internal passport",
        "parameters": {
            "internal_passport": {
                "description": "The internal passport to be saved",
                "nullable": false,
                "type": "InputIdentityDocument",
                "tl": "InputIdentityDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementAddress": {
        "comment": "A Telegram Passport element to be saved containing the user's address",
        "parameters": {
            "address": {
                "description": "The address to be saved",
                "nullable": false,
                "type": "Address",
                "tl": "Address",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementUtilityBill": {
        "comment": "A Telegram Passport element to be saved containing the user's utility bill",
        "parameters": {
            "utility_bill": {
                "description": "The utility bill to be saved",
                "nullable": false,
                "type": "InputPersonalDocument",
                "tl": "InputPersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementBankStatement": {
        "comment": "A Telegram Passport element to be saved containing the user's bank statement",
        "parameters": {
            "bank_statement": {
                "description": "The bank statement to be saved",
                "nullable": false,
                "type": "InputPersonalDocument",
                "tl": "InputPersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementRentalAgreement": {
        "comment": "A Telegram Passport element to be saved containing the user's rental agreement",
        "parameters": {
            "rental_agreement": {
                "description": "The rental agreement to be saved",
                "nullable": false,
                "type": "InputPersonalDocument",
                "tl": "InputPersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementPassportRegistration": {
        "comment": "A Telegram Passport element to be saved containing the user's passport registration",
        "parameters": {
            "passport_registration": {
                "description": "The passport registration page to be saved",
                "nullable": false,
                "type": "InputPersonalDocument",
                "tl": "InputPersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementTemporaryRegistration": {
        "comment": "A Telegram Passport element to be saved containing the user's temporary registration",
        "parameters": {
            "temporary_registration": {
                "description": "The temporary registration document to be saved",
                "nullable": false,
                "type": "InputPersonalDocument",
                "tl": "InputPersonalDocument",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementPhoneNumber": {
        "comment": "A Telegram Passport element to be saved containing the user's phone number",
        "parameters": {
            "phone_number": {
                "description": "The phone number to be saved",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementEmailAddress": {
        "comment": "A Telegram Passport element to be saved containing the user's email address",
        "parameters": {
            "email_address": {
                "description": "The email address to be saved",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElements": {
        "comment": "Contains information about saved Telegram Passport elements",
        "parameters": {
            "elements": {
                "description": "Telegram Passport elements",
                "nullable": false,
                "type": "List<PassportElement>",
                "tl": "PassportElement",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceUnspecified": {
        "comment": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceDataField": {
        "comment": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes",
        "parameters": {
            "field_name": {
                "description": "Field name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceFrontSide": {
        "comment": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceReverseSide": {
        "comment": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceSelfie": {
        "comment": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceTranslationFile": {
        "comment": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes",
        "parameters": {
            "file_index": {
                "description": "Index of a file with the error",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceTranslationFiles": {
        "comment": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceFile": {
        "comment": "The file contains an error. The error will be considered resolved when the file changes",
        "parameters": {
            "file_index": {
                "description": "Index of a file with the error",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementErrorSourceFiles": {
        "comment": "The list of attached files contains an error. The error will be considered resolved when the list of files changes",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PassportElementError": {
        "comment": "Contains the description of an error in a Telegram Passport element",
        "parameters": {
            "type": {
                "description": "Type of the Telegram Passport element which has the error",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            },
            "message": {
                "description": "Error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "source": {
                "description": "Error source",
                "nullable": false,
                "type": "PassportElementErrorSource",
                "tl": "PassportElementErrorSource",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportSuitableElement": {
        "comment": "Contains information about a Telegram Passport element that was requested by a service",
        "parameters": {
            "type": {
                "description": "Type of the element",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            },
            "is_selfie_required": {
                "description": "True, if a selfie is required with the identity document",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_translation_required": {
                "description": "True, if a certified English translation is required with the document",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_native_name_required": {
                "description": "True, if personal details must include the user's name in the language of their country of residence",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportRequiredElement": {
        "comment": "Contains a description of the required Telegram Passport element that was requested by a service",
        "parameters": {
            "suitable_elements": {
                "description": "List of Telegram Passport elements any of which is enough to provide",
                "nullable": false,
                "type": "List<PassportSuitableElement>",
                "tl": "PassportSuitableElement",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportAuthorizationForm": {
        "comment": "Contains information about a Telegram Passport authorization form that was requested",
        "parameters": {
            "id": {
                "description": "Unique identifier of the authorization form",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "required_elements": {
                "description": "Telegram Passport elements that must be provided to complete the form",
                "nullable": false,
                "type": "List<PassportRequiredElement>",
                "tl": "PassportRequiredElement",
                "enum": 4
            },
            "privacy_policy_url": {
                "description": "URL for the privacy policy of the service; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PassportElementsWithErrors": {
        "comment": "Contains information about a Telegram Passport elements and corresponding errors",
        "parameters": {
            "elements": {
                "description": "Telegram Passport elements",
                "nullable": false,
                "type": "List<PassportElement>",
                "tl": "PassportElement",
                "enum": 4
            },
            "errors": {
                "description": "Errors in the elements that are already available",
                "nullable": false,
                "type": "List<PassportElementError>",
                "tl": "PassportElementError",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "EncryptedCredentials": {
        "comment": "Contains encrypted Telegram Passport data credentials",
        "parameters": {
            "data": {
                "description": "The encrypted credentials",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "hash": {
                "description": "The decrypted data hash",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "secret": {
                "description": "Secret for data decryption, encrypted with the service's public key",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EncryptedPassportElement": {
        "comment": "Contains information about an encrypted Telegram Passport element; for bots only",
        "parameters": {
            "type": {
                "description": "Type of Telegram Passport element",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            },
            "data": {
                "description": "Encrypted JSON-encoded data about the user",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "front_side": {
                "description": "The front side of an identity document",
                "nullable": false,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "reverse_side": {
                "description": "The reverse side of an identity document; may be null",
                "nullable": true,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "selfie": {
                "description": "Selfie with the document; may be null",
                "nullable": true,
                "type": "DatedFile",
                "tl": "DatedFile",
                "enum": 2
            },
            "translation": {
                "description": "List of files containing a certified English translation of the document",
                "nullable": false,
                "type": "List<DatedFile>",
                "tl": "DatedFile",
                "enum": 4
            },
            "files": {
                "description": "List of attached files",
                "nullable": false,
                "type": "List<DatedFile>",
                "tl": "DatedFile",
                "enum": 4
            },
            "value": {
                "description": "Unencrypted data, phone number or email address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "hash": {
                "description": "Hash of the entire element",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceUnspecified": {
        "comment": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
        "parameters": {
            "element_hash": {
                "description": "Current hash of the entire element",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceDataField": {
        "comment": "A data field contains an error. The error is considered resolved when the field's value changes",
        "parameters": {
            "field_name": {
                "description": "Field name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "data_hash": {
                "description": "Current data hash",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceFrontSide": {
        "comment": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes",
        "parameters": {
            "file_hash": {
                "description": "Current hash of the file containing the front side",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceReverseSide": {
        "comment": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes",
        "parameters": {
            "file_hash": {
                "description": "Current hash of the file containing the reverse side",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceSelfie": {
        "comment": "The selfie contains an error. The error is considered resolved when the file with the selfie changes",
        "parameters": {
            "file_hash": {
                "description": "Current hash of the file containing the selfie",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceTranslationFile": {
        "comment": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes",
        "parameters": {
            "file_hash": {
                "description": "Current hash of the file containing the translation",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceTranslationFiles": {
        "comment": "The translation of the document contains an error. The error is considered resolved when the list of files changes",
        "parameters": {
            "file_hashes": {
                "description": "Current hashes of all files with the translation",
                "nullable": false,
                "type": "List<String>",
                "tl": "bytes",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceFile": {
        "comment": "The file contains an error. The error is considered resolved when the file changes",
        "parameters": {
            "file_hash": {
                "description": "Current hash of the file which has the error",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementErrorSourceFiles": {
        "comment": "The list of attached files contains an error. The error is considered resolved when the file list changes",
        "parameters": {
            "file_hashes": {
                "description": "Current hashes of all attached files",
                "nullable": false,
                "type": "List<String>",
                "tl": "bytes",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputPassportElementError": {
        "comment": "Contains the description of an error in a Telegram Passport element; for bots only",
        "parameters": {
            "type": {
                "description": "Type of Telegram Passport element that has the error",
                "nullable": false,
                "type": "PassportElementType",
                "tl": "PassportElementType",
                "enum": 2
            },
            "message": {
                "description": "Error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "source": {
                "description": "Error source",
                "nullable": false,
                "type": "InputPassportElementErrorSource",
                "tl": "InputPassportElementErrorSource",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageText": {
        "comment": "A text message",
        "parameters": {
            "text": {
                "description": "Text of the message",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "web_page": {
                "description": "A preview of the web page that's mentioned in the text; may be null",
                "nullable": true,
                "type": "WebPage",
                "tl": "WebPage",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageAnimation": {
        "comment": "An animation message (GIF-style).",
        "parameters": {
            "animation": {
                "description": "The animation description",
                "nullable": false,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "caption": {
                "description": "Animation caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "has_spoiler": {
                "description": "True, if the animation preview must be covered by a spoiler animation",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the animation thumbnail must be blurred and the animation must be shown only while tapped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageAudio": {
        "comment": "An audio message",
        "parameters": {
            "audio": {
                "description": "The audio description",
                "nullable": false,
                "type": "Audio",
                "tl": "Audio",
                "enum": 2
            },
            "caption": {
                "description": "Audio caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageDocument": {
        "comment": "A document message (general file)",
        "parameters": {
            "document": {
                "description": "The document description",
                "nullable": false,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "caption": {
                "description": "Document caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePhoto": {
        "comment": "A photo message",
        "parameters": {
            "photo": {
                "description": "The photo",
                "nullable": false,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "caption": {
                "description": "Photo caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "has_spoiler": {
                "description": "True, if the photo preview must be covered by a spoiler animation",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the photo must be blurred and must be shown only while tapped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExpiredPhoto": {
        "comment": "A self-destructed photo message",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageSticker": {
        "comment": "A sticker message",
        "parameters": {
            "sticker": {
                "description": "The sticker description",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "is_premium": {
                "description": "True, if premium animation of the sticker must be played",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVideo": {
        "comment": "A video message",
        "parameters": {
            "video": {
                "description": "The video description",
                "nullable": false,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "caption": {
                "description": "Video caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "has_spoiler": {
                "description": "True, if the video preview must be covered by a spoiler animation",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the video thumbnail must be blurred and the video must be shown only while tapped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageExpiredVideo": {
        "comment": "A self-destructed video message",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageVideoNote": {
        "comment": "A video note message",
        "parameters": {
            "video_note": {
                "description": "The video note description",
                "nullable": false,
                "type": "VideoNote",
                "tl": "VideoNote",
                "enum": 2
            },
            "is_viewed": {
                "description": "True, if at least one of the recipients has viewed the video note",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the video note thumbnail must be blurred and the video note must be shown only while tapped",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVoiceNote": {
        "comment": "A voice note message",
        "parameters": {
            "voice_note": {
                "description": "The voice note description",
                "nullable": false,
                "type": "VoiceNote",
                "tl": "VoiceNote",
                "enum": 2
            },
            "caption": {
                "description": "Voice note caption",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "is_listened": {
                "description": "True, if at least one of the recipients has listened to the voice note",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageLocation": {
        "comment": "A message with a location",
        "parameters": {
            "location": {
                "description": "The location description",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "live_period": {
                "description": "Time relative to the message send date, for which the location can be updated, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "expires_in": {
                "description": "Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "heading": {
                "description": "For live locations, a direction in which the location moves, in degrees; 1-360. If 0 the direction is unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "proximity_alert_radius": {
                "description": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). 0 if the notification is disabled. Available only to the message sender",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVenue": {
        "comment": "A message with information about a venue",
        "parameters": {
            "venue": {
                "description": "The venue description",
                "nullable": false,
                "type": "Venue",
                "tl": "Venue",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageContact": {
        "comment": "A message with a user contact",
        "parameters": {
            "contact": {
                "description": "The contact description",
                "nullable": false,
                "type": "Contact",
                "tl": "Contact",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageAnimatedEmoji": {
        "comment": "A message with an animated emoji",
        "parameters": {
            "animated_emoji": {
                "description": "The animated emoji",
                "nullable": false,
                "type": "AnimatedEmoji",
                "tl": "AnimatedEmoji",
                "enum": 2
            },
            "emoji": {
                "description": "The corresponding emoji",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageDice": {
        "comment": "A dice message. The dice value is randomly generated by the server",
        "parameters": {
            "initial_state": {
                "description": "The animated stickers with the initial dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known",
                "nullable": true,
                "type": "DiceStickers",
                "tl": "DiceStickers",
                "enum": 2
            },
            "final_state": {
                "description": "The animated stickers with the final dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known",
                "nullable": true,
                "type": "DiceStickers",
                "tl": "DiceStickers",
                "enum": 2
            },
            "emoji": {
                "description": "Emoji on which the dice throw animation is based",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "value": {
                "description": "The dice value. If the value is 0, the dice don't have final state yet",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "success_animation_frame_number": {
                "description": "Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageGame": {
        "comment": "A message with a game",
        "parameters": {
            "game": {
                "description": "The game description",
                "nullable": false,
                "type": "Game",
                "tl": "Game",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePoll": {
        "comment": "A message with a poll",
        "parameters": {
            "poll": {
                "description": "The poll description",
                "nullable": false,
                "type": "Poll",
                "tl": "Poll",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageInvoice": {
        "comment": "A message with an invoice from a bot",
        "parameters": {
            "title": {
                "description": "Product title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Product description",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "photo": {
                "description": "Product photo; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "currency": {
                "description": "Currency for the product price",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "total_amount": {
                "description": "Product total price in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "start_parameter": {
                "description": "Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_test": {
                "description": "True, if the invoice is a test invoice",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_shipping_address": {
                "description": "True, if the shipping address must be specified",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "receipt_message_id": {
                "description": "The identifier of the message with the receipt, after the product has been purchased",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "extended_media": {
                "description": "Extended media attached to the invoice; may be null",
                "nullable": true,
                "type": "MessageExtendedMedia",
                "tl": "MessageExtendedMedia",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageCall": {
        "comment": "A message with information about an ended call",
        "parameters": {
            "is_video": {
                "description": "True, if the call was a video call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "discard_reason": {
                "description": "Reason why the call was discarded",
                "nullable": false,
                "type": "CallDiscardReason",
                "tl": "CallDiscardReason",
                "enum": 2
            },
            "duration": {
                "description": "Call duration, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVideoChatScheduled": {
        "comment": "A new video chat was scheduled",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of the video chat. The video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "start_date": {
                "description": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVideoChatStarted": {
        "comment": "A newly created video chat",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of the video chat. The video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageVideoChatEnded": {
        "comment": "A message with information about an ended video chat",
        "parameters": {
            "duration": {
                "description": "Call duration, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageInviteVideoChatParticipants": {
        "comment": "A message with information about an invite to a video chat",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of the video chat. The video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_ids": {
                "description": "Invited user identifiers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageBasicGroupChatCreate": {
        "comment": "A newly created basic group",
        "parameters": {
            "title": {
                "description": "Title of the basic group",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "member_user_ids": {
                "description": "User identifiers of members in the basic group",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSupergroupChatCreate": {
        "comment": "A newly created supergroup or channel",
        "parameters": {
            "title": {
                "description": "Title of the supergroup or channel",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatChangeTitle": {
        "comment": "An updated chat title",
        "parameters": {
            "title": {
                "description": "New chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatChangePhoto": {
        "comment": "An updated chat photo",
        "parameters": {
            "photo": {
                "description": "New chat photo",
                "nullable": false,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatDeletePhoto": {
        "comment": "A deleted chat photo",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageChatAddMembers": {
        "comment": "New chat members were added",
        "parameters": {
            "member_user_ids": {
                "description": "User identifiers of the new members",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatJoinByLink": {
        "comment": "A new member joined the chat via an invite link",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageChatJoinByRequest": {
        "comment": "A new member was accepted to the chat by an administrator",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageChatDeleteMember": {
        "comment": "A chat member was deleted",
        "parameters": {
            "user_id": {
                "description": "User identifier of the deleted chat member",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatUpgradeTo": {
        "comment": "A basic group was upgraded to a supergroup and was deactivated as the result",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup to which the basic group was upgraded",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatUpgradeFrom": {
        "comment": "A supergroup has been created from a basic group",
        "parameters": {
            "title": {
                "description": "Title of the newly created supergroup",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "basic_group_id": {
                "description": "The identifier of the original basic group",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePinMessage": {
        "comment": "A message has been pinned",
        "parameters": {
            "message_id": {
                "description": "Identifier of the pinned message, can be an identifier of a deleted message or 0",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageScreenshotTaken": {
        "comment": "A screenshot of a message in the chat has been taken",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageChatSetTheme": {
        "comment": "A theme in the chat has been changed",
        "parameters": {
            "theme_name": {
                "description": "If non-empty, name of a new theme, set for the chat. Otherwise, chat theme was reset to the default one",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageChatSetMessageAutoDeleteTime": {
        "comment": "The auto-delete or self-destruct timer for messages in the chat has been changed",
        "parameters": {
            "message_auto_delete_time": {
                "description": "New value auto-delete or self-destruct time, in seconds; 0 if disabled",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "from_user_id": {
                "description": "If not 0, a user identifier, which default setting was automatically applied",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForumTopicCreated": {
        "comment": "A forum topic has been created",
        "parameters": {
            "name": {
                "description": "Name of the topic",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "icon": {
                "description": "Icon of the topic",
                "nullable": false,
                "type": "ForumTopicIcon",
                "tl": "ForumTopicIcon",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForumTopicEdited": {
        "comment": "A forum topic has been edited",
        "parameters": {
            "name": {
                "description": "If non-empty, the new name of the topic",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "edit_icon_custom_emoji_id": {
                "description": "True, if icon's custom_emoji_id is changed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "icon_custom_emoji_id": {
                "description": "New unique identifier of the custom emoji shown on the topic icon; 0 if none. Must be ignored if edit_icon_custom_emoji_id is false",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForumTopicIsClosedToggled": {
        "comment": "A forum topic has been closed or opened",
        "parameters": {
            "is_closed": {
                "description": "True, if the topic was closed; otherwise, the topic was reopened",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageForumTopicIsHiddenToggled": {
        "comment": "A General forum topic has been hidden or unhidden",
        "parameters": {
            "is_hidden": {
                "description": "True, if the topic was hidden; otherwise, the topic was unhidden",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSuggestProfilePhoto": {
        "comment": "A profile photo was suggested to a user in a private chat",
        "parameters": {
            "photo": {
                "description": "The suggested chat photo. Use the method setProfilePhoto with inputChatPhotoPrevious to apply the photo",
                "nullable": false,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageCustomServiceAction": {
        "comment": "A non-standard action has happened in the chat",
        "parameters": {
            "text": {
                "description": "Message text to be shown in the chat",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageGameScore": {
        "comment": "A new high score was achieved in a game",
        "parameters": {
            "game_message_id": {
                "description": "Identifier of the message with the game, can be an identifier of a deleted message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "game_id": {
                "description": "Identifier of the game; may be different from the games presented in the message with the game",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "score": {
                "description": "New score",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePaymentSuccessful": {
        "comment": "A payment has been completed",
        "parameters": {
            "invoice_chat_id": {
                "description": "Identifier of the chat, containing the corresponding invoice message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invoice_message_id": {
                "description": "Identifier of the message with the corresponding invoice; can be 0 or an identifier of a deleted message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "currency": {
                "description": "Currency for the price of the product",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "total_amount": {
                "description": "Total price for the product, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_recurring": {
                "description": "True, if this is a recurring payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_first_recurring": {
                "description": "True, if this is the first recurring payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "invoice_name": {
                "description": "Name of the invoice; may be empty if unknown",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePaymentSuccessfulBot": {
        "comment": "A payment has been completed; for bots only",
        "parameters": {
            "currency": {
                "description": "Currency for price of the product",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "total_amount": {
                "description": "Total price for the product, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_recurring": {
                "description": "True, if this is a recurring payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_first_recurring": {
                "description": "True, if this is the first recurring payment",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "invoice_payload": {
                "description": "Invoice payload",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "shipping_option_id": {
                "description": "Identifier of the shipping option chosen by the user; may be empty if not applicable",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "order_info": {
                "description": "Information about the order; may be null",
                "nullable": true,
                "type": "OrderInfo",
                "tl": "OrderInfo",
                "enum": 2
            },
            "telegram_payment_charge_id": {
                "description": "Telegram payment identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "provider_payment_charge_id": {
                "description": "Provider payment identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageGiftedPremium": {
        "comment": "Telegram Premium was gifted to the user",
        "parameters": {
            "currency": {
                "description": "Currency for the paid amount",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "amount": {
                "description": "The paid amount, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "month_count": {
                "description": "Number of month the Telegram Premium subscription will be active",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sticker": {
                "description": "A sticker to be shown in the message; may be null if unknown",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageContactRegistered": {
        "comment": "A contact has registered with Telegram",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageWebsiteConnected": {
        "comment": "The current user has connected a website by logging in using Telegram Login Widget on it",
        "parameters": {
            "domain_name": {
                "description": "Domain name of the connected website",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageBotWriteAccessAllowed": {
        "comment": "The user allowed the bot to send messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageWebAppDataSent": {
        "comment": "Data from a Web App has been sent to a bot",
        "parameters": {
            "button_text": {
                "description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageWebAppDataReceived": {
        "comment": "Data from a Web App has been received; for bots only",
        "parameters": {
            "button_text": {
                "description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "data": {
                "description": "Received data",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePassportDataSent": {
        "comment": "Telegram Passport data has been sent to a bot",
        "parameters": {
            "types": {
                "description": "List of Telegram Passport element types sent",
                "nullable": false,
                "type": "List<PassportElementType>",
                "tl": "PassportElementType",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessagePassportDataReceived": {
        "comment": "Telegram Passport data has been received; for bots only",
        "parameters": {
            "elements": {
                "description": "List of received Telegram Passport elements",
                "nullable": false,
                "type": "List<EncryptedPassportElement>",
                "tl": "EncryptedPassportElement",
                "enum": 4
            },
            "credentials": {
                "description": "Encrypted data credentials",
                "nullable": false,
                "type": "EncryptedCredentials",
                "tl": "EncryptedCredentials",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageProximityAlertTriggered": {
        "comment": "A user in the chat came within proximity alert range",
        "parameters": {
            "traveler_id": {
                "description": "The identifier of a user or chat that triggered the proximity alert",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "watcher_id": {
                "description": "The identifier of a user or chat that subscribed for the proximity alert",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "distance": {
                "description": "The distance between the users",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageUnsupported": {
        "comment": "Message content that is not supported in the current TDLib version",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeMention": {
        "comment": "A mention of a user, a supergroup, or a channel by their username",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeHashtag": {
        "comment": "A hashtag text, beginning with \"#\"",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeCashtag": {
        "comment": "A cashtag text, beginning with \"$\" and consisting of capital English letters (e.g., \"$USD\")",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeBotCommand": {
        "comment": "A bot command, beginning with \"/\"",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeUrl": {
        "comment": "An HTTP URL",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeEmailAddress": {
        "comment": "An email address",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypePhoneNumber": {
        "comment": "A phone number",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeBankCardNumber": {
        "comment": "A bank card number. The getBankCardInfo method can be used to get information about the bank card",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeBold": {
        "comment": "A bold text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeItalic": {
        "comment": "An italic text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeUnderline": {
        "comment": "An underlined text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeStrikethrough": {
        "comment": "A strikethrough text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeSpoiler": {
        "comment": "A spoiler text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeCode": {
        "comment": "Text that must be formatted as if inside a code HTML tag",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypePre": {
        "comment": "Text that must be formatted as if inside a pre HTML tag",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TextEntityTypePreCode": {
        "comment": "Text that must be formatted as if inside pre, and code HTML tags",
        "parameters": {
            "language": {
                "description": "Programming language of the code; as defined by the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeTextUrl": {
        "comment": "A text description shown instead of a raw URL",
        "parameters": {
            "url": {
                "description": "HTTP or tg:// URL to be opened when the link is clicked",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeMentionName": {
        "comment": "A text shows instead of a raw mention of the user (e.g., when the user has no username)",
        "parameters": {
            "user_id": {
                "description": "Identifier of the mentioned user",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeCustomEmoji": {
        "comment": "A custom emoji. The text behind a custom emoji must be an emoji. Only premium users can use premium custom emoji",
        "parameters": {
            "custom_emoji_id": {
                "description": "Unique identifier of the custom emoji",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextEntityTypeMediaTimestamp": {
        "comment": "A media timestamp",
        "parameters": {
            "media_timestamp": {
                "description": "Timestamp from which a video/audio/video note/voice note playing must start, in seconds. The media can be in the content or the web page preview of the current message, or in the same places in the replied message",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputThumbnail": {
        "comment": "A thumbnail to be sent along with a file; must be in JPEG or WEBP format for stickers, and less than 200 KB in size",
        "parameters": {
            "thumbnail": {
                "description": "Thumbnail file to send. Sending thumbnails by file_id is currently not supported",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "width": {
                "description": "Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSchedulingStateSendAtDate": {
        "comment": "The message will be sent at the specified date",
        "parameters": {
            "send_date": {
                "description": "Date the message will be sent. The date must be within 367 days in the future",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageSchedulingStateSendWhenOnline": {
        "comment": "The message will be sent when the peer will be online. Applicable to private chats only and when the exact online status of the peer is known",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "MessageSendOptions": {
        "comment": "Options to be used when a message is sent",
        "parameters": {
            "disable_notification": {
                "description": "Pass true to disable notification for the message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "from_background": {
                "description": "Pass true if the message is sent from the background",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "protect_content": {
                "description": "Pass true if the content of the message must be protected from forwarding and saving; for bots only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "update_order_of_installed_sticker_sets": {
                "description": "Pass true if the user explicitly chosen a sticker or a custom emoji from an installed sticker set; applicable only to sendMessage and sendMessageAlbum",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "scheduling_state": {
                "description": "Message scheduling state; pass null to send message immediately. Messages sent to a secret chat, live location messages and self-destructing messages can't be scheduled",
                "nullable": true,
                "type": "MessageSchedulingState",
                "tl": "MessageSchedulingState",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageCopyOptions": {
        "comment": "Options to be used when a message content is copied without reference to the original sender. Service messages and messageInvoice can't be copied",
        "parameters": {
            "send_copy": {
                "description": "True, if content of the message needs to be copied without reference to the original sender. Always true if the message is forwarded to a secret chat or is local",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "replace_caption": {
                "description": "True, if media caption of the message copy needs to be replaced. Ignored if send_copy is false",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "new_caption": {
                "description": "New message caption; pass null to copy message without caption. Ignored if replace_caption is false",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageText": {
        "comment": "A text message",
        "parameters": {
            "text": {
                "description": "Formatted text to be sent; 1-getOption(\"message_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, Code, Pre, PreCode, TextUrl and MentionName entities are allowed to be specified manually",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "disable_web_page_preview": {
                "description": "True, if rich web page previews for URLs in the message text must be disabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "clear_draft": {
                "description": "True, if a chat message draft must be deleted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageAnimation": {
        "comment": "An animation message (GIF-style).",
        "parameters": {
            "animation": {
                "description": "Animation file to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Animation thumbnail; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "added_sticker_file_ids": {
                "description": "File identifiers of the stickers added to the animation, if applicable",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            },
            "duration": {
                "description": "Duration of the animation, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Width of the animation; may be replaced by the server",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Height of the animation; may be replaced by the server",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "caption": {
                "description": "Animation caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "has_spoiler": {
                "description": "True, if the animation preview must be covered by a spoiler animation; not supported in secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageAudio": {
        "comment": "An audio message",
        "parameters": {
            "audio": {
                "description": "Audio file to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "album_cover_thumbnail": {
                "description": "Thumbnail of the cover for the album; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "duration": {
                "description": "Duration of the audio, in seconds; may be replaced by the server",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Title of the audio; 0-64 characters; may be replaced by the server",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "performer": {
                "description": "Performer of the audio; 0-64 characters, may be replaced by the server",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "caption": {
                "description": "Audio caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageDocument": {
        "comment": "A document message (general file)",
        "parameters": {
            "document": {
                "description": "Document to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Document thumbnail; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "disable_content_type_detection": {
                "description": "If true, automatic file type detection will be disabled and the document will always be sent as file. Always true for files sent to secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "caption": {
                "description": "Document caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessagePhoto": {
        "comment": "A photo message",
        "parameters": {
            "photo": {
                "description": "Photo to send. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Photo thumbnail to be sent; pass null to skip thumbnail uploading. The thumbnail is sent to the other party only in secret chats",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "added_sticker_file_ids": {
                "description": "File identifiers of the stickers added to the photo, if applicable",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            },
            "width": {
                "description": "Photo width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Photo height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "caption": {
                "description": "Photo caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "self_destruct_time": {
                "description": "Photo self-destruct time, in seconds (0-60). A non-zero self-destruct time can be specified only in private chats",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_spoiler": {
                "description": "True, if the photo preview must be covered by a spoiler animation; not supported in secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageSticker": {
        "comment": "A sticker message",
        "parameters": {
            "sticker": {
                "description": "Sticker to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Sticker thumbnail; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "width": {
                "description": "Sticker width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Sticker height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "emoji": {
                "description": "Emoji used to choose the sticker",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageVideo": {
        "comment": "A video message",
        "parameters": {
            "video": {
                "description": "Video to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Video thumbnail; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "added_sticker_file_ids": {
                "description": "File identifiers of the stickers added to the video, if applicable",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            },
            "duration": {
                "description": "Duration of the video, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "width": {
                "description": "Video width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "height": {
                "description": "Video height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "supports_streaming": {
                "description": "True, if the video is supposed to be streamed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "caption": {
                "description": "Video caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "self_destruct_time": {
                "description": "Video self-destruct time, in seconds (0-60). A non-zero self-destruct time can be specified only in private chats",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_spoiler": {
                "description": "True, if the video preview must be covered by a spoiler animation; not supported in secret chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageVideoNote": {
        "comment": "A video note message",
        "parameters": {
            "video_note": {
                "description": "Video note to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "thumbnail": {
                "description": "Video thumbnail; pass null to skip thumbnail uploading",
                "nullable": true,
                "type": "InputThumbnail",
                "tl": "InputThumbnail",
                "enum": 2
            },
            "duration": {
                "description": "Duration of the video, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "length": {
                "description": "Video width and height; must be positive and not greater than 640",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageVoiceNote": {
        "comment": "A voice note message",
        "parameters": {
            "voice_note": {
                "description": "Voice note to be sent",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "duration": {
                "description": "Duration of the voice note, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "waveform": {
                "description": "Waveform representation of the voice note in 5-bit format",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "caption": {
                "description": "Voice note caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters",
                "nullable": true,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageLocation": {
        "comment": "A message with a location",
        "parameters": {
            "location": {
                "description": "Location to be sent",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "live_period": {
                "description": "Period for which the location can be updated, in seconds; must be between 60 and 86400 for a live location and 0 otherwise",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "heading": {
                "description": "For live locations, a direction in which the location moves, in degrees; 1-360. Pass 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "proximity_alert_radius": {
                "description": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled. Can't be enabled in channels and Saved Messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageVenue": {
        "comment": "A message with information about a venue",
        "parameters": {
            "venue": {
                "description": "Venue to send",
                "nullable": false,
                "type": "Venue",
                "tl": "Venue",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageContact": {
        "comment": "A message containing a user contact",
        "parameters": {
            "contact": {
                "description": "Contact to send",
                "nullable": false,
                "type": "Contact",
                "tl": "Contact",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageDice": {
        "comment": "A dice message",
        "parameters": {
            "emoji": {
                "description": "Emoji on which the dice throw animation is based",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "clear_draft": {
                "description": "True, if the chat message draft must be deleted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageGame": {
        "comment": "A message with a game; not supported for channels or secret chats",
        "parameters": {
            "bot_user_id": {
                "description": "User identifier of the bot that owns the game",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "game_short_name": {
                "description": "Short name of the game",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageInvoice": {
        "comment": "A message with an invoice; can be used only by bots",
        "parameters": {
            "invoice": {
                "description": "Invoice",
                "nullable": false,
                "type": "Invoice",
                "tl": "Invoice",
                "enum": 2
            },
            "title": {
                "description": "Product title; 1-32 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Product description; 0-255 characters",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo_url": {
                "description": "Product photo URL; optional",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo_size": {
                "description": "Product photo size",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "photo_width": {
                "description": "Product photo width",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "photo_height": {
                "description": "Product photo height",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "payload": {
                "description": "The invoice payload",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "provider_token": {
                "description": "Payment provider token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "provider_data": {
                "description": "JSON-encoded data about the invoice, which will be shared with the payment provider",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "start_parameter": {
                "description": "Unique invoice bot deep link parameter for the generation of this invoice. If empty, it would be possible to pay directly from forwards of the invoice message",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "extended_media_content": {
                "description": "The content of extended media attached to the invoice. The content of the message to be sent. Must be one of the following types: inputMessagePhoto, inputMessageVideo",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessagePoll": {
        "comment": "A message with a poll. Polls can't be sent to secret chats. Polls can be sent only to a private chat with a bot",
        "parameters": {
            "question": {
                "description": "Poll question; 1-255 characters (up to 300 characters for bots)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "options": {
                "description": "List of poll answer options, 2-10 strings 1-100 characters each",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            },
            "is_anonymous": {
                "description": "True, if the poll voters are anonymous. Non-anonymous polls can't be sent or forwarded to channels",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Type of the poll",
                "nullable": false,
                "type": "PollType",
                "tl": "PollType",
                "enum": 2
            },
            "open_period": {
                "description": "Amount of time the poll will be active after creation, in seconds; for bots only",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "close_date": {
                "description": "Point in time (Unix timestamp) when the poll will automatically be closed; for bots only",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_closed": {
                "description": "True, if the poll needs to be sent already closed; for bots only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputMessageForwarded": {
        "comment": "A forwarded message",
        "parameters": {
            "from_chat_id": {
                "description": "Identifier for the chat this forwarded message came from",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message to forward",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "in_game_share": {
                "description": "True, if a game message is being shared from a launched game; applies only to game messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "copy_options": {
                "description": "Options to be used to copy content of the message without reference to the original sender; pass null to forward the message as usual",
                "nullable": true,
                "type": "MessageCopyOptions",
                "tl": "MessageCopyOptions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterEmpty": {
        "comment": "Returns all found messages, no filter is applied",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterAnimation": {
        "comment": "Returns only animation messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterAudio": {
        "comment": "Returns only audio messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterDocument": {
        "comment": "Returns only document messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterPhoto": {
        "comment": "Returns only photo messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterVideo": {
        "comment": "Returns only video messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterVoiceNote": {
        "comment": "Returns only voice note messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterPhotoAndVideo": {
        "comment": "Returns only photo and video messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterUrl": {
        "comment": "Returns only messages containing URLs",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterChatPhoto": {
        "comment": "Returns only messages containing chat photos",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterVideoNote": {
        "comment": "Returns only video note messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterVoiceAndVideoNote": {
        "comment": "Returns only voice and video note messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterMention": {
        "comment": "Returns only messages with mentions of the current user, or messages that are replies to their messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterUnreadMention": {
        "comment": "Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterUnreadReaction": {
        "comment": "Returns only messages with unread reactions for the current user. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterFailedToSend": {
        "comment": "Returns only failed to send messages. This filter can be used only if the message database is used",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SearchMessagesFilterPinned": {
        "comment": "Returns only pinned messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionTyping": {
        "comment": "The user is typing a message",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionRecordingVideo": {
        "comment": "The user is recording a video",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionUploadingVideo": {
        "comment": "The user is uploading a video",
        "parameters": {
            "progress": {
                "description": "Upload progress, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionRecordingVoiceNote": {
        "comment": "The user is recording a voice note",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionUploadingVoiceNote": {
        "comment": "The user is uploading a voice note",
        "parameters": {
            "progress": {
                "description": "Upload progress, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionUploadingPhoto": {
        "comment": "The user is uploading a photo",
        "parameters": {
            "progress": {
                "description": "Upload progress, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionUploadingDocument": {
        "comment": "The user is uploading a document",
        "parameters": {
            "progress": {
                "description": "Upload progress, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionChoosingSticker": {
        "comment": "The user is picking a sticker to send",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionChoosingLocation": {
        "comment": "The user is picking a location or venue to send",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionChoosingContact": {
        "comment": "The user is picking a contact to send",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionStartPlayingGame": {
        "comment": "The user has started to play a game",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionRecordingVideoNote": {
        "comment": "The user is recording a video note",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatActionUploadingVideoNote": {
        "comment": "The user is uploading a video note",
        "parameters": {
            "progress": {
                "description": "Upload progress, as a percentage",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionWatchingAnimations": {
        "comment": "The user is watching animations sent by the other party by clicking on an animated emoji",
        "parameters": {
            "emoji": {
                "description": "The animated emoji",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatActionCancel": {
        "comment": "The user has canceled the previous action",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserStatusEmpty": {
        "comment": "The user status was never changed",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserStatusOnline": {
        "comment": "The user is online",
        "parameters": {
            "expires": {
                "description": "Point in time (Unix timestamp) when the user's online status will expire",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserStatusOffline": {
        "comment": "The user is offline",
        "parameters": {
            "was_online": {
                "description": "Point in time (Unix timestamp) when the user was last online",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserStatusRecently": {
        "comment": "The user was online recently",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserStatusLastWeek": {
        "comment": "The user is offline, but was online last week",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserStatusLastMonth": {
        "comment": "The user is offline, but was online last month",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "Stickers": {
        "comment": "Represents a list of stickers",
        "parameters": {
            "stickers": {
                "description": "List of stickers",
                "nullable": false,
                "type": "List<Sticker>",
                "tl": "Sticker",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Emojis": {
        "comment": "Represents a list of emoji",
        "parameters": {
            "emojis": {
                "description": "List of emojis",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerSet": {
        "comment": "Represents a sticker set",
        "parameters": {
            "id": {
                "description": "Identifier of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "title": {
                "description": "Title of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Name of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail": {
                "description": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "thumbnail_outline": {
                "description": "Sticker set thumbnail's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner",
                "nullable": false,
                "type": "List<ClosedVectorPath>",
                "tl": "ClosedVectorPath",
                "enum": 4
            },
            "is_installed": {
                "description": "True, if the sticker set has been installed by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_archived": {
                "description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_official": {
                "description": "True, if the sticker set is official",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker_format": {
                "description": "Format of the stickers in the set",
                "nullable": false,
                "type": "StickerFormat",
                "tl": "StickerFormat",
                "enum": 2
            },
            "sticker_type": {
                "description": "Type of the stickers in the set",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "is_viewed": {
                "description": "True for already viewed trending sticker sets",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "stickers": {
                "description": "List of stickers in this set",
                "nullable": false,
                "type": "List<Sticker>",
                "tl": "Sticker",
                "enum": 4
            },
            "emojis": {
                "description": "A list of emoji corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
                "nullable": false,
                "type": "List<List<String>>",
                "tl": "emojis",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerSetInfo": {
        "comment": "Represents short information about a sticker set",
        "parameters": {
            "id": {
                "description": "Identifier of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "title": {
                "description": "Title of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Name of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail": {
                "description": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            },
            "thumbnail_outline": {
                "description": "Sticker set thumbnail's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner",
                "nullable": false,
                "type": "List<ClosedVectorPath>",
                "tl": "ClosedVectorPath",
                "enum": 4
            },
            "is_installed": {
                "description": "True, if the sticker set has been installed by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_archived": {
                "description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_official": {
                "description": "True, if the sticker set is official",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker_format": {
                "description": "Format of the stickers in the set",
                "nullable": false,
                "type": "StickerFormat",
                "tl": "StickerFormat",
                "enum": 2
            },
            "sticker_type": {
                "description": "Type of the stickers in the set",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "is_viewed": {
                "description": "True for already viewed trending sticker sets",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "size": {
                "description": "Total number of stickers in the set",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "covers": {
                "description": "Up to the first 5 stickers from the set, depending on the context. If the application needs more stickers the full sticker set needs to be requested",
                "nullable": false,
                "type": "List<Sticker>",
                "tl": "Sticker",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "StickerSets": {
        "comment": "Represents a list of sticker sets",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of sticker sets found",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sets": {
                "description": "List of sticker sets",
                "nullable": false,
                "type": "List<StickerSetInfo>",
                "tl": "StickerSetInfo",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "TrendingStickerSets": {
        "comment": "Represents a list of trending sticker sets",
        "parameters": {
            "total_count": {
                "description": "Approximate total number of trending sticker sets",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sets": {
                "description": "List of trending sticker sets",
                "nullable": false,
                "type": "List<StickerSetInfo>",
                "tl": "StickerSetInfo",
                "enum": 4
            },
            "is_premium": {
                "description": "True, if the list contains sticker sets with premium stickers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallDiscardReasonEmpty": {
        "comment": "The call wasn't discarded, or the reason is unknown",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallDiscardReasonMissed": {
        "comment": "The call was ended before the conversation started. It was canceled by the caller or missed by the other party",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallDiscardReasonDeclined": {
        "comment": "The call was ended before the conversation started. It was declined by the other party",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallDiscardReasonDisconnected": {
        "comment": "The call was ended during the conversation because the users were disconnected",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallDiscardReasonHungUp": {
        "comment": "The call was ended because one of the parties hung up",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProtocol": {
        "comment": "Specifies the supported call protocols",
        "parameters": {
            "udp_p2p": {
                "description": "True, if UDP peer-to-peer connections are supported",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "udp_reflector": {
                "description": "True, if connection through UDP reflectors is supported",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "min_layer": {
                "description": "The minimum supported API layer; use 65",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "max_layer": {
                "description": "The maximum supported API layer; use 65",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "library_versions": {
                "description": "List of supported tgcalls versions",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallServerTypeTelegramReflector": {
        "comment": "A Telegram call reflector",
        "parameters": {
            "peer_tag": {
                "description": "A peer tag to be used with the reflector",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "is_tcp": {
                "description": "True, if the server uses TCP instead of UDP",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallServerTypeWebrtc": {
        "comment": "A WebRTC server",
        "parameters": {
            "username": {
                "description": "Username to be used for authentication",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "password": {
                "description": "Authentication password",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "supports_turn": {
                "description": "True, if the server supports TURN",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_stun": {
                "description": "True, if the server supports STUN",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallServer": {
        "comment": "Describes a server for relaying call data",
        "parameters": {
            "id": {
                "description": "Server identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "ip_address": {
                "description": "Server IPv4 address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "ipv6_address": {
                "description": "Server IPv6 address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Server port number",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Server type",
                "nullable": false,
                "type": "CallServerType",
                "tl": "CallServerType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallId": {
        "comment": "Contains the call identifier",
        "parameters": {
            "id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallId": {
        "comment": "Contains the group call identifier",
        "parameters": {
            "id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallStatePending": {
        "comment": "The call is pending, waiting to be accepted by a user",
        "parameters": {
            "is_created": {
                "description": "True, if the call has already been created by the server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_received": {
                "description": "True, if the call has already been received by the other party",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallStateExchangingKeys": {
        "comment": "The call has been answered and encryption keys are being exchanged",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallStateReady": {
        "comment": "The call is ready to use",
        "parameters": {
            "protocol": {
                "description": "Call protocols supported by the peer",
                "nullable": false,
                "type": "CallProtocol",
                "tl": "CallProtocol",
                "enum": 2
            },
            "servers": {
                "description": "List of available call servers",
                "nullable": false,
                "type": "List<CallServer>",
                "tl": "CallServer",
                "enum": 4
            },
            "config": {
                "description": "A JSON-encoded call config",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "encryption_key": {
                "description": "Call encryption key",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "emojis": {
                "description": "Encryption key emojis fingerprint",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            },
            "allow_p2p": {
                "description": "True, if peer-to-peer connection is allowed by users privacy settings",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallStateHangingUp": {
        "comment": "The call is hanging up after discardCall has been called",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallStateDiscarded": {
        "comment": "The call has ended successfully",
        "parameters": {
            "reason": {
                "description": "The reason, why the call has ended",
                "nullable": false,
                "type": "CallDiscardReason",
                "tl": "CallDiscardReason",
                "enum": 2
            },
            "need_rating": {
                "description": "True, if the call rating must be sent to the server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_debug_information": {
                "description": "True, if the call debug information must be sent to the server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_log": {
                "description": "True, if the call log must be sent to the server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallStateError": {
        "comment": "The call has ended with an error",
        "parameters": {
            "error": {
                "description": "Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout",
                "nullable": false,
                "type": "Error",
                "tl": "Error",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallVideoQualityThumbnail": {
        "comment": "The worst available video quality",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "GroupCallVideoQualityMedium": {
        "comment": "The medium video quality",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "GroupCallVideoQualityFull": {
        "comment": "The best available video quality",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "GroupCallStream": {
        "comment": "Describes an available stream in a group call",
        "parameters": {
            "channel_id": {
                "description": "Identifier of an audio/video channel",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "scale": {
                "description": "Scale of segment durations in the stream. The duration is 1000/(2**scale) milliseconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "time_offset": {
                "description": "Point in time when the stream currently ends; Unix timestamp in milliseconds",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallStreams": {
        "comment": "Represents a list of group call streams",
        "parameters": {
            "streams": {
                "description": "A list of group call streams",
                "nullable": false,
                "type": "List<GroupCallStream>",
                "tl": "GroupCallStream",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "RtmpUrl": {
        "comment": "Represents an RTMP url",
        "parameters": {
            "url": {
                "description": "The URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "stream_key": {
                "description": "Stream key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallRecentSpeaker": {
        "comment": "Describes a recently speaking participant in a group call",
        "parameters": {
            "participant_id": {
                "description": "Group call participant identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_speaking": {
                "description": "True, is the user has spoken recently",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCall": {
        "comment": "Describes a group call",
        "parameters": {
            "id": {
                "description": "Group call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Group call title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "scheduled_start_date": {
                "description": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator; 0 if it is already active or was ended",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "enabled_start_notification": {
                "description": "True, if the group call is scheduled and the current user will receive a notification when the group call will start",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_active": {
                "description": "True, if the call is active",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_rtmp_stream": {
                "description": "True, if the chat is an RTMP stream instead of an ordinary video chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_joined": {
                "description": "True, if the call is joined",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "need_rejoin": {
                "description": "True, if user was kicked from the call because of network loss and the call needs to be rejoined",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_managed": {
                "description": "True, if the current user can manage the group call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "participant_count": {
                "description": "Number of participants in the group call",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_hidden_listeners": {
                "description": "True, if group call participants, which are muted, aren't returned in participant list",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "loaded_all_participants": {
                "description": "True, if all group call participants are loaded",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "recent_speakers": {
                "description": "At most 3 recently speaking users in the group call",
                "nullable": false,
                "type": "List<GroupCallRecentSpeaker>",
                "tl": "GroupCallRecentSpeaker",
                "enum": 4
            },
            "is_my_video_enabled": {
                "description": "True, if the current user's video is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_my_video_paused": {
                "description": "True, if the current user's video is paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_enable_video": {
                "description": "True, if the current user can broadcast video or share screen",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "mute_new_participants": {
                "description": "True, if only group call administrators can unmute new participants",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_toggle_mute_new_participants": {
                "description": "True, if the current user can enable or disable mute_new_participants setting",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "record_duration": {
                "description": "Duration of the ongoing group call recording, in seconds; 0 if none. An updateGroupCall update is not triggered when value of this field changes, but the same recording goes on",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_video_recorded": {
                "description": "True, if a video file is being recorded for the call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "duration": {
                "description": "Call duration, in seconds; for ended calls only",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallVideoSourceGroup": {
        "comment": "Describes a group of video synchronization source identifiers",
        "parameters": {
            "semantics": {
                "description": "The semantics of sources, one of \"SIM\" or \"FID\"",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "source_ids": {
                "description": "The list of synchronization source identifiers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallParticipantVideoInfo": {
        "comment": "Contains information about a group call participant's video channel",
        "parameters": {
            "source_groups": {
                "description": "List of synchronization source groups of the video",
                "nullable": false,
                "type": "List<GroupCallVideoSourceGroup>",
                "tl": "GroupCallVideoSourceGroup",
                "enum": 4
            },
            "endpoint_id": {
                "description": "Video channel endpoint identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_paused": {
                "description": "True, if the video is paused. This flag needs to be ignored, if new video frames are received",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GroupCallParticipant": {
        "comment": "Represents a group call participant",
        "parameters": {
            "participant_id": {
                "description": "Identifier of the group call participant",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "audio_source_id": {
                "description": "User's audio channel synchronization source identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "screen_sharing_audio_source_id": {
                "description": "User's screen sharing audio channel synchronization source identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_info": {
                "description": "Information about user's video channel; may be null if there is no active video",
                "nullable": true,
                "type": "GroupCallParticipantVideoInfo",
                "tl": "GroupCallParticipantVideoInfo",
                "enum": 2
            },
            "screen_sharing_video_info": {
                "description": "Information about user's screen sharing video channel; may be null if there is no active screen sharing video",
                "nullable": true,
                "type": "GroupCallParticipantVideoInfo",
                "tl": "GroupCallParticipantVideoInfo",
                "enum": 2
            },
            "bio": {
                "description": "The participant user's bio or the participant chat's description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_current_user": {
                "description": "True, if the participant is the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_speaking": {
                "description": "True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_hand_raised": {
                "description": "True, if the participant hand is raised",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_muted_for_all_users": {
                "description": "True, if the current user can mute the participant for all other group call participants",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_unmuted_for_all_users": {
                "description": "True, if the current user can allow the participant to unmute themselves or unmute the participant (if the participant is the current user)",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_muted_for_current_user": {
                "description": "True, if the current user can mute the participant only for self",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_be_unmuted_for_current_user": {
                "description": "True, if the current user can unmute the participant for self",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_muted_for_all_users": {
                "description": "True, if the participant is muted for all users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_muted_for_current_user": {
                "description": "True, if the participant is muted for the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_unmute_self": {
                "description": "True, if the participant is muted for all users, but can unmute themselves",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "volume_level": {
                "description": "Participant's volume level; 1-20000 in hundreds of percents",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "order": {
                "description": "User's order in the group call participant list. Orders must be compared lexicographically. The bigger is order, the higher is user in the list. If order is empty, the user must be removed from the participant list",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallProblemEcho": {
        "comment": "The user heard their own voice",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemNoise": {
        "comment": "The user heard background noise",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemInterruptions": {
        "comment": "The other side kept disappearing",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemDistortedSpeech": {
        "comment": "The speech was distorted",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemSilentLocal": {
        "comment": "The user couldn't hear the other side",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemSilentRemote": {
        "comment": "The other side couldn't hear the user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemDropped": {
        "comment": "The call ended unexpectedly",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemDistortedVideo": {
        "comment": "The video was distorted",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CallProblemPixelatedVideo": {
        "comment": "The video was pixelated",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "Call": {
        "comment": "Describes a call",
        "parameters": {
            "id": {
                "description": "Call identifier, not persistent",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_id": {
                "description": "Peer user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_outgoing": {
                "description": "True, if the call is outgoing",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_video": {
                "description": "True, if the call is a video call",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "state": {
                "description": "Call state",
                "nullable": false,
                "type": "CallState",
                "tl": "CallState",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PhoneNumberAuthenticationSettings": {
        "comment": "Contains settings for the authentication of the user's phone number",
        "parameters": {
            "allow_flash_call": {
                "description": "Pass true if the authentication code may be sent via a flash call to the specified phone number",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_missed_call": {
                "description": "Pass true if the authentication code may be sent via a missed call to the specified phone number",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_current_phone_number": {
                "description": "Pass true if the authenticated phone number is used on the current device",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_sms_retriever_api": {
                "description": "For official applications only. True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "authentication_tokens": {
                "description": "List of up to 20 authentication tokens, recently received in updateOption(\"authentication_token\") in previously logged out sessions",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "AddedReaction": {
        "comment": "Represents a reaction applied to a message",
        "parameters": {
            "type": {
                "description": "Type of the reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "sender_id": {
                "description": "Identifier of the chat member, applied the reaction",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "AddedReactions": {
        "comment": "Represents a list of reactions added to a message",
        "parameters": {
            "total_count": {
                "description": "The total number of found reactions",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reactions": {
                "description": "The list of added reactions",
                "nullable": false,
                "type": "List<AddedReaction>",
                "tl": "AddedReaction",
                "enum": 4
            },
            "next_offset": {
                "description": "The offset for the next request. If empty, there are no more results",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AvailableReaction": {
        "comment": "Represents an available reaction",
        "parameters": {
            "type": {
                "description": "Type of the reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            },
            "needs_premium": {
                "description": "True, if Telegram Premium is needed to send the reaction",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AvailableReactions": {
        "comment": "Represents a list of reactions that can be added to a message",
        "parameters": {
            "top_reactions": {
                "description": "List of reactions to be shown at the top",
                "nullable": false,
                "type": "List<AvailableReaction>",
                "tl": "AvailableReaction",
                "enum": 4
            },
            "recent_reactions": {
                "description": "List of recently used reactions",
                "nullable": false,
                "type": "List<AvailableReaction>",
                "tl": "AvailableReaction",
                "enum": 4
            },
            "popular_reactions": {
                "description": "List of popular reactions",
                "nullable": false,
                "type": "List<AvailableReaction>",
                "tl": "AvailableReaction",
                "enum": 4
            },
            "allow_custom_emoji": {
                "description": "True, if custom emoji reactions could be added by Telegram Premium subscribers",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "EmojiReaction": {
        "comment": "Contains information about a emoji reaction",
        "parameters": {
            "emoji": {
                "description": "Text representation of the reaction",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Reaction title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_active": {
                "description": "True, if the reaction can be added to new messages and enabled in chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "static_icon": {
                "description": "Static icon for the reaction",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "appear_animation": {
                "description": "Appear animation for the reaction",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "select_animation": {
                "description": "Select animation for the reaction",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "activate_animation": {
                "description": "Activate animation for the reaction",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "effect_animation": {
                "description": "Effect animation for the reaction",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "around_animation": {
                "description": "Around animation for the reaction; may be null",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "center_animation": {
                "description": "Center animation for the reaction; may be null",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Animations": {
        "comment": "Represents a list of animations",
        "parameters": {
            "animations": {
                "description": "List of animations",
                "nullable": false,
                "type": "List<Animation>",
                "tl": "Animation",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "DiceStickersRegular": {
        "comment": "A regular animated sticker",
        "parameters": {
            "sticker": {
                "description": "The animated sticker with the dice animation",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "DiceStickersSlotMachine": {
        "comment": "Animated stickers to be combined into a slot machine",
        "parameters": {
            "background": {
                "description": "The animated sticker with the slot machine background. The background animation must start playing after all reel animations finish",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "lever": {
                "description": "The animated sticker with the lever animation. The lever animation must play once in the initial dice state",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "left_reel": {
                "description": "The animated sticker with the left reel",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "center_reel": {
                "description": "The animated sticker with the center reel",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "right_reel": {
                "description": "The animated sticker with the right reel",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ImportedContacts": {
        "comment": "Represents the result of an importContacts request",
        "parameters": {
            "user_ids": {
                "description": "User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "importer_count": {
                "description": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "SpeechRecognitionResultPending": {
        "comment": "The speech recognition is ongoing",
        "parameters": {
            "partial_text": {
                "description": "Partially recognized text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SpeechRecognitionResultText": {
        "comment": "The speech recognition successfully finished",
        "parameters": {
            "text": {
                "description": "Recognized text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SpeechRecognitionResultError": {
        "comment": "The speech recognition failed",
        "parameters": {
            "error": {
                "description": "Received error",
                "nullable": false,
                "type": "Error",
                "tl": "Error",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "AttachmentMenuBotColor": {
        "comment": "Describes a color to highlight a bot added to attachment menu",
        "parameters": {
            "light_color": {
                "description": "Color in the RGB24 format for light themes",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "dark_color": {
                "description": "Color in the RGB24 format for dark themes",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AttachmentMenuBot": {
        "comment": "Represents a bot, which can be added to attachment menu",
        "parameters": {
            "bot_user_id": {
                "description": "User identifier of the bot added to attachment menu",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "supports_self_chat": {
                "description": "True, if the bot supports opening from attachment menu in the chat with the bot",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_user_chats": {
                "description": "True, if the bot supports opening from attachment menu in private chats with ordinary users",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_bot_chats": {
                "description": "True, if the bot supports opening from attachment menu in private chats with other bots",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_group_chats": {
                "description": "True, if the bot supports opening from attachment menu in basic group and supergroup chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_channel_chats": {
                "description": "True, if the bot supports opening from attachment menu in channel chats",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "supports_settings": {
                "description": "True, if the bot supports \"settings_button_pressed\" event",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "request_write_access": {
                "description": "True, if the user needs to be requested to give the permission to the bot to send them messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "name": {
                "description": "Name for the bot in attachment menu",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name_color": {
                "description": "Color to highlight selected name of the bot if appropriate; may be null",
                "nullable": true,
                "type": "AttachmentMenuBotColor",
                "tl": "AttachmentMenuBotColor",
                "enum": 2
            },
            "default_icon": {
                "description": "Default attachment menu icon for the bot in SVG format; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "ios_static_icon": {
                "description": "Attachment menu icon for the bot in SVG format for the official iOS app; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "ios_animated_icon": {
                "description": "Attachment menu icon for the bot in TGS format for the official iOS app; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "android_icon": {
                "description": "Attachment menu icon for the bot in TGS format for the official Android app; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "macos_icon": {
                "description": "Attachment menu icon for the bot in TGS format for the official native macOS app; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            },
            "icon_color": {
                "description": "Color to highlight selected icon of the bot if appropriate; may be null",
                "nullable": true,
                "type": "AttachmentMenuBotColor",
                "tl": "AttachmentMenuBotColor",
                "enum": 2
            },
            "web_app_placeholder": {
                "description": "Default placeholder for opened Web Apps in SVG format; may be null",
                "nullable": true,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "SentWebAppMessage": {
        "comment": "Information about the message sent by answerWebAppQuery",
        "parameters": {
            "inline_message_id": {
                "description": "Identifier of the sent inline message, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "HttpUrl": {
        "comment": "Contains an HTTP URL",
        "parameters": {
            "url": {
                "description": "The URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserLink": {
        "comment": "Contains an HTTPS URL, which can be used to get information about a user",
        "parameters": {
            "url": {
                "description": "The URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expires_in": {
                "description": "Left time for which the link is valid, in seconds; 0 if the link is a public username link",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultAnimation": {
        "comment": "Represents a link to an animated GIF or an animated (i.e., without sound) H.264/MPEG-4 AVC video",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_mime_type": {
                "description": "MIME type of the video thumbnail. If non-empty, must be one of \"image/jpeg\", \"image/gif\" and \"video/mp4\"",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video_url": {
                "description": "The URL of the video file (file size must not exceed 1MB)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video_mime_type": {
                "description": "MIME type of the video file. Must be one of \"image/gif\" and \"video/mp4\"",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video_duration": {
                "description": "Duration of the video, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_width": {
                "description": "Width of the video",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_height": {
                "description": "Height of the video",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultArticle": {
        "comment": "Represents a link to an article or web page",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "URL of the result, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "hide_url": {
                "description": "True, if the URL must be not shown",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "title": {
                "description": "Title of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "A short description of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "URL of the result thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_width": {
                "description": "Thumbnail width, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "thumbnail_height": {
                "description": "Thumbnail height, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultAudio": {
        "comment": "Represents a link to an MP3 audio file",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the audio file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "performer": {
                "description": "Performer of the audio file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "audio_url": {
                "description": "The URL of the audio file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "audio_duration": {
                "description": "Audio file duration, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultContact": {
        "comment": "Represents a user contact",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "contact": {
                "description": "User contact",
                "nullable": false,
                "type": "Contact",
                "tl": "Contact",
                "enum": 2
            },
            "thumbnail_url": {
                "description": "URL of the result thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_width": {
                "description": "Thumbnail width, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "thumbnail_height": {
                "description": "Thumbnail height, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultDocument": {
        "comment": "Represents a link to a file",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the resulting file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Short description of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "document_url": {
                "description": "URL of the file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "The URL of the file thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_width": {
                "description": "Width of the thumbnail",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "thumbnail_height": {
                "description": "Height of the thumbnail",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultGame": {
        "comment": "Represents a game",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "game_short_name": {
                "description": "Short name of the game",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultLocation": {
        "comment": "Represents a point on the map",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "location": {
                "description": "Location result",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "live_period": {
                "description": "Amount of time relative to the message sent time until the location can be updated, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Title of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "URL of the result thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_width": {
                "description": "Thumbnail width, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "thumbnail_height": {
                "description": "Thumbnail height, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultPhoto": {
        "comment": "Represents link to a JPEG image",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "A short description of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "URL of the photo thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo_url": {
                "description": "The URL of the JPEG photo (photo size must not exceed 5MB)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo_width": {
                "description": "Width of the photo",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "photo_height": {
                "description": "Height of the photo",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultSticker": {
        "comment": "Represents a link to a WEBP, TGS, or WEBM sticker",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "URL of the sticker thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sticker_url": {
                "description": "The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed 5MB)",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sticker_width": {
                "description": "Width of the sticker",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "sticker_height": {
                "description": "Height of the sticker",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultVenue": {
        "comment": "Represents information about a venue",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "venue": {
                "description": "Venue result",
                "nullable": false,
                "type": "Venue",
                "tl": "Venue",
                "enum": 2
            },
            "thumbnail_url": {
                "description": "URL of the result thumbnail, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_width": {
                "description": "Thumbnail width, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "thumbnail_height": {
                "description": "Thumbnail height, if known",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultVideo": {
        "comment": "Represents a link to a page containing an embedded video player or a video file",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "A short description of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail_url": {
                "description": "The URL of the video thumbnail (JPEG), if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video_url": {
                "description": "URL of the embedded video player or video file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "mime_type": {
                "description": "MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video_width": {
                "description": "Width of the video",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_height": {
                "description": "Height of the video",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "video_duration": {
                "description": "Video duration, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputInlineQueryResultVoiceNote": {
        "comment": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "title": {
                "description": "Title of the voice note",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "voice_note_url": {
                "description": "The URL of the voice note file",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "voice_note_duration": {
                "description": "Duration of the voice note, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            },
            "input_message_content": {
                "description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact",
                "nullable": false,
                "type": "InputMessageContent",
                "tl": "InputMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultArticle": {
        "comment": "Represents a link to an article or web page",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "URL of the result, if it exists",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "hide_url": {
                "description": "True, if the URL must be not shown",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "title": {
                "description": "Title of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "A short description of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail": {
                "description": "Result thumbnail in JPEG format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultContact": {
        "comment": "Represents a user contact",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "contact": {
                "description": "A user contact",
                "nullable": false,
                "type": "Contact",
                "tl": "Contact",
                "enum": 2
            },
            "thumbnail": {
                "description": "Result thumbnail in JPEG format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultLocation": {
        "comment": "Represents a point on the map",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "location": {
                "description": "Location result",
                "nullable": false,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "title": {
                "description": "Title of the result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "thumbnail": {
                "description": "Result thumbnail in JPEG format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultVenue": {
        "comment": "Represents information about a venue",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "venue": {
                "description": "Venue result",
                "nullable": false,
                "type": "Venue",
                "tl": "Venue",
                "enum": 2
            },
            "thumbnail": {
                "description": "Result thumbnail in JPEG format; may be null",
                "nullable": true,
                "type": "Thumbnail",
                "tl": "Thumbnail",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultGame": {
        "comment": "Represents information about a game",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "game": {
                "description": "Game result",
                "nullable": false,
                "type": "Game",
                "tl": "Game",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultAnimation": {
        "comment": "Represents an animation file",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "animation": {
                "description": "Animation file",
                "nullable": false,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "title": {
                "description": "Animation title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultAudio": {
        "comment": "Represents an audio file",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "audio": {
                "description": "Audio file",
                "nullable": false,
                "type": "Audio",
                "tl": "Audio",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultDocument": {
        "comment": "Represents a document",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "document": {
                "description": "Document",
                "nullable": false,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "title": {
                "description": "Document title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Document description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultPhoto": {
        "comment": "Represents a photo",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "photo": {
                "description": "Photo",
                "nullable": false,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "title": {
                "description": "Title of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "A short description of the result, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultSticker": {
        "comment": "Represents a sticker",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sticker": {
                "description": "Sticker",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultVideo": {
        "comment": "Represents a video",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "video": {
                "description": "Video",
                "nullable": false,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "title": {
                "description": "Title of the video",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "description": {
                "description": "Description of the video",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResultVoiceNote": {
        "comment": "Represents a voice note",
        "parameters": {
            "id": {
                "description": "Unique identifier of the query result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "voice_note": {
                "description": "Voice note",
                "nullable": false,
                "type": "VoiceNote",
                "tl": "VoiceNote",
                "enum": 2
            },
            "title": {
                "description": "Title of the voice note",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InlineQueryResults": {
        "comment": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query",
        "parameters": {
            "inline_query_id": {
                "description": "Unique identifier of the inline query",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "next_offset": {
                "description": "The offset for the next request. If empty, there are no more results",
                "nullable": true,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "results": {
                "description": "Results of the query",
                "nullable": false,
                "type": "List<InlineQueryResult>",
                "tl": "InlineQueryResult",
                "enum": 4
            },
            "switch_pm_text": {
                "description": "If non-empty, this text must be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "switch_pm_parameter": {
                "description": "Parameter for the bot start message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallbackQueryPayloadData": {
        "comment": "The payload for a general callback button",
        "parameters": {
            "data": {
                "description": "Data that was attached to the callback button",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallbackQueryPayloadDataWithPassword": {
        "comment": "The payload for a callback button requiring password",
        "parameters": {
            "password": {
                "description": "The 2-step verification password for the current user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "data": {
                "description": "Data that was attached to the callback button",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallbackQueryPayloadGame": {
        "comment": "The payload for a game callback button",
        "parameters": {
            "game_short_name": {
                "description": "A short name of the game that was attached to the callback button",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CallbackQueryAnswer": {
        "comment": "Contains a bot's answer to a callback query",
        "parameters": {
            "text": {
                "description": "Text of the answer",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "show_alert": {
                "description": "True, if an alert must be shown to the user instead of a toast notification",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "url": {
                "description": "URL to be opened",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CustomRequestResult": {
        "comment": "Contains the result of a custom request",
        "parameters": {
            "result": {
                "description": "A JSON-serialized result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GameHighScore": {
        "comment": "Contains one row of the game high score table",
        "parameters": {
            "position": {
                "description": "Position in the high score table",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "score": {
                "description": "User score",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "GameHighScores": {
        "comment": "Contains a list of game high scores",
        "parameters": {
            "scores": {
                "description": "A list of game high scores",
                "nullable": false,
                "type": "List<GameHighScore>",
                "tl": "GameHighScore",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMessageEdited": {
        "comment": "A message was edited",
        "parameters": {
            "old_message": {
                "description": "The original message before the edit",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "new_message": {
                "description": "The message after it was edited",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMessageDeleted": {
        "comment": "A message was deleted",
        "parameters": {
            "message": {
                "description": "Deleted message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "can_report_anti_spam_false_positive": {
                "description": "True, if the message deletion can be reported via reportSupergroupAntiSpamFalsePositive",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMessagePinned": {
        "comment": "A message was pinned",
        "parameters": {
            "message": {
                "description": "Pinned message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMessageUnpinned": {
        "comment": "A message was unpinned",
        "parameters": {
            "message": {
                "description": "Unpinned message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventPollStopped": {
        "comment": "A poll in a message was stopped",
        "parameters": {
            "message": {
                "description": "The message with the poll",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberJoined": {
        "comment": "A new member joined the chat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberJoinedByInviteLink": {
        "comment": "A new member joined the chat via an invite link",
        "parameters": {
            "invite_link": {
                "description": "Invite link used to join the chat",
                "nullable": false,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberJoinedByRequest": {
        "comment": "A new member was accepted to the chat by an administrator",
        "parameters": {
            "approver_user_id": {
                "description": "User identifier of the chat administrator, approved user join request",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invite_link": {
                "description": "Invite link used to join the chat; may be null",
                "nullable": true,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberInvited": {
        "comment": "A new chat member was invited",
        "parameters": {
            "user_id": {
                "description": "New member user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "status": {
                "description": "New member status",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberLeft": {
        "comment": "A member left the chat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberPromoted": {
        "comment": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed",
        "parameters": {
            "user_id": {
                "description": "Affected chat member user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "old_status": {
                "description": "Previous status of the chat member",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            },
            "new_status": {
                "description": "New status of the chat member",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMemberRestricted": {
        "comment": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed",
        "parameters": {
            "member_id": {
                "description": "Affected chat member identifier",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "old_status": {
                "description": "Previous status of the chat member",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            },
            "new_status": {
                "description": "New status of the chat member",
                "nullable": false,
                "type": "ChatMemberStatus",
                "tl": "ChatMemberStatus",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventAvailableReactionsChanged": {
        "comment": "The chat available reactions were changed",
        "parameters": {
            "old_available_reactions": {
                "description": "Previous chat available reactions",
                "nullable": false,
                "type": "ChatAvailableReactions",
                "tl": "ChatAvailableReactions",
                "enum": 2
            },
            "new_available_reactions": {
                "description": "New chat available reactions",
                "nullable": false,
                "type": "ChatAvailableReactions",
                "tl": "ChatAvailableReactions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventDescriptionChanged": {
        "comment": "The chat description was changed",
        "parameters": {
            "old_description": {
                "description": "Previous chat description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_description": {
                "description": "New chat description",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventLinkedChatChanged": {
        "comment": "The linked chat of a supergroup was changed",
        "parameters": {
            "old_linked_chat_id": {
                "description": "Previous supergroup linked chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "new_linked_chat_id": {
                "description": "New supergroup linked chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventLocationChanged": {
        "comment": "The supergroup location was changed",
        "parameters": {
            "old_location": {
                "description": "Previous location; may be null",
                "nullable": true,
                "type": "ChatLocation",
                "tl": "ChatLocation",
                "enum": 2
            },
            "new_location": {
                "description": "New location; may be null",
                "nullable": true,
                "type": "ChatLocation",
                "tl": "ChatLocation",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventMessageAutoDeleteTimeChanged": {
        "comment": "The message auto-delete timer was changed",
        "parameters": {
            "old_message_auto_delete_time": {
                "description": "Previous value of message_auto_delete_time",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "new_message_auto_delete_time": {
                "description": "New value of message_auto_delete_time",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventPermissionsChanged": {
        "comment": "The chat permissions was changed",
        "parameters": {
            "old_permissions": {
                "description": "Previous chat permissions",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            },
            "new_permissions": {
                "description": "New chat permissions",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventPhotoChanged": {
        "comment": "The chat photo was changed",
        "parameters": {
            "old_photo": {
                "description": "Previous chat photo value; may be null",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            },
            "new_photo": {
                "description": "New chat photo value; may be null",
                "nullable": true,
                "type": "ChatPhoto",
                "tl": "ChatPhoto",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventSlowModeDelayChanged": {
        "comment": "The slow_mode_delay setting of a supergroup was changed",
        "parameters": {
            "old_slow_mode_delay": {
                "description": "Previous value of slow_mode_delay, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "new_slow_mode_delay": {
                "description": "New value of slow_mode_delay, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventStickerSetChanged": {
        "comment": "The supergroup sticker set was changed",
        "parameters": {
            "old_sticker_set_id": {
                "description": "Previous identifier of the chat sticker set; 0 if none",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "new_sticker_set_id": {
                "description": "New identifier of the chat sticker set; 0 if none",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventTitleChanged": {
        "comment": "The chat title was changed",
        "parameters": {
            "old_title": {
                "description": "Previous chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_title": {
                "description": "New chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventUsernameChanged": {
        "comment": "The chat editable username was changed",
        "parameters": {
            "old_username": {
                "description": "Previous chat username",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "new_username": {
                "description": "New chat username",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventActiveUsernamesChanged": {
        "comment": "The chat active usernames were changed",
        "parameters": {
            "old_usernames": {
                "description": "Previous list of active usernames",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            },
            "new_usernames": {
                "description": "New list of active usernames",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventHasProtectedContentToggled": {
        "comment": "The has_protected_content setting of a channel was toggled",
        "parameters": {
            "has_protected_content": {
                "description": "New value of has_protected_content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventInvitesToggled": {
        "comment": "The can_invite_users permission of a supergroup chat was toggled",
        "parameters": {
            "can_invite_users": {
                "description": "New value of can_invite_users permission",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventIsAllHistoryAvailableToggled": {
        "comment": "The is_all_history_available setting of a supergroup was toggled",
        "parameters": {
            "is_all_history_available": {
                "description": "New value of is_all_history_available",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventHasAggressiveAntiSpamEnabledToggled": {
        "comment": "The has_aggressive_anti_spam_enabled setting of a supergroup was toggled",
        "parameters": {
            "has_aggressive_anti_spam_enabled": {
                "description": "New value of has_aggressive_anti_spam_enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventSignMessagesToggled": {
        "comment": "The sign_messages setting of a channel was toggled",
        "parameters": {
            "sign_messages": {
                "description": "New value of sign_messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventInviteLinkEdited": {
        "comment": "A chat invite link was edited",
        "parameters": {
            "old_invite_link": {
                "description": "Previous information about the invite link",
                "nullable": false,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            },
            "new_invite_link": {
                "description": "New information about the invite link",
                "nullable": false,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventInviteLinkRevoked": {
        "comment": "A chat invite link was revoked",
        "parameters": {
            "invite_link": {
                "description": "The invite link",
                "nullable": false,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventInviteLinkDeleted": {
        "comment": "A revoked chat invite link was deleted",
        "parameters": {
            "invite_link": {
                "description": "The invite link",
                "nullable": false,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventVideoChatCreated": {
        "comment": "A video chat was created",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of the video chat. The video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventVideoChatEnded": {
        "comment": "A video chat was ended",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of the video chat. The video chat can be received through the method getGroupCall",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventVideoChatMuteNewParticipantsToggled": {
        "comment": "The mute_new_participants setting of a video chat was toggled",
        "parameters": {
            "mute_new_participants": {
                "description": "New value of the mute_new_participants setting",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventVideoChatParticipantIsMutedToggled": {
        "comment": "A video chat participant was muted or unmuted",
        "parameters": {
            "participant_id": {
                "description": "Identifier of the affected group call participant",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "is_muted": {
                "description": "New value of is_muted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventVideoChatParticipantVolumeLevelChanged": {
        "comment": "A video chat participant volume level was changed",
        "parameters": {
            "participant_id": {
                "description": "Identifier of the affected group call participant",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "volume_level": {
                "description": "New value of volume_level; 1-20000 in hundreds of percents",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventIsForumToggled": {
        "comment": "The is_forum setting of a channel was toggled",
        "parameters": {
            "is_forum": {
                "description": "New value of is_forum",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicCreated": {
        "comment": "A new forum topic was created",
        "parameters": {
            "topic_info": {
                "description": "Information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicEdited": {
        "comment": "A forum topic was edited",
        "parameters": {
            "old_topic_info": {
                "description": "Old information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            },
            "new_topic_info": {
                "description": "New information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicToggleIsClosed": {
        "comment": "A forum topic was closed or reopened",
        "parameters": {
            "topic_info": {
                "description": "New information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicToggleIsHidden": {
        "comment": "The General forum topic was hidden or unhidden",
        "parameters": {
            "topic_info": {
                "description": "New information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicDeleted": {
        "comment": "A forum topic was deleted",
        "parameters": {
            "topic_info": {
                "description": "Information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventForumTopicPinned": {
        "comment": "A pinned forum topic was changed",
        "parameters": {
            "old_topic_info": {
                "description": "Information about the old pinned topic; may be null",
                "nullable": true,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            },
            "new_topic_info": {
                "description": "Information about the new pinned topic; may be null",
                "nullable": true,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEvent": {
        "comment": "Represents a chat event",
        "parameters": {
            "id": {
                "description": "Chat event identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the event happened",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "member_id": {
                "description": "Identifier of the user or chat who performed the action",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "action": {
                "description": "The action",
                "nullable": false,
                "type": "ChatEventAction",
                "tl": "ChatEventAction",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEvents": {
        "comment": "Contains a list of chat events",
        "parameters": {
            "events": {
                "description": "List of events",
                "nullable": false,
                "type": "List<ChatEvent>",
                "tl": "ChatEvent",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatEventLogFilters": {
        "comment": "Represents a set of filters used to obtain a chat event log",
        "parameters": {
            "message_edits": {
                "description": "True, if message edits need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "message_deletions": {
                "description": "True, if message deletions need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "message_pins": {
                "description": "True, if pin/unpin events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "member_joins": {
                "description": "True, if members joining events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "member_leaves": {
                "description": "True, if members leaving events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "member_invites": {
                "description": "True, if invited member events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "member_promotions": {
                "description": "True, if member promotion/demotion events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "member_restrictions": {
                "description": "True, if member restricted/unrestricted/banned/unbanned events need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "info_changes": {
                "description": "True, if changes in chat information need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "setting_changes": {
                "description": "True, if changes in chat settings need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "invite_link_changes": {
                "description": "True, if changes to invite links need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "video_chat_changes": {
                "description": "True, if video chat actions need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "forum_changes": {
                "description": "True, if forum-related actions need to be returned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LanguagePackStringValueOrdinary": {
        "comment": "An ordinary language pack string",
        "parameters": {
            "value": {
                "description": "String value",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LanguagePackStringValuePluralized": {
        "comment": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information",
        "parameters": {
            "zero_value": {
                "description": "Value for zero objects",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "one_value": {
                "description": "Value for one object",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "two_value": {
                "description": "Value for two objects",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "few_value": {
                "description": "Value for few objects",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "many_value": {
                "description": "Value for many objects",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "other_value": {
                "description": "Default value",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LanguagePackStringValueDeleted": {
        "comment": "A deleted language pack string, the value must be taken from the built-in English language pack",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "LanguagePackString": {
        "comment": "Represents one language pack string",
        "parameters": {
            "key": {
                "description": "String key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "value": {
                "description": "String value; pass null if the string needs to be taken from the built-in English language pack",
                "nullable": true,
                "type": "LanguagePackStringValue",
                "tl": "LanguagePackStringValue",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "LanguagePackStrings": {
        "comment": "Contains a list of language pack strings",
        "parameters": {
            "strings": {
                "description": "A list of language pack strings",
                "nullable": false,
                "type": "List<LanguagePackString>",
                "tl": "LanguagePackString",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "LanguagePackInfo": {
        "comment": "Contains information about a language pack",
        "parameters": {
            "id": {
                "description": "Unique language pack identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "base_language_pack_id": {
                "description": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it must be fetched from base language pack. Unsupported in custom language packs",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "name": {
                "description": "Language name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "native_name": {
                "description": "Name of the language in that language",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "plural_code": {
                "description": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_official": {
                "description": "True, if the language pack is official",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_rtl": {
                "description": "True, if the language pack strings are RTL",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_beta": {
                "description": "True, if the language pack is a beta language pack",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_installed": {
                "description": "True, if the language pack is installed by the current user",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "total_string_count": {
                "description": "Total number of non-deleted strings from the language pack",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "translated_string_count": {
                "description": "Total number of translated strings from the language pack",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "local_string_count": {
                "description": "Total number of non-deleted strings from the language pack available locally",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "translation_url": {
                "description": "Link to language translation interface; empty for custom local language packs",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LocalizationTargetInfo": {
        "comment": "Contains information about the current localization target",
        "parameters": {
            "language_packs": {
                "description": "List of available language packs for this application",
                "nullable": false,
                "type": "List<LanguagePackInfo>",
                "tl": "LanguagePackInfo",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeSupergroupCount": {
        "comment": "The maximum number of joined supergroups and channels",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypePinnedChatCount": {
        "comment": "The maximum number of pinned chats in the main chat list",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeCreatedPublicChatCount": {
        "comment": "The maximum number of created public chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeSavedAnimationCount": {
        "comment": "The maximum number of saved animations",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeFavoriteStickerCount": {
        "comment": "The maximum number of favorite stickers",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeChatFilterCount": {
        "comment": "The maximum number of chat filters",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeChatFilterChosenChatCount": {
        "comment": "The maximum number of pinned and always included, or always excluded chats in a chat filter",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypePinnedArchivedChatCount": {
        "comment": "The maximum number of pinned chats in the archive chat list",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeCaptionLength": {
        "comment": "The maximum length of sent media caption",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimitTypeBioLength": {
        "comment": "The maximum length of the user's bio",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureIncreasedLimits": {
        "comment": "Increased limits",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureIncreasedUploadFileSize": {
        "comment": "Increased maximum upload file size",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureImprovedDownloadSpeed": {
        "comment": "Improved download speed",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureVoiceRecognition": {
        "comment": "The ability to convert voice notes to text",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureDisabledAds": {
        "comment": "Disabled ads",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureUniqueReactions": {
        "comment": "Allowed to use more reactions",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureUniqueStickers": {
        "comment": "Allowed to use premium stickers with unique effects",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureCustomEmoji": {
        "comment": "Allowed to use custom emoji stickers in message texts and captions",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureAdvancedChatManagement": {
        "comment": "Ability to change position of the main chat list, archive and mute all new chats from non-contacts, and completely disable notifications about the user's contacts joined Telegram",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureProfileBadge": {
        "comment": "A badge in the user's profile",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureEmojiStatus": {
        "comment": "A emoji status shown along with the user's name",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureAnimatedProfilePhoto": {
        "comment": "Profile photo animation on message and chat screens",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureForumTopicIcon": {
        "comment": "The ability to set a custom emoji as a forum topic icon",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeatureAppIcons": {
        "comment": "Allowed to set a premium appllication icons",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumLimit": {
        "comment": "Contains information about a limit, increased for Premium users",
        "parameters": {
            "type": {
                "description": "The type of the limit",
                "nullable": false,
                "type": "PremiumLimitType",
                "tl": "PremiumLimitType",
                "enum": 2
            },
            "default_value": {
                "description": "Default value of the limit",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "premium_value": {
                "description": "Value of the limit for Premium users",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumFeatures": {
        "comment": "Contains information about features, available to Premium users",
        "parameters": {
            "features": {
                "description": "The list of available features",
                "nullable": false,
                "type": "List<PremiumFeature>",
                "tl": "PremiumFeature",
                "enum": 4
            },
            "limits": {
                "description": "The list of limits, increased for Premium users",
                "nullable": false,
                "type": "List<PremiumLimit>",
                "tl": "PremiumLimit",
                "enum": 4
            },
            "payment_link": {
                "description": "An internal link to be opened to pay for Telegram Premium if store payment isn't possible; may be null if direct payment isn't available",
                "nullable": true,
                "type": "InternalLinkType",
                "tl": "InternalLinkType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumSourceLimitExceeded": {
        "comment": "A limit was exceeded",
        "parameters": {
            "limit_type": {
                "description": "Type of the exceeded limit",
                "nullable": false,
                "type": "PremiumLimitType",
                "tl": "PremiumLimitType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumSourceFeature": {
        "comment": "A user tried to use a Premium feature",
        "parameters": {
            "feature": {
                "description": "The used feature",
                "nullable": false,
                "type": "PremiumFeature",
                "tl": "PremiumFeature",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumSourceLink": {
        "comment": "A user opened an internal link of the type internalLinkTypePremiumFeatures",
        "parameters": {
            "referrer": {
                "description": "The referrer from the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumSourceSettings": {
        "comment": "A user opened the Premium features screen from settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PremiumFeaturePromotionAnimation": {
        "comment": "Describes a promotion animation for a Premium feature",
        "parameters": {
            "feature": {
                "description": "Premium feature",
                "nullable": false,
                "type": "PremiumFeature",
                "tl": "PremiumFeature",
                "enum": 2
            },
            "animation": {
                "description": "Promotion animation for the feature",
                "nullable": false,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "PremiumState": {
        "comment": "Contains state of Telegram Premium subscription and promotion videos for Premium features",
        "parameters": {
            "state": {
                "description": "Text description of the state of the current Premium subscription; may be empty if the current user has no Telegram Premium subscription",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "payment_options": {
                "description": "The list of available options for buying Telegram Premium",
                "nullable": false,
                "type": "List<PremiumPaymentOption>",
                "tl": "PremiumPaymentOption",
                "enum": 4
            },
            "animations": {
                "description": "The list of available promotion animations for Premium features",
                "nullable": false,
                "type": "List<PremiumFeaturePromotionAnimation>",
                "tl": "PremiumFeaturePromotionAnimation",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "StorePaymentPurposePremiumSubscription": {
        "comment": "The user subscribed to Telegram Premium",
        "parameters": {
            "is_restore": {
                "description": "Pass true if this is a restore of a Telegram Premium purchase; only for App Store",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StorePaymentPurposeGiftedPremium": {
        "comment": "The user gifted Telegram Premium to another user",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user for which Premium was gifted",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "currency": {
                "description": "ISO 4217 currency code of the payment currency",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "amount": {
                "description": "Paid amount, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenFirebaseCloudMessaging": {
        "comment": "A token for Firebase Cloud Messaging",
        "parameters": {
            "token": {
                "description": "Device registration token; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "encrypt": {
                "description": "True, if push notifications must be additionally encrypted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenApplePush": {
        "comment": "A token for Apple Push Notification service",
        "parameters": {
            "device_token": {
                "description": "Device token; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_app_sandbox": {
                "description": "True, if App Sandbox is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenApplePushVoIP": {
        "comment": "A token for Apple Push Notification service VoIP notifications",
        "parameters": {
            "device_token": {
                "description": "Device token; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_app_sandbox": {
                "description": "True, if App Sandbox is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "encrypt": {
                "description": "True, if push notifications must be additionally encrypted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenWindowsPush": {
        "comment": "A token for Windows Push Notification Services",
        "parameters": {
            "access_token": {
                "description": "The access token that will be used to send notifications; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenMicrosoftPush": {
        "comment": "A token for Microsoft Push Notification Service",
        "parameters": {
            "channel_uri": {
                "description": "Push notification channel URI; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenMicrosoftPushVoIP": {
        "comment": "A token for Microsoft Push Notification Service VoIP channel",
        "parameters": {
            "channel_uri": {
                "description": "Push notification channel URI; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenWebPush": {
        "comment": "A token for web Push API",
        "parameters": {
            "endpoint": {
                "description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "p256dh_base64url": {
                "description": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "auth_base64url": {
                "description": "Base64url-encoded authentication secret",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenSimplePush": {
        "comment": "A token for Simple Push API for Firefox OS",
        "parameters": {
            "endpoint": {
                "description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenUbuntuPush": {
        "comment": "A token for Ubuntu Push Client service",
        "parameters": {
            "token": {
                "description": "Token; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenBlackBerryPush": {
        "comment": "A token for BlackBerry Push Service",
        "parameters": {
            "token": {
                "description": "Token; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeviceTokenTizenPush": {
        "comment": "A token for Tizen Push Service",
        "parameters": {
            "reg_id": {
                "description": "Push service registration identifier; may be empty to deregister a device",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushReceiverId": {
        "comment": "Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification",
        "parameters": {
            "id": {
                "description": "The globally unique identifier of push notification subscription",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundFillSolid": {
        "comment": "Describes a solid fill of a background",
        "parameters": {
            "color": {
                "description": "A color of the background in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundFillGradient": {
        "comment": "Describes a gradient fill of a background",
        "parameters": {
            "top_color": {
                "description": "A top color of the background in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "bottom_color": {
                "description": "A bottom color of the background in the RGB24 format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "rotation_angle": {
                "description": "Clockwise rotation angle of the gradient, in degrees; 0-359. Must always be divisible by 45",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundFillFreeformGradient": {
        "comment": "Describes a freeform gradient fill of a background",
        "parameters": {
            "colors": {
                "description": "A list of 3 or 4 colors of the freeform gradients in the RGB24 format",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundTypeWallpaper": {
        "comment": "A wallpaper in JPEG format",
        "parameters": {
            "is_blurred": {
                "description": "True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_moving": {
                "description": "True, if the background needs to be slightly moved when device is tilted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundTypePattern": {
        "comment": "A PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern to be combined with the background fill chosen by the user",
        "parameters": {
            "fill": {
                "description": "Fill of the background",
                "nullable": false,
                "type": "BackgroundFill",
                "tl": "BackgroundFill",
                "enum": 2
            },
            "intensity": {
                "description": "Intensity of the pattern when it is shown above the filled background; 0-100.",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_inverted": {
                "description": "True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_moving": {
                "description": "True, if the background needs to be slightly moved when device is tilted",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BackgroundTypeFill": {
        "comment": "A filled background",
        "parameters": {
            "fill": {
                "description": "The background fill",
                "nullable": false,
                "type": "BackgroundFill",
                "tl": "BackgroundFill",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Background": {
        "comment": "Describes a chat background",
        "parameters": {
            "id": {
                "description": "Unique background identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "is_default": {
                "description": "True, if this is one of default backgrounds",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_dark": {
                "description": "True, if the background is dark and is recommended to be used with dark theme",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "name": {
                "description": "Unique background name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "document": {
                "description": "Document with the background; may be null. Null only for filled backgrounds",
                "nullable": true,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "type": {
                "description": "Type of the background",
                "nullable": false,
                "type": "BackgroundType",
                "tl": "BackgroundType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Backgrounds": {
        "comment": "Contains a list of backgrounds",
        "parameters": {
            "backgrounds": {
                "description": "A list of backgrounds",
                "nullable": false,
                "type": "List<Background>",
                "tl": "Background",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputBackgroundLocal": {
        "comment": "A background from a local file",
        "parameters": {
            "background": {
                "description": "Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file must be in JPEG format for wallpapers and in PNG format for patterns",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputBackgroundRemote": {
        "comment": "A background from the server",
        "parameters": {
            "background_id": {
                "description": "The background identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ThemeSettings": {
        "comment": "Describes theme settings",
        "parameters": {
            "accent_color": {
                "description": "Theme accent color in ARGB format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "background": {
                "description": "The background to be used in chats; may be null",
                "nullable": true,
                "type": "Background",
                "tl": "Background",
                "enum": 2
            },
            "outgoing_message_fill": {
                "description": "The fill to be used as a background for outgoing messages",
                "nullable": false,
                "type": "BackgroundFill",
                "tl": "BackgroundFill",
                "enum": 2
            },
            "animate_outgoing_message_fill": {
                "description": "If true, the freeform gradient fill needs to be animated on every sent message",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "outgoing_message_accent_color": {
                "description": "Accent color of outgoing messages in ARGB format",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatTheme": {
        "comment": "Describes a chat theme",
        "parameters": {
            "name": {
                "description": "Theme name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "light_settings": {
                "description": "Theme settings for a light chat theme",
                "nullable": false,
                "type": "ThemeSettings",
                "tl": "ThemeSettings",
                "enum": 2
            },
            "dark_settings": {
                "description": "Theme settings for a dark chat theme",
                "nullable": false,
                "type": "ThemeSettings",
                "tl": "ThemeSettings",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Hashtags": {
        "comment": "Contains a list of hashtags",
        "parameters": {
            "hashtags": {
                "description": "A list of hashtags",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "CanTransferOwnershipResultOk": {
        "comment": "The session can be used",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CanTransferOwnershipResultPasswordNeeded": {
        "comment": "The 2-step verification needs to be enabled first",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CanTransferOwnershipResultPasswordTooFresh": {
        "comment": "The 2-step verification was enabled recently, user needs to wait",
        "parameters": {
            "retry_after": {
                "description": "Time left before the session can be used to transfer ownership of a chat, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CanTransferOwnershipResultSessionTooFresh": {
        "comment": "The session was created recently, user needs to wait",
        "parameters": {
            "retry_after": {
                "description": "Time left before the session can be used to transfer ownership of a chat, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultOk": {
        "comment": "The username can be set",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultUsernameInvalid": {
        "comment": "The username is invalid",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultUsernameOccupied": {
        "comment": "The username is occupied",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultUsernamePurchasable": {
        "comment": "The username can be purchased at fragment.com",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultPublicChatsTooMany": {
        "comment": "The user has too many chats with username, one of them must be made private first",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckChatUsernameResultPublicGroupsUnavailable": {
        "comment": "The user can't be a member of a public supergroup",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckStickerSetNameResultOk": {
        "comment": "The name can be set",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckStickerSetNameResultNameInvalid": {
        "comment": "The name is invalid",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "CheckStickerSetNameResultNameOccupied": {
        "comment": "The name is occupied",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ResetPasswordResultOk": {
        "comment": "The password was reset",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ResetPasswordResultPending": {
        "comment": "The password reset request is pending",
        "parameters": {
            "pending_reset_date": {
                "description": "Point in time (Unix timestamp) after which the password can be reset immediately using resetPassword",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ResetPasswordResultDeclined": {
        "comment": "The password reset request was declined",
        "parameters": {
            "retry_date": {
                "description": "Point in time (Unix timestamp) when the password reset can be retried",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageFileTypePrivate": {
        "comment": "The messages was exported from a private chat",
        "parameters": {
            "name": {
                "description": "Name of the other party; may be empty if unrecognized",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageFileTypeGroup": {
        "comment": "The messages was exported from a group chat",
        "parameters": {
            "title": {
                "description": "Title of the group chat; may be empty if unrecognized",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageFileTypeUnknown": {
        "comment": "The messages was exported from a chat of unknown type",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentHidden": {
        "comment": "A general message with hidden content",
        "parameters": {
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentAnimation": {
        "comment": "An animation message (GIF-style).",
        "parameters": {
            "animation": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Animation",
                "tl": "Animation",
                "enum": 2
            },
            "caption": {
                "description": "Animation caption",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentAudio": {
        "comment": "An audio message",
        "parameters": {
            "audio": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Audio",
                "tl": "Audio",
                "enum": 2
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentContact": {
        "comment": "A message with a user contact",
        "parameters": {
            "name": {
                "description": "Contact's name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentContactRegistered": {
        "comment": "A contact has registered with Telegram",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentDocument": {
        "comment": "A document message (a general file)",
        "parameters": {
            "document": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Document",
                "tl": "Document",
                "enum": 2
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentGame": {
        "comment": "A message with a game",
        "parameters": {
            "title": {
                "description": "Game title, empty for pinned game message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentGameScore": {
        "comment": "A new high score was achieved in a game",
        "parameters": {
            "title": {
                "description": "Game title, empty for pinned message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "score": {
                "description": "New score, 0 for pinned message",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentInvoice": {
        "comment": "A message with an invoice from a bot",
        "parameters": {
            "price": {
                "description": "Product price",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentLocation": {
        "comment": "A message with a location",
        "parameters": {
            "is_live": {
                "description": "True, if the location is live",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentPhoto": {
        "comment": "A photo message",
        "parameters": {
            "photo": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Photo",
                "tl": "Photo",
                "enum": 2
            },
            "caption": {
                "description": "Photo caption",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the photo is secret",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentPoll": {
        "comment": "A message with a poll",
        "parameters": {
            "question": {
                "description": "Poll question",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_regular": {
                "description": "True, if the poll is regular and not in quiz mode",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentScreenshotTaken": {
        "comment": "A screenshot of a message in the chat has been taken",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentSticker": {
        "comment": "A message with a sticker",
        "parameters": {
            "sticker": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            },
            "emoji": {
                "description": "Emoji corresponding to the sticker; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentText": {
        "comment": "A text message",
        "parameters": {
            "text": {
                "description": "Message text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentVideo": {
        "comment": "A video message",
        "parameters": {
            "video": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "Video",
                "tl": "Video",
                "enum": 2
            },
            "caption": {
                "description": "Video caption",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_secret": {
                "description": "True, if the video is secret",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentVideoNote": {
        "comment": "A video note message",
        "parameters": {
            "video_note": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "VideoNote",
                "tl": "VideoNote",
                "enum": 2
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentVoiceNote": {
        "comment": "A voice note message",
        "parameters": {
            "voice_note": {
                "description": "Message content; may be null",
                "nullable": true,
                "type": "VoiceNote",
                "tl": "VoiceNote",
                "enum": 2
            },
            "is_pinned": {
                "description": "True, if the message is a pinned message with the specified content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentBasicGroupChatCreate": {
        "comment": "A newly created basic group",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatAddMembers": {
        "comment": "New chat members were invited to a group",
        "parameters": {
            "member_name": {
                "description": "Name of the added member",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_current_user": {
                "description": "True, if the current user was added to the group",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_returned": {
                "description": "True, if the user has returned to the group themselves",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatChangePhoto": {
        "comment": "A chat photo was edited",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatChangeTitle": {
        "comment": "A chat title was edited",
        "parameters": {
            "title": {
                "description": "New chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatSetTheme": {
        "comment": "A chat theme was edited",
        "parameters": {
            "theme_name": {
                "description": "If non-empty, name of a new theme, set for the chat. Otherwise, the chat theme was reset to the default one",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatDeleteMember": {
        "comment": "A chat member was deleted",
        "parameters": {
            "member_name": {
                "description": "Name of the deleted member",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_current_user": {
                "description": "True, if the current user was deleted from the group",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_left": {
                "description": "True, if the user has left the group themselves",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatJoinByLink": {
        "comment": "A new member joined the chat via an invite link",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentChatJoinByRequest": {
        "comment": "A new member was accepted to the chat by an administrator",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentRecurringPayment": {
        "comment": "A new recurrent payment was made by the current user",
        "parameters": {
            "amount": {
                "description": "The paid amount",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentSuggestProfilePhoto": {
        "comment": "A profile photo was suggested to the user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "PushMessageContentMessageForwards": {
        "comment": "A forwarded messages",
        "parameters": {
            "total_count": {
                "description": "Number of forwarded messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "PushMessageContentMediaAlbum": {
        "comment": "A media album",
        "parameters": {
            "total_count": {
                "description": "Number of messages in the album",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "has_photos": {
                "description": "True, if the album has at least one photo",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_videos": {
                "description": "True, if the album has at least one video file",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_audios": {
                "description": "True, if the album has at least one audio file",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "has_documents": {
                "description": "True, if the album has at least one document",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationTypeNewMessage": {
        "comment": "New message was received",
        "parameters": {
            "message": {
                "description": "The message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "show_preview": {
                "description": "True, if message content must be displayed in notifications",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationTypeNewSecretChat": {
        "comment": "New secret chat was created",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationTypeNewCall": {
        "comment": "New call was received",
        "parameters": {
            "call_id": {
                "description": "Call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationTypeNewPushMessage": {
        "comment": "New message was received through a push notification",
        "parameters": {
            "message_id": {
                "description": "The message identifier. The message will not be available in the chat history, but the ID can be used in viewMessages, or as reply_to_message_id",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of the sender of the message. Corresponding user or chat may be inaccessible",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "sender_name": {
                "description": "Name of the sender",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_outgoing": {
                "description": "True, if the message is outgoing",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "content": {
                "description": "Push message content",
                "nullable": false,
                "type": "PushMessageContent",
                "tl": "PushMessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationGroupTypeMessages": {
        "comment": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationGroupTypeMentions": {
        "comment": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationGroupTypeSecretChat": {
        "comment": "A group containing a notification of type notificationTypeNewSecretChat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationGroupTypeCalls": {
        "comment": "A group containing notifications of type notificationTypeNewCall",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NotificationSound": {
        "comment": "Describes a notification sound in MP3 format",
        "parameters": {
            "id": {
                "description": "Unique identifier of the notification sound",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "duration": {
                "description": "Duration of the sound, in seconds",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the sound was created",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "title": {
                "description": "Title of the notification sound",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "data": {
                "description": "Arbitrary data, defined while the sound was uploaded",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "sound": {
                "description": "File containing the sound",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationSounds": {
        "comment": "Contains a list of notification sounds",
        "parameters": {
            "notification_sounds": {
                "description": "A list of notification sounds",
                "nullable": false,
                "type": "List<NotificationSound>",
                "tl": "NotificationSound",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "Notification": {
        "comment": "Contains information about a notification",
        "parameters": {
            "id": {
                "description": "Unique persistent identifier of this notification",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "date": {
                "description": "Notification date",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_silent": {
                "description": "True, if the notification was explicitly sent without sound",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Notification type",
                "nullable": false,
                "type": "NotificationType",
                "tl": "NotificationType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "NotificationGroup": {
        "comment": "Describes a group of notifications",
        "parameters": {
            "id": {
                "description": "Unique persistent auto-incremented from 1 identifier of the notification group",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Type of the group",
                "nullable": false,
                "type": "NotificationGroupType",
                "tl": "NotificationGroupType",
                "enum": 2
            },
            "chat_id": {
                "description": "Identifier of a chat to which all notifications in the group belong",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "total_count": {
                "description": "Total number of active notifications in the group",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "notifications": {
                "description": "The list of active notifications",
                "nullable": false,
                "type": "List<Notification>",
                "tl": "Notification",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "OptionValueBoolean": {
        "comment": "Represents a boolean option",
        "parameters": {
            "value": {
                "description": "The value of the option",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "OptionValueEmpty": {
        "comment": "Represents an unknown option or an option which has a default value",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "OptionValueInteger": {
        "comment": "Represents an integer option",
        "parameters": {
            "value": {
                "description": "The value of the option",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "OptionValueString": {
        "comment": "Represents a string option",
        "parameters": {
            "value": {
                "description": "The value of the option",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonObjectMember": {
        "comment": "Represents one member of a JSON object",
        "parameters": {
            "key": {
                "description": "Member's key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "value": {
                "description": "Member's value",
                "nullable": false,
                "type": "JsonValue",
                "tl": "JsonValue",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonValueNull": {
        "comment": "Represents a null JSON value",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "JsonValueBoolean": {
        "comment": "Represents a boolean JSON value",
        "parameters": {
            "value": {
                "description": "The value",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonValueNumber": {
        "comment": "Represents a numeric JSON value",
        "parameters": {
            "value": {
                "description": "The value",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonValueString": {
        "comment": "Represents a string JSON value",
        "parameters": {
            "value": {
                "description": "The value",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonValueArray": {
        "comment": "Represents a JSON array",
        "parameters": {
            "values": {
                "description": "The list of array elements",
                "nullable": false,
                "type": "List<JsonValue>",
                "tl": "JsonValue",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "JsonValueObject": {
        "comment": "Represents a JSON object",
        "parameters": {
            "members": {
                "description": "The list of object members",
                "nullable": false,
                "type": "List<JsonObjectMember>",
                "tl": "JsonObjectMember",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleAllowAll": {
        "comment": "A rule to allow all users to do something",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleAllowContacts": {
        "comment": "A rule to allow all of a user's contacts to do something",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleAllowUsers": {
        "comment": "A rule to allow certain specified users to do something",
        "parameters": {
            "user_ids": {
                "description": "The user identifiers, total number of users in all rules must not exceed 1000",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleAllowChatMembers": {
        "comment": "A rule to allow all members of certain specified basic groups and supergroups to doing something",
        "parameters": {
            "chat_ids": {
                "description": "The chat identifiers, total number of chats in all rules must not exceed 20",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleRestrictAll": {
        "comment": "A rule to restrict all users from doing something",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleRestrictContacts": {
        "comment": "A rule to restrict all contacts of a user from doing something",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleRestrictUsers": {
        "comment": "A rule to restrict all specified users from doing something",
        "parameters": {
            "user_ids": {
                "description": "The user identifiers, total number of users in all rules must not exceed 1000",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRuleRestrictChatMembers": {
        "comment": "A rule to restrict all members of specified basic groups and supergroups from doing something",
        "parameters": {
            "chat_ids": {
                "description": "The chat identifiers, total number of chats in all rules must not exceed 20",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingRules": {
        "comment": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed",
        "parameters": {
            "rules": {
                "description": "A list of rules",
                "nullable": false,
                "type": "List<UserPrivacySettingRule>",
                "tl": "UserPrivacySettingRule",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingShowStatus": {
        "comment": "A privacy setting for managing whether the user's online status is visible",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingShowProfilePhoto": {
        "comment": "A privacy setting for managing whether the user's profile photo is visible",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingShowLinkInForwardedMessages": {
        "comment": "A privacy setting for managing whether a link to the user's account is included in forwarded messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingShowPhoneNumber": {
        "comment": "A privacy setting for managing whether the user's phone number is visible",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingAllowChatInvites": {
        "comment": "A privacy setting for managing whether the user can be invited to chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingAllowCalls": {
        "comment": "A privacy setting for managing whether the user can be called",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingAllowPeerToPeerCalls": {
        "comment": "A privacy setting for managing whether peer-to-peer connections can be used for calls",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingAllowFindingByPhoneNumber": {
        "comment": "A privacy setting for managing whether the user can be found by their phone number. Checked only if the phone number is not known to the other user. Can be set only to \"Allow contacts\" or \"Allow all\"",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages": {
        "comment": "A privacy setting for managing whether the user can receive voice and video messages in private chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "AccountTtl": {
        "comment": "Contains information about the period of inactivity after which the current user's account will automatically be deleted",
        "parameters": {
            "days": {
                "description": "Number of days of inactivity before the account will be flagged for deletion; 30-366 days",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageAutoDeleteTime": {
        "comment": "Contains default auto-delete timer setting for new chats",
        "parameters": {
            "time": {
                "description": "Message auto-delete time, in seconds. If 0, then messages aren't deleted automatically",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SessionTypeAndroid": {
        "comment": "The session is running on an Android device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeApple": {
        "comment": "The session is running on a generic Apple device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeBrave": {
        "comment": "The session is running on the Brave browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeChrome": {
        "comment": "The session is running on the Chrome browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeEdge": {
        "comment": "The session is running on the Edge browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeFirefox": {
        "comment": "The session is running on the Firefox browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeIpad": {
        "comment": "The session is running on an iPad device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeIphone": {
        "comment": "The session is running on an iPhone device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeLinux": {
        "comment": "The session is running on a Linux device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeMac": {
        "comment": "The session is running on a Mac device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeOpera": {
        "comment": "The session is running on the Opera browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeSafari": {
        "comment": "The session is running on the Safari browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeUbuntu": {
        "comment": "The session is running on an Ubuntu device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeUnknown": {
        "comment": "The session is running on an unknown type of device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeVivaldi": {
        "comment": "The session is running on the Vivaldi browser",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeWindows": {
        "comment": "The session is running on a Windows device",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SessionTypeXbox": {
        "comment": "The session is running on an Xbox console",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "Session": {
        "comment": "Contains information about one session in a Telegram application used by the current user. Sessions must be shown to the user in the returned order",
        "parameters": {
            "id": {
                "description": "Session identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "is_current": {
                "description": "True, if this session is the current session",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "is_password_pending": {
                "description": "True, if a 2-step verification password is needed to complete authorization of the session",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_accept_secret_chats": {
                "description": "True, if incoming secret chats can be accepted by the session",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "can_accept_calls": {
                "description": "True, if incoming calls can be accepted by the session",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Session type based on the system and application version, which can be used to display a corresponding icon",
                "nullable": false,
                "type": "SessionType",
                "tl": "SessionType",
                "enum": 2
            },
            "api_id": {
                "description": "Telegram API identifier, as provided by the application",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "application_name": {
                "description": "Name of the application, as provided by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "application_version": {
                "description": "The version of the application, as provided by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_official_application": {
                "description": "True, if the application is an official application or uses the api_id of an official application",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "device_model": {
                "description": "Model of the device the application has been run or is running on, as provided by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "platform": {
                "description": "Operating system the application has been run or is running on, as provided by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "system_version": {
                "description": "Version of the operating system the application has been run or is running on, as provided by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "log_in_date": {
                "description": "Point in time (Unix timestamp) when the user has logged in",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "last_active_date": {
                "description": "Point in time (Unix timestamp) when the session was last used",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "ip": {
                "description": "IP address from which the session was created, in human-readable format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "country": {
                "description": "A two-letter country code for the country from which the session was created, based on the IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "region": {
                "description": "Region code from which the session was created, based on the IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Sessions": {
        "comment": "Contains a list of sessions",
        "parameters": {
            "sessions": {
                "description": "List of sessions",
                "nullable": false,
                "type": "List<Session>",
                "tl": "Session",
                "enum": 4
            },
            "inactive_session_ttl_days": {
                "description": "Number of days of inactivity before sessions will automatically be terminated; 1-366 days",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ConnectedWebsite": {
        "comment": "Contains information about one website the current user is logged in with Telegram",
        "parameters": {
            "id": {
                "description": "Website identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "domain_name": {
                "description": "The domain name of the website",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "bot_user_id": {
                "description": "User identifier of a bot linked with the website",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "browser": {
                "description": "The version of a browser used to log in",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "platform": {
                "description": "Operating system the browser is running on",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "log_in_date": {
                "description": "Point in time (Unix timestamp) when the user was logged in",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "last_active_date": {
                "description": "Point in time (Unix timestamp) when obtained authorization was last used",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "ip": {
                "description": "IP address from which the user was logged in, in human-readable format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "location": {
                "description": "Human-readable description of a country and a region from which the user was logged in, based on the IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ConnectedWebsites": {
        "comment": "Contains a list of websites the current user is logged in with Telegram",
        "parameters": {
            "websites": {
                "description": "List of connected websites",
                "nullable": false,
                "type": "List<ConnectedWebsite>",
                "tl": "ConnectedWebsite",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonSpam": {
        "comment": "The chat contains spam messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonViolence": {
        "comment": "The chat promotes violence",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonPornography": {
        "comment": "The chat contains pornographic messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonChildAbuse": {
        "comment": "The chat has child abuse related content",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonCopyright": {
        "comment": "The chat contains copyrighted content",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonUnrelatedLocation": {
        "comment": "The location-based chat is unrelated to its stated location",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonFake": {
        "comment": "The chat represents a fake account",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonIllegalDrugs": {
        "comment": "The chat has illegal drugs related content",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonPersonalDetails": {
        "comment": "The chat contains messages with personal details",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ChatReportReasonCustom": {
        "comment": "A custom reason provided by the user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TargetChatCurrent": {
        "comment": "The currently opened chat needs to be kept",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TargetChatChosen": {
        "comment": "The chat needs to be chosen by the user among chats of the specified types",
        "parameters": {
            "allow_user_chats": {
                "description": "True, if private chats with ordinary users are allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_bot_chats": {
                "description": "True, if private chats with other bots are allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_group_chats": {
                "description": "True, if basic group and supergroup chats are allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "allow_channel_chats": {
                "description": "True, if channel chats are allowed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TargetChatInternalLink": {
        "comment": "The chat needs to be open with the provided internal link",
        "parameters": {
            "link": {
                "description": "An internal link pointing to the chat",
                "nullable": false,
                "type": "InternalLinkType",
                "tl": "InternalLinkType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeActiveSessions": {
        "comment": "The link is a link to the active sessions section of the application. Use getActiveSessions to handle the link",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeAttachmentMenuBot": {
        "comment": "The link is a link to an attachment menu bot to be opened in the specified or a chosen chat. Process given target_chat to open the chat.",
        "parameters": {
            "target_chat": {
                "description": "Target chat to be opened",
                "nullable": false,
                "type": "TargetChat",
                "tl": "TargetChat",
                "enum": 2
            },
            "bot_username": {
                "description": "Username of the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "url": {
                "description": "URL to be passed to openWebApp",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeAuthenticationCode": {
        "comment": "The link contains an authentication code. Call checkAuthenticationCode with the code if the current authorization state is authorizationStateWaitCode",
        "parameters": {
            "code": {
                "description": "The authentication code",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeBackground": {
        "comment": "The link is a link to a background. Call searchBackground with the given background name to process the link",
        "parameters": {
            "background_name": {
                "description": "Name of the background",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeBotStart": {
        "comment": "The link is a link to a chat with a Telegram bot. Call searchPublicChat with the given bot username, check that the user is a bot, show START button in the chat with the bot,",
        "parameters": {
            "bot_username": {
                "description": "Username of the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "start_parameter": {
                "description": "The parameter to be passed to sendBotStartMessage",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "autostart": {
                "description": "True, if sendBotStartMessage must be called automatically without showing the START button",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeBotStartInGroup": {
        "comment": "The link is a link to a Telegram bot, which is supposed to be added to a group chat. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups,",
        "parameters": {
            "bot_username": {
                "description": "Username of the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "start_parameter": {
                "description": "The parameter to be passed to sendBotStartMessage",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "administrator_rights": {
                "description": "Expected administrator rights for the bot; may be null",
                "nullable": true,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeBotAddToChannel": {
        "comment": "The link is a link to a Telegram bot, which is supposed to be added to a channel chat as an administrator. Call searchPublicChat with the given bot username and check that the user is a bot,",
        "parameters": {
            "bot_username": {
                "description": "Username of the bot",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "administrator_rights": {
                "description": "Expected administrator rights for the bot",
                "nullable": false,
                "type": "ChatAdministratorRights",
                "tl": "ChatAdministratorRights",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeChangePhoneNumber": {
        "comment": "The link is a link to the change phone number section of the app",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeChatInvite": {
        "comment": "The link is a chat invite link. Call checkChatInviteLink with the given invite link to process the link",
        "parameters": {
            "invite_link": {
                "description": "Internal representation of the invite link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeDefaultMessageAutoDeleteTimerSettings": {
        "comment": "The link is a link to the default message auto-delete timer settings section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeEditProfileSettings": {
        "comment": "The link is a link to the edit profile section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeFilterSettings": {
        "comment": "The link is a link to the filter section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeGame": {
        "comment": "The link is a link to a game. Call searchPublicChat with the given bot username, check that the user is a bot, ask the current user to select a chat to send the game, and then call sendMessage with inputMessageGame",
        "parameters": {
            "bot_username": {
                "description": "Username of the bot that owns the game",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "game_short_name": {
                "description": "Short name of the game",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeInstantView": {
        "comment": "The link must be opened in an Instant View. Call getWebPageInstantView with the given URL to process the link",
        "parameters": {
            "url": {
                "description": "URL to be passed to getWebPageInstantView",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "fallback_url": {
                "description": "An URL to open if getWebPageInstantView fails",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeInvoice": {
        "comment": "The link is a link to an invoice. Call getPaymentForm with the given invoice name to process the link",
        "parameters": {
            "invoice_name": {
                "description": "Name of the invoice",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeLanguagePack": {
        "comment": "The link is a link to a language pack. Call getLanguagePackInfo with the given language pack identifier to process the link",
        "parameters": {
            "language_pack_id": {
                "description": "Language pack identifier",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeLanguageSettings": {
        "comment": "The link is a link to the language section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeMessage": {
        "comment": "The link is a link to a Telegram message or a forum topic. Call getMessageLinkInfo with the given URL to process the link",
        "parameters": {
            "url": {
                "description": "URL to be passed to getMessageLinkInfo",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeMessageDraft": {
        "comment": "The link contains a message draft text. A share screen needs to be shown to the user, then the chosen chat must be opened and the text is added to the input field",
        "parameters": {
            "text": {
                "description": "Message draft text",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "contains_link": {
                "description": "True, if the first line of the text contains a link. If true, the input field needs to be focused and the text after the link must be selected",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypePassportDataRequest": {
        "comment": "The link contains a request of Telegram passport data. Call getPassportAuthorizationForm with the given parameters to process the link if the link was received from outside of the application; otherwise, ignore it",
        "parameters": {
            "bot_user_id": {
                "description": "User identifier of the service's bot",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "scope": {
                "description": "Telegram Passport element types requested by the service",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "public_key": {
                "description": "Service's public key",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "nonce": {
                "description": "Unique request identifier provided by the service",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "callback_url": {
                "description": "An HTTP URL to open once the request is finished, canceled, or failed with the parameters tg_passport=success, tg_passport=cancel, or tg_passport=error&error=... respectively.",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypePhoneNumberConfirmation": {
        "comment": "The link can be used to confirm ownership of a phone number to prevent account deletion. Call sendPhoneNumberConfirmationCode with the given hash and phone number to process the link",
        "parameters": {
            "hash": {
                "description": "Hash value from the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "phone_number": {
                "description": "Phone number value from the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypePremiumFeatures": {
        "comment": "The link is a link to the Premium features screen of the applcation from which the user can subscribe to Telegram Premium. Call getPremiumFeatures with the given referrer to process the link",
        "parameters": {
            "referrer": {
                "description": "Referrer specified in the link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypePrivacyAndSecuritySettings": {
        "comment": "The link is a link to the privacy and security section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeProxy": {
        "comment": "The link is a link to a proxy. Call addProxy with the given parameters to process the link and add the proxy",
        "parameters": {
            "server": {
                "description": "Proxy server IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Proxy server port",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "Type of the proxy",
                "nullable": false,
                "type": "ProxyType",
                "tl": "ProxyType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypePublicChat": {
        "comment": "The link is a link to a chat by its username. Call searchPublicChat with the given chat username to process the link",
        "parameters": {
            "chat_username": {
                "description": "Username of the chat",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeQrCodeAuthentication": {
        "comment": "The link can be used to login the current user on another device, but it must be scanned from QR-code using in-app camera. An alert similar to",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeRestorePurchases": {
        "comment": "The link forces restore of App Store purchases when opened. For official iOS application only",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeSettings": {
        "comment": "The link is a link to application settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeStickerSet": {
        "comment": "The link is a link to a sticker set. Call searchStickerSet with the given sticker set name to process the link and show the sticker set",
        "parameters": {
            "sticker_set_name": {
                "description": "Name of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "expect_custom_emoji": {
                "description": "True, if the sticker set is expected to contain custom emoji",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeTheme": {
        "comment": "The link is a link to a theme. TDLib has no theme support yet",
        "parameters": {
            "theme_name": {
                "description": "Name of the theme",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeThemeSettings": {
        "comment": "The link is a link to the theme section of the app settings",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeUnknownDeepLink": {
        "comment": "The link is an unknown tg: link. Call getDeepLinkInfo to process the link",
        "parameters": {
            "link": {
                "description": "Link to be passed to getDeepLinkInfo",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeUnsupportedProxy": {
        "comment": "The link is a link to an unsupported proxy. An alert can be shown to the user",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeUserPhoneNumber": {
        "comment": "The link is a link to a user by its phone number. Call searchUserByPhoneNumber with the given phone number to process the link",
        "parameters": {
            "phone_number": {
                "description": "Phone number of the user",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeUserToken": {
        "comment": "The link is a link to a user by a temporary token. Call searchUserByToken with the given token to process the link",
        "parameters": {
            "token": {
                "description": "The token",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "InternalLinkTypeVideoChat": {
        "comment": "The link is a link to a video chat. Call searchPublicChat with the given chat username, and then joinGroupCall with the given invite hash to process the link",
        "parameters": {
            "chat_username": {
                "description": "Username of the chat with the video chat",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "invite_hash": {
                "description": "If non-empty, invite hash to be used to join the video chat without being muted by administrators",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_live_stream": {
                "description": "True, if the video chat is expected to be a live stream in a channel or a broadcast group",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageLink": {
        "comment": "Contains an HTTPS link to a message in a supergroup or channel, or a forum topic",
        "parameters": {
            "link": {
                "description": "The link",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "is_public": {
                "description": "True, if the link will work for non-members of the chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageLinkInfo": {
        "comment": "Contains information about a link to a message or a forum topic in a chat",
        "parameters": {
            "is_public": {
                "description": "True, if the link is a public link for a message or a forum topic in a chat",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "chat_id": {
                "description": "If found, identifier of the chat to which the link points, 0 otherwise",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If found, identifier of the message thread in which to open the message, or a forum topic to open if the message is missing",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message": {
                "description": "If found, the linked message; may be null",
                "nullable": true,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "media_timestamp": {
                "description": "Timestamp from which the video/audio/video note/voice note playing must start, in seconds; 0 if not specified. The media can be in the message content or in its web page preview",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "for_album": {
                "description": "True, if the whole media album to which the message belongs is linked",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FilePart": {
        "comment": "Contains a part of a file",
        "parameters": {
            "data": {
                "description": "File bytes",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FileTypeNone": {
        "comment": "The data is not a file",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeAnimation": {
        "comment": "The file is an animation",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeAudio": {
        "comment": "The file is an audio file",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeDocument": {
        "comment": "The file is a document",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeNotificationSound": {
        "comment": "The file is a notification sound",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypePhoto": {
        "comment": "The file is a photo",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeProfilePhoto": {
        "comment": "The file is a profile photo",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeSecret": {
        "comment": "The file was sent to a secret chat (the file type is not known to the server)",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeSecretThumbnail": {
        "comment": "The file is a thumbnail of a file from a secret chat",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeSecure": {
        "comment": "The file is a file from Secure storage used for storing Telegram Passport files",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeSticker": {
        "comment": "The file is a sticker",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeThumbnail": {
        "comment": "The file is a thumbnail of another file",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeUnknown": {
        "comment": "The file type is not yet known",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeVideo": {
        "comment": "The file is a video",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeVideoNote": {
        "comment": "The file is a video note",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeVoiceNote": {
        "comment": "The file is a voice note",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "FileTypeWallpaper": {
        "comment": "The file is a wallpaper or a background pattern",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "StorageStatisticsByFileType": {
        "comment": "Contains the storage usage statistics for a specific file type",
        "parameters": {
            "file_type": {
                "description": "File type",
                "nullable": false,
                "type": "FileType",
                "tl": "FileType",
                "enum": 2
            },
            "size": {
                "description": "Total size of the files, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "count": {
                "description": "Total number of files",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StorageStatisticsByChat": {
        "comment": "Contains the storage usage statistics for a specific chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier; 0 if none",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "size": {
                "description": "Total size of the files in the chat, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "count": {
                "description": "Total number of files in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "by_file_type": {
                "description": "Statistics split by file types",
                "nullable": false,
                "type": "List<StorageStatisticsByFileType>",
                "tl": "StorageStatisticsByFileType",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "StorageStatistics": {
        "comment": "Contains the exact storage usage statistics split by chats and file type",
        "parameters": {
            "size": {
                "description": "Total size of files, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "count": {
                "description": "Total number of files",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "by_chat": {
                "description": "Statistics split by chats",
                "nullable": false,
                "type": "List<StorageStatisticsByChat>",
                "tl": "StorageStatisticsByChat",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "StorageStatisticsFast": {
        "comment": "Contains approximate storage usage statistics, excluding files of unknown file type",
        "parameters": {
            "files_size": {
                "description": "Approximate total size of files, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "file_count": {
                "description": "Approximate number of files",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "database_size": {
                "description": "Size of the database",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "language_pack_database_size": {
                "description": "Size of the language pack database",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "log_size": {
                "description": "Size of the TDLib internal log",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DatabaseStatistics": {
        "comment": "Contains database statistics",
        "parameters": {
            "statistics": {
                "description": "Database statistics in an unspecified human-readable format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NetworkTypeNone": {
        "comment": "The network is not available",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NetworkTypeMobile": {
        "comment": "A mobile network",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NetworkTypeMobileRoaming": {
        "comment": "A mobile roaming network",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NetworkTypeWiFi": {
        "comment": "A Wi-Fi network",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NetworkTypeOther": {
        "comment": "A different network type (e.g., Ethernet network)",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "NetworkStatisticsEntryFile": {
        "comment": "Contains information about the total amount of data that was used to send and receive files",
        "parameters": {
            "file_type": {
                "description": "Type of the file the data is part of; pass null if the data isn't related to files",
                "nullable": true,
                "type": "FileType",
                "tl": "FileType",
                "enum": 2
            },
            "network_type": {
                "description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
                "nullable": false,
                "type": "NetworkType",
                "tl": "NetworkType",
                "enum": 2
            },
            "sent_bytes": {
                "description": "Total number of bytes sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "received_bytes": {
                "description": "Total number of bytes received",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NetworkStatisticsEntryCall": {
        "comment": "Contains information about the total amount of data that was used for calls",
        "parameters": {
            "network_type": {
                "description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
                "nullable": false,
                "type": "NetworkType",
                "tl": "NetworkType",
                "enum": 2
            },
            "sent_bytes": {
                "description": "Total number of bytes sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "received_bytes": {
                "description": "Total number of bytes received",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "duration": {
                "description": "Total call duration, in seconds",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "NetworkStatistics": {
        "comment": "A full list of available network statistic entries",
        "parameters": {
            "since_date": {
                "description": "Point in time (Unix timestamp) from which the statistics are collected",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "entries": {
                "description": "Network statistics entries",
                "nullable": false,
                "type": "List<NetworkStatisticsEntry>",
                "tl": "NetworkStatisticsEntry",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "AutoDownloadSettings": {
        "comment": "Contains auto-download settings",
        "parameters": {
            "is_auto_download_enabled": {
                "description": "True, if the auto-download is enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "max_photo_file_size": {
                "description": "The maximum size of a photo file to be auto-downloaded, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "max_video_file_size": {
                "description": "The maximum size of a video file to be auto-downloaded, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "max_other_file_size": {
                "description": "The maximum size of other file types to be auto-downloaded, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "video_upload_bitrate": {
                "description": "The maximum suggested bitrate for uploaded videos, in kbit/s",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "preload_large_videos": {
                "description": "True, if the beginning of video files needs to be preloaded for instant playback",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "preload_next_audio": {
                "description": "True, if the next audio track needs to be preloaded while the user is listening to an audio file",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "use_less_data_for_calls": {
                "description": "True, if \"use less data for calls\" option needs to be enabled",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "AutoDownloadSettingsPresets": {
        "comment": "Contains auto-download settings presets for the current user",
        "parameters": {
            "low": {
                "description": "Preset with lowest settings; supposed to be used by default when roaming",
                "nullable": false,
                "type": "AutoDownloadSettings",
                "tl": "AutoDownloadSettings",
                "enum": 2
            },
            "medium": {
                "description": "Preset with medium settings; supposed to be used by default when using mobile data",
                "nullable": false,
                "type": "AutoDownloadSettings",
                "tl": "AutoDownloadSettings",
                "enum": 2
            },
            "high": {
                "description": "Preset with highest settings; supposed to be used by default when connected on Wi-Fi",
                "nullable": false,
                "type": "AutoDownloadSettings",
                "tl": "AutoDownloadSettings",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "ConnectionStateWaitingForNetwork": {
        "comment": "Currently waiting for the network to become available. Use setNetworkType to change the available network type",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ConnectionStateConnectingToProxy": {
        "comment": "Currently establishing a connection with a proxy server",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ConnectionStateConnecting": {
        "comment": "Currently establishing a connection to the Telegram servers",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ConnectionStateUpdating": {
        "comment": "Downloading data received while the application was offline",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ConnectionStateReady": {
        "comment": "There is a working connection to the Telegram servers",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryUsers": {
        "comment": "A category containing frequently used private chats with non-bot users",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryBots": {
        "comment": "A category containing frequently used private chats with bot users",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryGroups": {
        "comment": "A category containing frequently used basic groups and supergroups",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryChannels": {
        "comment": "A category containing frequently used channels",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryInlineBots": {
        "comment": "A category containing frequently used chats with inline bots sorted by their usage in inline mode",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryCalls": {
        "comment": "A category containing frequently used chats used for calls",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TopChatCategoryForwardChats": {
        "comment": "A category containing frequently used chats used to forward messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "TMeUrlTypeUser": {
        "comment": "A URL linking to a user",
        "parameters": {
            "user_id": {
                "description": "Identifier of the user",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TMeUrlTypeSupergroup": {
        "comment": "A URL linking to a public supergroup or channel",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TMeUrlTypeChatInvite": {
        "comment": "A chat invite link",
        "parameters": {
            "info": {
                "description": "Information about the chat invite link",
                "nullable": false,
                "type": "ChatInviteLinkInfo",
                "tl": "ChatInviteLinkInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "TMeUrlTypeStickerSet": {
        "comment": "A URL linking to a sticker set",
        "parameters": {
            "sticker_set_id": {
                "description": "Identifier of the sticker set",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TMeUrl": {
        "comment": "Represents a URL linking to an internal Telegram entity",
        "parameters": {
            "url": {
                "description": "URL",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "type": {
                "description": "Type of the URL",
                "nullable": false,
                "type": "TMeUrlType",
                "tl": "TMeUrlType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "TMeUrls": {
        "comment": "Contains a list of t.me URLs",
        "parameters": {
            "urls": {
                "description": "List of URLs",
                "nullable": false,
                "type": "List<TMeUrl>",
                "tl": "TMeUrl",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "SuggestedActionEnableArchiveAndMuteNewChats": {
        "comment": "Suggests the user to enable \"archive_and_mute_new_chats_from_unknown_users\" option",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SuggestedActionCheckPassword": {
        "comment": "Suggests the user to check whether they still remember their 2-step verification password",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SuggestedActionCheckPhoneNumber": {
        "comment": "Suggests the user to check whether authorization phone number is correct and change the phone number if it is inaccessible",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SuggestedActionViewChecksHint": {
        "comment": "Suggests the user to view a hint about the meaning of one and two check marks on sent messages",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "SuggestedActionConvertToBroadcastGroup": {
        "comment": "Suggests the user to convert specified supergroup to a broadcast group",
        "parameters": {
            "supergroup_id": {
                "description": "Supergroup identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "SuggestedActionSetPassword": {
        "comment": "Suggests the user to set a 2-step verification password to be able to log in again",
        "parameters": {
            "authorization_delay": {
                "description": "The number of days to pass between consecutive authorizations if the user declines to set password",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Count": {
        "comment": "Contains a counter",
        "parameters": {
            "count": {
                "description": "Count",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Text": {
        "comment": "Contains some text",
        "parameters": {
            "text": {
                "description": "Text",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Seconds": {
        "comment": "Contains a value representing a number of seconds",
        "parameters": {
            "seconds": {
                "description": "Number of seconds",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "FileDownloadedPrefixSize": {
        "comment": "Contains size of downloaded prefix of a file",
        "parameters": {
            "size": {
                "description": "The prefix size, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "DeepLinkInfo": {
        "comment": "Contains information about a tg: deep link",
        "parameters": {
            "text": {
                "description": "Text to be shown to the user",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "need_update_application": {
                "description": "True, if the user must be asked to update the application",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextParseModeMarkdown": {
        "comment": "The text uses Markdown-style formatting",
        "parameters": {
            "version": {
                "description": "Version of the parser: 0 or 1 - Telegram Bot API \"Markdown\" parse mode, 2 - Telegram Bot API \"MarkdownV2\" parse mode",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TextParseModeHTML": {
        "comment": "The text uses HTML-style formatting. The same as Telegram Bot API \"HTML\" parse mode",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "ProxyTypeSocks5": {
        "comment": "A SOCKS5 proxy server",
        "parameters": {
            "username": {
                "description": "Username for logging in; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "password": {
                "description": "Password for logging in; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ProxyTypeHttp": {
        "comment": "A HTTP transparent proxy server",
        "parameters": {
            "username": {
                "description": "Username for logging in; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "password": {
                "description": "Password for logging in; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "http_only": {
                "description": "Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ProxyTypeMtproto": {
        "comment": "An MTProto proxy server",
        "parameters": {
            "secret": {
                "description": "The proxy's secret in hexadecimal encoding",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "Proxy": {
        "comment": "Contains information about a proxy server",
        "parameters": {
            "id": {
                "description": "Unique identifier of the proxy",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "server": {
                "description": "Proxy server IP address",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "port": {
                "description": "Proxy server port",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "last_used_date": {
                "description": "Point in time (Unix timestamp) when the proxy was last used; 0 if never",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_enabled": {
                "description": "True, if the proxy is enabled now",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "type": {
                "description": "Type of the proxy",
                "nullable": false,
                "type": "ProxyType",
                "tl": "ProxyType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Proxies": {
        "comment": "Represents a list of proxy servers",
        "parameters": {
            "proxies": {
                "description": "List of proxy servers",
                "nullable": false,
                "type": "List<Proxy>",
                "tl": "Proxy",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "InputSticker": {
        "comment": "A sticker to be added to a sticker set",
        "parameters": {
            "sticker": {
                "description": "File with the sticker; must fit in a 512x512 square. For WEBP stickers and masks the file must be in PNG format, which will be converted to WEBP server-side.",
                "nullable": false,
                "type": "InputFile",
                "tl": "InputFile",
                "enum": 2
            },
            "emojis": {
                "description": "Emojis corresponding to the sticker",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "format": {
                "description": "Sticker format",
                "nullable": false,
                "type": "StickerFormat",
                "tl": "StickerFormat",
                "enum": 2
            },
            "mask_position": {
                "description": "Position where the mask is placed; pass null if not specified",
                "nullable": true,
                "type": "MaskPosition",
                "tl": "MaskPosition",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "DateRange": {
        "comment": "Represents a date range",
        "parameters": {
            "start_date": {
                "description": "Point in time (Unix timestamp) at which the date range begins",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "end_date": {
                "description": "Point in time (Unix timestamp) at which the date range ends",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StatisticalValue": {
        "comment": "A value with information about its recent changes",
        "parameters": {
            "value": {
                "description": "The current value",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "previous_value": {
                "description": "The value for the previous day",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "growth_rate_percentage": {
                "description": "The growth rate of the value, as a percentage",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StatisticalGraphData": {
        "comment": "A graph data",
        "parameters": {
            "json_data": {
                "description": "Graph data in JSON format",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "zoom_token": {
                "description": "If non-empty, a token which can be used to receive a zoomed in graph",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StatisticalGraphAsync": {
        "comment": "The graph data to be asynchronously loaded through getStatisticalGraph",
        "parameters": {
            "token": {
                "description": "The token to use for data loading",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "StatisticalGraphError": {
        "comment": "An error message to be shown to the user instead of the graph",
        "parameters": {
            "error_message": {
                "description": "The error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsMessageInteractionInfo": {
        "comment": "Contains statistics about interactions with a message",
        "parameters": {
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "view_count": {
                "description": "Number of times the message was viewed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "forward_count": {
                "description": "Number of times the message was forwarded",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsMessageSenderInfo": {
        "comment": "Contains statistics about messages sent by a user",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sent_message_count": {
                "description": "Number of sent messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "average_character_count": {
                "description": "Average number of characters in sent messages; 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsAdministratorActionsInfo": {
        "comment": "Contains statistics about administrator actions done by a user",
        "parameters": {
            "user_id": {
                "description": "Administrator user identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "deleted_message_count": {
                "description": "Number of messages deleted by the administrator",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "banned_user_count": {
                "description": "Number of users banned by the administrator",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "restricted_user_count": {
                "description": "Number of users restricted by the administrator",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsInviterInfo": {
        "comment": "Contains statistics about number of new members invited by a user",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "added_member_count": {
                "description": "Number of new members invited by the user",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsSupergroup": {
        "comment": "A detailed statistics about a supergroup chat",
        "parameters": {
            "period": {
                "description": "A period to which the statistics applies",
                "nullable": false,
                "type": "DateRange",
                "tl": "DateRange",
                "enum": 2
            },
            "member_count": {
                "description": "Number of members in the chat",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "message_count": {
                "description": "Number of messages sent to the chat",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "viewer_count": {
                "description": "Number of users who viewed messages in the chat",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "sender_count": {
                "description": "Number of users who sent messages to the chat",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "member_count_graph": {
                "description": "A graph containing number of members in the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "join_graph": {
                "description": "A graph containing number of members joined and left the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "join_by_source_graph": {
                "description": "A graph containing number of new member joins per source",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "language_graph": {
                "description": "A graph containing distribution of active users per language",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "message_content_graph": {
                "description": "A graph containing distribution of sent messages by content type",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "action_graph": {
                "description": "A graph containing number of different actions in the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "day_graph": {
                "description": "A graph containing distribution of message views per hour",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "week_graph": {
                "description": "A graph containing distribution of message views per day of week",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "top_senders": {
                "description": "List of users sent most messages in the last week",
                "nullable": false,
                "type": "List<ChatStatisticsMessageSenderInfo>",
                "tl": "ChatStatisticsMessageSenderInfo",
                "enum": 4
            },
            "top_administrators": {
                "description": "List of most active administrators in the last week",
                "nullable": false,
                "type": "List<ChatStatisticsAdministratorActionsInfo>",
                "tl": "ChatStatisticsAdministratorActionsInfo",
                "enum": 4
            },
            "top_inviters": {
                "description": "List of most active inviters of new members in the last week",
                "nullable": false,
                "type": "List<ChatStatisticsInviterInfo>",
                "tl": "ChatStatisticsInviterInfo",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "ChatStatisticsChannel": {
        "comment": "A detailed statistics about a channel chat",
        "parameters": {
            "period": {
                "description": "A period to which the statistics applies",
                "nullable": false,
                "type": "DateRange",
                "tl": "DateRange",
                "enum": 2
            },
            "member_count": {
                "description": "Number of members in the chat",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "mean_view_count": {
                "description": "Mean number of times the recently sent messages was viewed",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "mean_share_count": {
                "description": "Mean number of times the recently sent messages was shared",
                "nullable": false,
                "type": "StatisticalValue",
                "tl": "StatisticalValue",
                "enum": 2
            },
            "enabled_notifications_percentage": {
                "description": "A percentage of users with enabled notifications for the chat",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "member_count_graph": {
                "description": "A graph containing number of members in the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "join_graph": {
                "description": "A graph containing number of members joined and left the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "mute_graph": {
                "description": "A graph containing number of members muted and unmuted the chat",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "view_count_by_hour_graph": {
                "description": "A graph containing number of message views in a given hour in the last two weeks",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "view_count_by_source_graph": {
                "description": "A graph containing number of message views per source",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "join_by_source_graph": {
                "description": "A graph containing number of new member joins per source",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "language_graph": {
                "description": "A graph containing number of users viewed chat messages per language",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "message_interaction_graph": {
                "description": "A graph containing number of chat message views and shares",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "instant_view_interaction_graph": {
                "description": "A graph containing number of views of associated with the chat instant views",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            },
            "recent_message_interactions": {
                "description": "Detailed statistics about number of views and shares of recently sent messages",
                "nullable": false,
                "type": "List<ChatStatisticsMessageInteractionInfo>",
                "tl": "ChatStatisticsMessageInteractionInfo",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "MessageStatistics": {
        "comment": "A detailed statistics about a message",
        "parameters": {
            "message_interaction_graph": {
                "description": "A graph containing number of message views and shares",
                "nullable": false,
                "type": "StatisticalGraph",
                "tl": "StatisticalGraph",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Point": {
        "comment": "A point on a Cartesian plane",
        "parameters": {
            "x": {
                "description": "The point's first coordinate",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            },
            "y": {
                "description": "The point's second coordinate",
                "nullable": false,
                "type": "double",
                "tl": "double",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "VectorPathCommandLine": {
        "comment": "A straight line to a given point",
        "parameters": {
            "end_point": {
                "description": "The end point of the straight line",
                "nullable": false,
                "type": "Point",
                "tl": "Point",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "VectorPathCommandCubicBezierCurve": {
        "comment": "A cubic B\u00e9zier curve to a given point",
        "parameters": {
            "start_control_point": {
                "description": "The start control point of the curve",
                "nullable": false,
                "type": "Point",
                "tl": "Point",
                "enum": 2
            },
            "end_control_point": {
                "description": "The end control point of the curve",
                "nullable": false,
                "type": "Point",
                "tl": "Point",
                "enum": 2
            },
            "end_point": {
                "description": "The end point of the curve",
                "nullable": false,
                "type": "Point",
                "tl": "Point",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeDefault": {
        "comment": "A scope covering all users",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeAllPrivateChats": {
        "comment": "A scope covering all private chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeAllGroupChats": {
        "comment": "A scope covering all group and supergroup chats",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeAllChatAdministrators": {
        "comment": "A scope covering all group and supergroup chat administrators",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeChat": {
        "comment": "A scope covering all members of a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeChatAdministrators": {
        "comment": "A scope covering all administrators of a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "BotCommandScopeChatMember": {
        "comment": "A scope covering a member of a chat",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateAuthorizationState": {
        "comment": "The user authorization state has changed",
        "parameters": {
            "authorization_state": {
                "description": "New authorization state",
                "nullable": false,
                "type": "AuthorizationState",
                "tl": "AuthorizationState",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewMessage": {
        "comment": "A new message was received; can also be an outgoing message",
        "parameters": {
            "message": {
                "description": "The new message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageSendAcknowledged": {
        "comment": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed.",
        "parameters": {
            "chat_id": {
                "description": "The chat identifier of the sent message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "A temporary message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageSendSucceeded": {
        "comment": "A message has been successfully sent",
        "parameters": {
            "message": {
                "description": "The sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "old_message_id": {
                "description": "The previous temporary message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageSendFailed": {
        "comment": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update",
        "parameters": {
            "message": {
                "description": "The failed to send message",
                "nullable": false,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "old_message_id": {
                "description": "The previous temporary message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "error_code": {
                "description": "An error code",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "error_message": {
                "description": "Error message",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageContent": {
        "comment": "The message content has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "new_content": {
                "description": "New message content",
                "nullable": false,
                "type": "MessageContent",
                "tl": "MessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageEdited": {
        "comment": "A message was edited. Changes in the message content will come in a separate updateMessageContent",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "edit_date": {
                "description": "Point in time (Unix timestamp) when the message was edited",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "reply_markup": {
                "description": "New message reply markup; may be null",
                "nullable": true,
                "type": "ReplyMarkup",
                "tl": "ReplyMarkup",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageIsPinned": {
        "comment": "The message pinned state was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "The message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_pinned": {
                "description": "True, if the message is pinned",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageInteractionInfo": {
        "comment": "The information about interactions with a message has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "interaction_info": {
                "description": "New information about interactions with the message; may be null",
                "nullable": true,
                "type": "MessageInteractionInfo",
                "tl": "MessageInteractionInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageContentOpened": {
        "comment": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the self-destruct timer",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageMentionRead": {
        "comment": "A message with an unread mention was read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_mention_count": {
                "description": "The new number of unread mention messages left in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageUnreadReactions": {
        "comment": "The list of unread reactions added to a message was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_reactions": {
                "description": "The new list of unread reactions",
                "nullable": false,
                "type": "List<UnreadReaction>",
                "tl": "UnreadReaction",
                "enum": 4
            },
            "unread_reaction_count": {
                "description": "The new number of messages with unread reactions left in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateMessageLiveLocationViewed": {
        "comment": "A message with a live location was viewed. When the update is received, the application is supposed to update the live location",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat with the live location message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message with live location",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewChat": {
        "comment": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the application. The chat field changes will be reported through separate updates",
        "parameters": {
            "chat": {
                "description": "The chat",
                "nullable": false,
                "type": "Chat",
                "tl": "Chat",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatTitle": {
        "comment": "The title of a chat was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "title": {
                "description": "The new chat title",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatPhoto": {
        "comment": "A chat photo was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "photo": {
                "description": "The new chat photo; may be null",
                "nullable": true,
                "type": "ChatPhotoInfo",
                "tl": "ChatPhotoInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatPermissions": {
        "comment": "Chat permissions was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "permissions": {
                "description": "The new chat permissions",
                "nullable": false,
                "type": "ChatPermissions",
                "tl": "ChatPermissions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatLastMessage": {
        "comment": "The last message of a chat was changed. If last_message is null, then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_message": {
                "description": "The new last message in the chat; may be null",
                "nullable": true,
                "type": "Message",
                "tl": "Message",
                "enum": 2
            },
            "positions": {
                "description": "The new chat positions in the chat lists",
                "nullable": false,
                "type": "List<ChatPosition>",
                "tl": "ChatPosition",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatPosition": {
        "comment": "The position of a chat in a chat list has changed. An updateChatLastMessage or updateChatDraftMessage update might be sent instead of the update",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "position": {
                "description": "New chat position. If new order is 0, then the chat needs to be removed from the list",
                "nullable": false,
                "type": "ChatPosition",
                "tl": "ChatPosition",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatReadInbox": {
        "comment": "Incoming messages were read or the number of unread messages has been changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_read_inbox_message_id": {
                "description": "Identifier of the last read incoming message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_count": {
                "description": "The number of unread messages left in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatReadOutbox": {
        "comment": "Outgoing messages were read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "last_read_outbox_message_id": {
                "description": "Identifier of last read outgoing message",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatActionBar": {
        "comment": "The chat action bar was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "action_bar": {
                "description": "The new value of the action bar; may be null",
                "nullable": true,
                "type": "ChatActionBar",
                "tl": "ChatActionBar",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatAvailableReactions": {
        "comment": "The chat available reactions were changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "available_reactions": {
                "description": "The new reactions, available in the chat",
                "nullable": false,
                "type": "ChatAvailableReactions",
                "tl": "ChatAvailableReactions",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatDraftMessage": {
        "comment": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update mustn't be applied",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "draft_message": {
                "description": "The new draft message; may be null",
                "nullable": true,
                "type": "DraftMessage",
                "tl": "DraftMessage",
                "enum": 2
            },
            "positions": {
                "description": "The new chat positions in the chat lists",
                "nullable": false,
                "type": "List<ChatPosition>",
                "tl": "ChatPosition",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatMessageSender": {
        "comment": "The message sender that is selected to send messages in a chat has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_sender_id": {
                "description": "New value of message_sender_id; may be null if the user can't change message sender",
                "nullable": true,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatMessageAutoDeleteTime": {
        "comment": "The message auto-delete or self-destruct timer setting for a chat was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_auto_delete_time": {
                "description": "New value of message_auto_delete_time",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatNotificationSettings": {
        "comment": "Notification settings for a chat were changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "notification_settings": {
                "description": "The new notification settings",
                "nullable": false,
                "type": "ChatNotificationSettings",
                "tl": "ChatNotificationSettings",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatPendingJoinRequests": {
        "comment": "The chat pending join requests were changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "pending_join_requests": {
                "description": "The new data about pending join requests; may be null",
                "nullable": true,
                "type": "ChatJoinRequestsInfo",
                "tl": "ChatJoinRequestsInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatReplyMarkup": {
        "comment": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "reply_markup_message_id": {
                "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatTheme": {
        "comment": "The chat theme was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "theme_name": {
                "description": "The new name of the chat theme; may be empty if theme was reset to default",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatUnreadMentionCount": {
        "comment": "The chat unread_mention_count has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_mention_count": {
                "description": "The number of unread mention messages left in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatUnreadReactionCount": {
        "comment": "The chat unread_reaction_count has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "unread_reaction_count": {
                "description": "The number of messages with unread reactions left in the chat",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatVideoChat": {
        "comment": "A chat video chat state has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "video_chat": {
                "description": "New value of video_chat",
                "nullable": false,
                "type": "VideoChat",
                "tl": "VideoChat",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatDefaultDisableNotification": {
        "comment": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "default_disable_notification": {
                "description": "The new default_disable_notification value",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatHasProtectedContent": {
        "comment": "A chat content was allowed or restricted for saving",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "has_protected_content": {
                "description": "New value of has_protected_content",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatHasScheduledMessages": {
        "comment": "A chat's has_scheduled_messages field has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "has_scheduled_messages": {
                "description": "New value of has_scheduled_messages",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatIsBlocked": {
        "comment": "A chat was blocked or unblocked",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_blocked": {
                "description": "New value of is_blocked",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatIsMarkedAsUnread": {
        "comment": "A chat was marked as unread or was read",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "is_marked_as_unread": {
                "description": "New value of is_marked_as_unread",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatFilters": {
        "comment": "The list of chat filters or a chat filter has changed",
        "parameters": {
            "chat_filters": {
                "description": "The new list of chat filters",
                "nullable": false,
                "type": "List<ChatFilterInfo>",
                "tl": "ChatFilterInfo",
                "enum": 4
            },
            "main_chat_list_position": {
                "description": "Position of the main chat list among chat filters, 0-based",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatOnlineMemberCount": {
        "comment": "The number of online group members has changed. This update with non-zero number of online group members is sent only for currently opened chats.",
        "parameters": {
            "chat_id": {
                "description": "Identifier of the chat",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "online_member_count": {
                "description": "New number of online members in the chat, or 0 if unknown",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateForumTopicInfo": {
        "comment": "Basic information about a topic in a forum chat was changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "info": {
                "description": "New information about the topic",
                "nullable": false,
                "type": "ForumTopicInfo",
                "tl": "ForumTopicInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateScopeNotificationSettings": {
        "comment": "Notification settings for some type of chats were updated",
        "parameters": {
            "scope": {
                "description": "Types of chats for which notification settings were updated",
                "nullable": false,
                "type": "NotificationSettingsScope",
                "tl": "NotificationSettingsScope",
                "enum": 2
            },
            "notification_settings": {
                "description": "The new notification settings",
                "nullable": false,
                "type": "ScopeNotificationSettings",
                "tl": "ScopeNotificationSettings",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNotification": {
        "comment": "A notification was changed",
        "parameters": {
            "notification_group_id": {
                "description": "Unique notification group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "notification": {
                "description": "Changed notification",
                "nullable": false,
                "type": "Notification",
                "tl": "Notification",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNotificationGroup": {
        "comment": "A list of active notifications in a notification group has changed",
        "parameters": {
            "notification_group_id": {
                "description": "Unique notification group identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "type": {
                "description": "New type of the notification group",
                "nullable": false,
                "type": "NotificationGroupType",
                "tl": "NotificationGroupType",
                "enum": 2
            },
            "chat_id": {
                "description": "Identifier of a chat to which all notifications in the group belong",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "notification_settings_chat_id": {
                "description": "Chat identifier, which notification settings must be applied to the added notifications",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "notification_sound_id": {
                "description": "Identifier of the notification sound to be played; 0 if sound is disabled",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "total_count": {
                "description": "Total number of unread notifications in the group, can be bigger than number of active notifications",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "added_notifications": {
                "description": "List of added group notifications, sorted by notification ID",
                "nullable": false,
                "type": "List<Notification>",
                "tl": "Notification",
                "enum": 4
            },
            "removed_notification_ids": {
                "description": "Identifiers of removed group notifications, sorted by notification ID",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateActiveNotifications": {
        "comment": "Contains active notifications that was shown on previous application launches. This update is sent only if the message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update",
        "parameters": {
            "groups": {
                "description": "Lists of active notification groups",
                "nullable": false,
                "type": "List<NotificationGroup>",
                "tl": "NotificationGroup",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateHavePendingNotifications": {
        "comment": "Describes whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications",
        "parameters": {
            "have_delayed_notifications": {
                "description": "True, if there are some delayed notification updates, which will be sent soon",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "have_unreceived_notifications": {
                "description": "True, if there can be some yet unreceived notifications, which are being fetched from the server",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateDeleteMessages": {
        "comment": "Some messages were deleted",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_ids": {
                "description": "Identifiers of the deleted messages",
                "nullable": false,
                "type": "List<int>",
                "tl": "int53",
                "enum": 6
            },
            "is_permanent": {
                "description": "True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible)",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "from_cache": {
                "description": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatAction": {
        "comment": "A message sender activity in the chat has changed",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_thread_id": {
                "description": "If not 0, a message thread identifier in which the action was performed",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sender_id": {
                "description": "Identifier of a message sender performing the action",
                "nullable": false,
                "type": "MessageSender",
                "tl": "MessageSender",
                "enum": 2
            },
            "action": {
                "description": "The action",
                "nullable": false,
                "type": "ChatAction",
                "tl": "ChatAction",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUserStatus": {
        "comment": "The user went online or offline",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "status": {
                "description": "New status of the user",
                "nullable": false,
                "type": "UserStatus",
                "tl": "UserStatus",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUser": {
        "comment": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the application",
        "parameters": {
            "user": {
                "description": "New data about the user",
                "nullable": false,
                "type": "User",
                "tl": "User",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateBasicGroup": {
        "comment": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the application",
        "parameters": {
            "basic_group": {
                "description": "New data about the group",
                "nullable": false,
                "type": "BasicGroup",
                "tl": "BasicGroup",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSupergroup": {
        "comment": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the application",
        "parameters": {
            "supergroup": {
                "description": "New data about the supergroup",
                "nullable": false,
                "type": "Supergroup",
                "tl": "Supergroup",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSecretChat": {
        "comment": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the application",
        "parameters": {
            "secret_chat": {
                "description": "New data about the secret chat",
                "nullable": false,
                "type": "SecretChat",
                "tl": "SecretChat",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUserFullInfo": {
        "comment": "Some data in userFullInfo has been changed",
        "parameters": {
            "user_id": {
                "description": "User identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_full_info": {
                "description": "New full information about the user",
                "nullable": false,
                "type": "UserFullInfo",
                "tl": "UserFullInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateBasicGroupFullInfo": {
        "comment": "Some data in basicGroupFullInfo has been changed",
        "parameters": {
            "basic_group_id": {
                "description": "Identifier of a basic group",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "basic_group_full_info": {
                "description": "New full information about the group",
                "nullable": false,
                "type": "BasicGroupFullInfo",
                "tl": "BasicGroupFullInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSupergroupFullInfo": {
        "comment": "Some data in supergroupFullInfo has been changed",
        "parameters": {
            "supergroup_id": {
                "description": "Identifier of the supergroup or channel",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "supergroup_full_info": {
                "description": "New full information about the supergroup",
                "nullable": false,
                "type": "SupergroupFullInfo",
                "tl": "SupergroupFullInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateServiceNotification": {
        "comment": "A service notification from the server was received. Upon receiving this the application must show a popup with the content of the notification",
        "parameters": {
            "type": {
                "description": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" must be shown under notification; if user presses the second, all local data must be destroyed using Destroy method",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "content": {
                "description": "Notification content",
                "nullable": false,
                "type": "MessageContent",
                "tl": "MessageContent",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFile": {
        "comment": "Information about a file was updated",
        "parameters": {
            "file": {
                "description": "New data about the file",
                "nullable": false,
                "type": "File",
                "tl": "File",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileGenerationStart": {
        "comment": "The file generation process needs to be started by the application",
        "parameters": {
            "generation_id": {
                "description": "Unique identifier for the generation process",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "original_path": {
                "description": "The path to a file from which a new file is generated; may be empty",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "destination_path": {
                "description": "The path to a file that must be created and where the new file is generated",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "conversion": {
                "description": "String specifying the conversion applied to the original file. If conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file, which must be downloaded by the application",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileGenerationStop": {
        "comment": "File generation is no longer needed",
        "parameters": {
            "generation_id": {
                "description": "Unique identifier for the generation process",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileDownloads": {
        "comment": "The state of the file download list has changed",
        "parameters": {
            "total_size": {
                "description": "Total size of files in the file download list, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "total_count": {
                "description": "Total number of files in the file download list",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "downloaded_size": {
                "description": "Total downloaded size of files in the file download list, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileAddedToDownloads": {
        "comment": "A file was added to the file download list. This update is sent only after file download list is loaded for the first time",
        "parameters": {
            "file_download": {
                "description": "The added file download",
                "nullable": false,
                "type": "FileDownload",
                "tl": "FileDownload",
                "enum": 2
            },
            "counts": {
                "description": "New number of being downloaded and recently downloaded files found",
                "nullable": false,
                "type": "DownloadedFileCounts",
                "tl": "DownloadedFileCounts",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileDownload": {
        "comment": "A file download was changed. This update is sent only after file download list is loaded for the first time",
        "parameters": {
            "file_id": {
                "description": "File identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "complete_date": {
                "description": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "is_paused": {
                "description": "True, if downloading of the file is paused",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "counts": {
                "description": "New number of being downloaded and recently downloaded files found",
                "nullable": false,
                "type": "DownloadedFileCounts",
                "tl": "DownloadedFileCounts",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFileRemovedFromDownloads": {
        "comment": "A file was removed from the file download list. This update is sent only after file download list is loaded for the first time",
        "parameters": {
            "file_id": {
                "description": "File identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "counts": {
                "description": "New number of being downloaded and recently downloaded files found",
                "nullable": false,
                "type": "DownloadedFileCounts",
                "tl": "DownloadedFileCounts",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateCall": {
        "comment": "New call was created or information about a call was updated",
        "parameters": {
            "call": {
                "description": "New data about a call",
                "nullable": false,
                "type": "Call",
                "tl": "Call",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateGroupCall": {
        "comment": "Information about a group call was updated",
        "parameters": {
            "group_call": {
                "description": "New data about a group call",
                "nullable": false,
                "type": "GroupCall",
                "tl": "GroupCall",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateGroupCallParticipant": {
        "comment": "Information about a group call participant was changed. The updates are sent only after the group call is received through getGroupCall and only if the call is joined or being joined",
        "parameters": {
            "group_call_id": {
                "description": "Identifier of group call",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "participant": {
                "description": "New data about a participant",
                "nullable": false,
                "type": "GroupCallParticipant",
                "tl": "GroupCallParticipant",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewCallSignalingData": {
        "comment": "New call signaling data arrived",
        "parameters": {
            "call_id": {
                "description": "The call identifier",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "data": {
                "description": "The data",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUserPrivacySettingRules": {
        "comment": "Some privacy setting rules have been changed",
        "parameters": {
            "setting": {
                "description": "The privacy setting",
                "nullable": false,
                "type": "UserPrivacySetting",
                "tl": "UserPrivacySetting",
                "enum": 2
            },
            "rules": {
                "description": "New privacy rules",
                "nullable": false,
                "type": "UserPrivacySettingRules",
                "tl": "UserPrivacySettingRules",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUnreadMessageCount": {
        "comment": "Number of unread messages in a chat list has changed. This update is sent only if the message database is used",
        "parameters": {
            "chat_list": {
                "description": "The chat list with changed number of unread messages",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "unread_count": {
                "description": "Total number of unread messages",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "unread_unmuted_count": {
                "description": "Total number of unread messages in unmuted chats",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUnreadChatCount": {
        "comment": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if the message database is used",
        "parameters": {
            "chat_list": {
                "description": "The chat list with changed number of unread messages",
                "nullable": false,
                "type": "ChatList",
                "tl": "ChatList",
                "enum": 2
            },
            "total_count": {
                "description": "Approximate total number of chats in the chat list",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "unread_count": {
                "description": "Total number of unread chats",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "unread_unmuted_count": {
                "description": "Total number of unread unmuted chats",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "marked_as_unread_count": {
                "description": "Total number of chats marked as unread",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "marked_as_unread_unmuted_count": {
                "description": "Total number of unmuted chats marked as unread",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateOption": {
        "comment": "An option changed its value",
        "parameters": {
            "name": {
                "description": "The option name",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "value": {
                "description": "The new option value",
                "nullable": false,
                "type": "OptionValue",
                "tl": "OptionValue",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateStickerSet": {
        "comment": "A sticker set has changed",
        "parameters": {
            "sticker_set": {
                "description": "The sticker set",
                "nullable": false,
                "type": "StickerSet",
                "tl": "StickerSet",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateInstalledStickerSets": {
        "comment": "The list of installed sticker sets was updated",
        "parameters": {
            "sticker_type": {
                "description": "Type of the affected stickers",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "sticker_set_ids": {
                "description": "The new list of installed ordinary sticker sets",
                "nullable": false,
                "type": "List<String>",
                "tl": "int64",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateTrendingStickerSets": {
        "comment": "The list of trending sticker sets was updated or some of them were viewed",
        "parameters": {
            "sticker_type": {
                "description": "Type of the affected stickers",
                "nullable": false,
                "type": "StickerType",
                "tl": "StickerType",
                "enum": 2
            },
            "sticker_sets": {
                "description": "The prefix of the list of trending sticker sets with the newest trending sticker sets",
                "nullable": false,
                "type": "TrendingStickerSets",
                "tl": "TrendingStickerSets",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateRecentStickers": {
        "comment": "The list of recently used stickers was updated",
        "parameters": {
            "is_attached": {
                "description": "True, if the list of stickers attached to photo or video files was updated; otherwise, the list of sent stickers is updated",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "sticker_ids": {
                "description": "The new list of file identifiers of recently used stickers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateFavoriteStickers": {
        "comment": "The list of favorite stickers was updated",
        "parameters": {
            "sticker_ids": {
                "description": "The new list of file identifiers of favorite stickers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSavedAnimations": {
        "comment": "The list of saved animations was updated",
        "parameters": {
            "animation_ids": {
                "description": "The new list of file identifiers of saved animations",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSavedNotificationSounds": {
        "comment": "The list of saved notifications sounds was updated. This update may not be sent until information about a notification sound was requested for the first time",
        "parameters": {
            "notification_sound_ids": {
                "description": "The new list of identifiers of saved notification sounds",
                "nullable": false,
                "type": "List<String>",
                "tl": "int64",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSelectedBackground": {
        "comment": "The selected background has changed",
        "parameters": {
            "for_dark_theme": {
                "description": "True, if background for dark theme has changed",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            },
            "background": {
                "description": "The new selected background; may be null",
                "nullable": true,
                "type": "Background",
                "tl": "Background",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatThemes": {
        "comment": "The list of available chat themes has changed",
        "parameters": {
            "chat_themes": {
                "description": "The new list of chat themes",
                "nullable": false,
                "type": "List<ChatTheme>",
                "tl": "ChatTheme",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateLanguagePackStrings": {
        "comment": "Some language pack strings have been updated",
        "parameters": {
            "localization_target": {
                "description": "Localization target to which the language pack belongs",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "language_pack_id": {
                "description": "Identifier of the updated language pack",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "strings": {
                "description": "List of changed language pack strings",
                "nullable": false,
                "type": "List<LanguagePackString>",
                "tl": "LanguagePackString",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateConnectionState": {
        "comment": "The connection state has changed. This update must be used only to show a human-readable description of the connection state",
        "parameters": {
            "state": {
                "description": "The new connection state",
                "nullable": false,
                "type": "ConnectionState",
                "tl": "ConnectionState",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateTermsOfService": {
        "comment": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method must be called with the reason \"Decline ToS update\"",
        "parameters": {
            "terms_of_service_id": {
                "description": "Identifier of the terms of service",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "terms_of_service": {
                "description": "The new terms of service",
                "nullable": false,
                "type": "TermsOfService",
                "tl": "TermsOfService",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateUsersNearby": {
        "comment": "The list of users nearby has changed. The update is guaranteed to be sent only 60 seconds after a successful searchChatsNearby request",
        "parameters": {
            "users_nearby": {
                "description": "The new list of users nearby",
                "nullable": false,
                "type": "List<ChatNearby>",
                "tl": "ChatNearby",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateAttachmentMenuBots": {
        "comment": "The list of bots added to attachment menu has changed",
        "parameters": {
            "bots": {
                "description": "The new list of bots added to attachment menu. The bots must not be shown on scheduled messages screen",
                "nullable": false,
                "type": "List<AttachmentMenuBot>",
                "tl": "AttachmentMenuBot",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateWebAppMessageSent": {
        "comment": "A message was sent by an opened Web App, so the Web App needs to be closed",
        "parameters": {
            "web_app_launch_id": {
                "description": "Identifier of Web App launch",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateActiveEmojiReactions": {
        "comment": "The list of active emoji reactions has changed",
        "parameters": {
            "emojis": {
                "description": "The new list of active emoji reactions",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateDefaultReactionType": {
        "comment": "The type of default reaction has changed",
        "parameters": {
            "reaction_type": {
                "description": "The new type of the default reaction",
                "nullable": false,
                "type": "ReactionType",
                "tl": "ReactionType",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateDiceEmojis": {
        "comment": "The list of supported dice emojis has changed",
        "parameters": {
            "emojis": {
                "description": "The new list of supported dice emojis",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateAnimatedEmojiMessageClicked": {
        "comment": "Some animated emoji message was clicked and a big animated sticker must be played if the message is visible on the screen. chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Message identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "sticker": {
                "description": "The animated sticker to be played",
                "nullable": false,
                "type": "Sticker",
                "tl": "Sticker",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateAnimationSearchParameters": {
        "comment": "The parameters of animation search through getOption(\"animation_search_bot_username\") bot has changed",
        "parameters": {
            "provider": {
                "description": "Name of the animation search provider",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "emojis": {
                "description": "The new list of emojis suggested for searching",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateSuggestedActions": {
        "comment": "The list of suggested to the user actions has changed",
        "parameters": {
            "added_actions": {
                "description": "Added suggested actions",
                "nullable": false,
                "type": "List<SuggestedAction>",
                "tl": "SuggestedAction",
                "enum": 4
            },
            "removed_actions": {
                "description": "Removed suggested actions",
                "nullable": false,
                "type": "List<SuggestedAction>",
                "tl": "SuggestedAction",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewInlineQuery": {
        "comment": "A new incoming inline query; for bots only",
        "parameters": {
            "id": {
                "description": "Unique query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_location": {
                "description": "User location; may be null",
                "nullable": true,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "chat_type": {
                "description": "The type of the chat from which the query originated; may be null if unknown",
                "nullable": true,
                "type": "ChatType",
                "tl": "ChatType",
                "enum": 2
            },
            "query": {
                "description": "Text of the query",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "offset": {
                "description": "Offset of the first entry to return",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewChosenInlineResult": {
        "comment": "The user has chosen a result of an inline query; for bots only",
        "parameters": {
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "user_location": {
                "description": "User location; may be null",
                "nullable": true,
                "type": "Location",
                "tl": "Location",
                "enum": 2
            },
            "query": {
                "description": "Text of the query",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "result_id": {
                "description": "Identifier of the chosen result",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "inline_message_id": {
                "description": "Identifier of the sent inline message, if known",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewCallbackQuery": {
        "comment": "A new incoming callback query; for bots only",
        "parameters": {
            "id": {
                "description": "Unique query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "chat_id": {
                "description": "Identifier of the chat where the query was sent",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "message_id": {
                "description": "Identifier of the message from which the query originated",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "chat_instance": {
                "description": "Identifier that uniquely corresponds to the chat to which the message was sent",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "payload": {
                "description": "Query payload",
                "nullable": false,
                "type": "CallbackQueryPayload",
                "tl": "CallbackQueryPayload",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewInlineCallbackQuery": {
        "comment": "A new incoming callback query from a message sent via a bot; for bots only",
        "parameters": {
            "id": {
                "description": "Unique query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "inline_message_id": {
                "description": "Identifier of the inline message from which the query originated",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "chat_instance": {
                "description": "An identifier uniquely corresponding to the chat a message was sent to",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "payload": {
                "description": "Query payload",
                "nullable": false,
                "type": "CallbackQueryPayload",
                "tl": "CallbackQueryPayload",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewShippingQuery": {
        "comment": "A new incoming shipping query; for bots only. Only for invoices with flexible price",
        "parameters": {
            "id": {
                "description": "Unique query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invoice_payload": {
                "description": "Invoice payload",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "shipping_address": {
                "description": "User shipping address",
                "nullable": false,
                "type": "Address",
                "tl": "Address",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewPreCheckoutQuery": {
        "comment": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout",
        "parameters": {
            "id": {
                "description": "Unique query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "sender_user_id": {
                "description": "Identifier of the user who sent the query",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "currency": {
                "description": "Currency for the product price",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "total_amount": {
                "description": "Total price for the product, in the smallest units of the currency",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "invoice_payload": {
                "description": "Invoice payload",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            },
            "shipping_option_id": {
                "description": "Identifier of a shipping option chosen by the user; may be empty if not applicable",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "order_info": {
                "description": "Information about the order; may be null",
                "nullable": true,
                "type": "OrderInfo",
                "tl": "OrderInfo",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewCustomEvent": {
        "comment": "A new incoming event; for bots only",
        "parameters": {
            "event": {
                "description": "A JSON-serialized event",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewCustomQuery": {
        "comment": "A new incoming query; for bots only",
        "parameters": {
            "id": {
                "description": "The query identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "data": {
                "description": "JSON-serialized query data",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "timeout": {
                "description": "Query timeout",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdatePoll": {
        "comment": "A poll was updated; for bots only",
        "parameters": {
            "poll": {
                "description": "New data about the poll",
                "nullable": false,
                "type": "Poll",
                "tl": "Poll",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdatePollAnswer": {
        "comment": "A user changed the answer to a poll; for bots only",
        "parameters": {
            "poll_id": {
                "description": "Unique poll identifier",
                "nullable": false,
                "type": "String",
                "tl": "int64",
                "enum": 3
            },
            "user_id": {
                "description": "The user, who changed the answer to the poll",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "option_ids": {
                "description": "0-based identifiers of answer options, chosen by the user",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateChatMember": {
        "comment": "User rights changed in a chat; for bots only",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "actor_user_id": {
                "description": "Identifier of the user, changing the rights",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "date": {
                "description": "Point in time (Unix timestamp) when the user rights was changed",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            },
            "invite_link": {
                "description": "If user has joined the chat using an invite link, the invite link; may be null",
                "nullable": true,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            },
            "old_chat_member": {
                "description": "Previous chat member",
                "nullable": false,
                "type": "ChatMember",
                "tl": "ChatMember",
                "enum": 2
            },
            "new_chat_member": {
                "description": "New chat member",
                "nullable": false,
                "type": "ChatMember",
                "tl": "ChatMember",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "UpdateNewChatJoinRequest": {
        "comment": "A user sent a join request to a chat; for bots only",
        "parameters": {
            "chat_id": {
                "description": "Chat identifier",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "request": {
                "description": "Join request",
                "nullable": false,
                "type": "ChatJoinRequest",
                "tl": "ChatJoinRequest",
                "enum": 2
            },
            "invite_link": {
                "description": "The invite link, which was used to send join request; may be null",
                "nullable": true,
                "type": "ChatInviteLink",
                "tl": "ChatInviteLink",
                "enum": 2
            }
        },
        "is-function": false,
        "return": ""
    },
    "Updates": {
        "comment": "Contains a list of updates",
        "parameters": {
            "updates": {
                "description": "List of updates",
                "nullable": false,
                "type": "List<Update>",
                "tl": "Update",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "LogStreamDefault": {
        "comment": "The log is written to stderr or an OS specific log",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "LogStreamFile": {
        "comment": "The log is written to a file",
        "parameters": {
            "path": {
                "description": "Path to the file to where the internal TDLib log will be written",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "max_file_size": {
                "description": "The maximum size of the file to where the internal TDLib log is written before the file will automatically be rotated, in bytes",
                "nullable": false,
                "type": "int",
                "tl": "int53",
                "enum": 3
            },
            "redirect_stderr": {
                "description": "Pass true to additionally redirect stderr to the log file. Ignored on Windows",
                "nullable": false,
                "type": "bool",
                "tl": "Bool",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LogStreamEmpty": {
        "comment": "The log is written nowhere",
        "parameters": {},
        "is-function": false,
        "return": ""
    },
    "LogVerbosityLevel": {
        "comment": "Contains a TDLib internal log verbosity level",
        "parameters": {
            "verbosity_level": {
                "description": "Log verbosity level",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "LogTags": {
        "comment": "Contains a list of available TDLib internal log tags",
        "parameters": {
            "tags": {
                "description": "List of log tags",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "UserSupportInfo": {
        "comment": "Contains custom information about the user",
        "parameters": {
            "message": {
                "description": "Information message",
                "nullable": false,
                "type": "FormattedText",
                "tl": "FormattedText",
                "enum": 2
            },
            "author": {
                "description": "Information author",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            },
            "date": {
                "description": "Information change date",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestInt": {
        "comment": "A simple object containing a number; for testing only",
        "parameters": {
            "value": {
                "description": "Number",
                "nullable": false,
                "type": "int",
                "tl": "int32",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestString": {
        "comment": "A simple object containing a string; for testing only",
        "parameters": {
            "value": {
                "description": "String",
                "nullable": false,
                "type": "String",
                "tl": "string",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestBytes": {
        "comment": "A simple object containing a sequence of bytes; for testing only",
        "parameters": {
            "value": {
                "description": "Bytes",
                "nullable": false,
                "type": "String",
                "tl": "bytes",
                "enum": 3
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestVectorInt": {
        "comment": "A simple object containing a vector of numbers; for testing only",
        "parameters": {
            "value": {
                "description": "Vector of numbers",
                "nullable": false,
                "type": "List<int>",
                "tl": "int32",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestVectorIntObject": {
        "comment": "A simple object containing a vector of objects that hold a number; for testing only",
        "parameters": {
            "value": {
                "description": "Vector of objects",
                "nullable": false,
                "type": "List<TestInt>",
                "tl": "TestInt",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestVectorString": {
        "comment": "A simple object containing a vector of strings; for testing only",
        "parameters": {
            "value": {
                "description": "Vector of strings",
                "nullable": false,
                "type": "List<String>",
                "tl": "string",
                "enum": 6
            }
        },
        "is-function": false,
        "return": ""
    },
    "TestVectorStringObject": {
        "comment": "A simple object containing a vector of objects that hold a string; for testing only",
        "parameters": {
            "value": {
                "description": "Vector of objects",
                "nullable": false,
                "type": "List<TestString>",
                "tl": "TestString",
                "enum": 4
            }
        },
        "is-function": false,
        "return": ""
    }
}